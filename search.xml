<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>README</title>
    <url>/2023/03/03/README/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2023/03/03/g69f3kBiLpaKweJ.jpg"></p>
<p>——————-这里是付柏森 </p>
<p>​     —————————学习python的第n天</p>
<p>​                ———————————-欢迎 回来   勤劳者</p>
<p><img src="https://s2.loli.net/2023/03/03/eZXEF87HCdtwniO.jpg" alt="python学习方向"></p>
]]></content>
  </entry>
  <entry>
    <title>draft</title>
    <url>/2023/03/03/MATLAB%E5%AD%A6%E4%B9%A0/draft/</url>
    <content><![CDATA[<p><a href="https://ww2.mathworks.cn/help/matlab/ref/surf.html">ww2.mathworks.cn</a></p>
<p><a href="https://ww2.mathworks.cn/help/matlab/ref/peaks.html">peaks 函数 - MATLAB peaks - MathWorks 中国</a></p>
<p><a href="https://cn.bing.com/search?q=matlab+rectangle+Position&go=%E6%90%9C%E7%B4%A2&qs=ds&form=QBRE">matlab rectangle Position - 搜索 (bing.com)</a></p>
]]></content>
  </entry>
  <entry>
    <title>01_基础概念</title>
    <url>/2022/03/17/python%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E5%AD%A6%E4%B9%A0/01_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h1 id="面向对象-OOP-基本概念"><a href="#面向对象-OOP-基本概念" class="headerlink" title="面向对象(OOP)基本概念"></a>面向对象(OOP)基本概念</h1><p><strong>面向对象编程</strong> —— <code>Object Oriented Programming</code> 简写 <code>OOP</code></p>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>了解 <strong>面向对象</strong> 基本概念</li>
</ul>
<h2 id="01-面向对象基本概念"><a href="#01-面向对象基本概念" class="headerlink" title="01. 面向对象基本概念"></a>01. 面向对象基本概念</h2><ul>
<li>我们之前学习的编程方式就是 <strong>面向过程</strong> 的</li>
<li><strong>面相过程</strong> 和 <strong>面相对象</strong>，是两种不同的 <strong>编程方式</strong></li>
<li>对比 <strong>面向过程</strong> 的特点，可以更好地了解什么是 <strong>面向对象</strong></li>
</ul>
<h3 id="1-1-过程和函数（科普）"><a href="#1-1-过程和函数（科普）" class="headerlink" title="1.1 过程和函数（科普）"></a>1.1 过程和函数（科普）</h3><ul>
<li><strong>过程</strong> 是早期的一个编程概念</li>
<li><strong>过程</strong> 类似于函数，只能执行，但是没有返回值</li>
<li><strong>函数</strong> 不仅能执行，还可以返回结果</li>
</ul>
<h3 id="1-2-面相过程-和-面相对象-基本概念"><a href="#1-2-面相过程-和-面相对象-基本概念" class="headerlink" title="1.2 面相过程 和 面相对象 基本概念"></a>1.2 面相过程 和 面相对象 基本概念</h3><h4 id="1-面相过程-——-怎么做？"><a href="#1-面相过程-——-怎么做？" class="headerlink" title="1) 面相过程 —— 怎么做？"></a>1) <strong>面相过程</strong> —— <strong>怎么做</strong>？</h4><ol>
<li>把完成某一个需求的 <code>所有步骤</code> <code>从头到尾</code> 逐步实现</li>
<li>根据开发需求，将某些 <strong>功能独立</strong> 的代码 <strong>封装</strong> 成一个又一个 <strong>函数</strong></li>
<li>最后完成的代码，就是顺序地调用 <strong>不同的函数</strong></li>
</ol>
<p><strong>特点</strong></p>
<ol>
<li>注重 <strong>步骤与过程</strong>，不注重职责分工</li>
<li>如果需求复杂，代码会变得很复杂</li>
<li><strong>开发复杂项目，没有固定的套路，开发难度很大！</strong></li>
</ol>
<p><img src="https://s2.loli.net/2022/03/15/FuvAN4oSZwkh65I.png" alt="001_面向过程"></p>
<h4 id="2-面向对象-——-谁来做？"><a href="#2-面向对象-——-谁来做？" class="headerlink" title="2) 面向对象 —— 谁来做？"></a>2) <strong>面向对象</strong> —— <strong>谁来做</strong>？</h4><blockquote>
<p>相比较函数，<strong>面向对象</strong> 是 <strong>更大</strong> 的 <strong>封装</strong>，根据 <strong>职责</strong> 在 <strong>一个对象中 封装 多个方法</strong></p>
</blockquote>
<ol>
<li>在完成某一个需求前，首先确定 <strong>职责</strong> —— <strong>要做的事情（方法）</strong></li>
<li>根据 <strong>职责</strong> 确定不同的 <strong>对象</strong>，在 <strong>对象</strong> 内部封装不同的 <strong>方法</strong>（多个）</li>
<li>最后完成的代码，就是顺序地让 <strong>不同的对象</strong> 调用 <strong>不同的方法</strong></li>
</ol>
<p><strong>特点</strong></p>
<ol>
<li>注重 <strong>对象和职责</strong>，不同的对象承担不同的职责</li>
<li>更加适合应对复杂的需求变化，<strong>是专门应对复杂项目开发，提供的固定套路</strong></li>
<li><strong>需要在面向过程基础上，再学习一些面向对象的语法</strong></li>
</ol>
<p><img src="https://s2.loli.net/2022/03/15/I2LXkqGfTwcyhNM.png" alt="001_植物大战僵尸"></p>
<p><img src="https://s2.loli.net/2022/03/15/BEWgyOvfRXK41i8.png" alt="001_植物大战僵尸类图"></p>
]]></content>
      <categories>
        <category>python面对对象学习</category>
      </categories>
      <tags>
        <tag>python学习</tag>
      </tags>
  </entry>
  <entry>
    <title>03_基础语法</title>
    <url>/2022/03/19/python%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E5%AD%A6%E4%B9%A0/03_%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="面相对象基础语法"><a href="#面相对象基础语法" class="headerlink" title="面相对象基础语法"></a>面相对象基础语法</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li><code>dir</code> 内置函数</li>
<li>定义简单的类（只包含方法）</li>
<li>方法中的 <code>self</code> 参数</li>
<li>初始化方法</li>
<li>内置方法和属性</li>
</ul>
<h2 id="01-dir-内置函数（知道）"><a href="#01-dir-内置函数（知道）" class="headerlink" title="01. dir 内置函数（知道）"></a>01. <code>dir</code> 内置函数（知道）</h2><ul>
<li>在 <code>Python</code> 中 <strong>对象几乎是无所不在的</strong>，<em>我们之前学习的 <strong>变量</strong>、<strong>数据</strong>、<strong>函数</strong> 都是对象</em></li>
</ul>
<p>在 <code>Python</code> 中可以使用以下两个方法验证：</p>
<ol>
<li>在 <strong>标识符</strong> &#x2F; <strong>数据</strong> 后输入一个 <code>.</code>，然后按下 <code>TAB</code> 键，<code>iPython</code> 会提示该对象能够调用的 <strong>方法列表</strong></li>
<li>使用内置函数 <code>dir</code> 传入 <strong>标识符</strong> &#x2F; <strong>数据</strong>，可以查看对象内的 <strong>所有属性及方法</strong></li>
</ol>
<p><strong>提示</strong> <code>__方法名__</code> 格式的方法是 <code>Python</code> 提供的 <strong>内置方法 &#x2F; 属性</strong>，稍后会给大家介绍一些常用的 内置方法 &#x2F; 属性</p>
<p><img src="https://s2.loli.net/2022/03/19/rMtYxpNqUv3A7Oc.png" alt="image-20220319133706372"><code>._ _doc_ _      属性</code></p>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">方法名</th>
<th align="center">类型</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">01</td>
<td align="center"><code>__new__</code></td>
<td align="center">方法</td>
<td align="left"><strong>创建对象</strong>时，会被 <strong>自动</strong> 调用</td>
</tr>
<tr>
<td align="center">02</td>
<td align="center"><code>__init__</code></td>
<td align="center">方法</td>
<td align="left"><strong>对象被初始化</strong>时，会被 <strong>自动</strong> 调用</td>
</tr>
<tr>
<td align="center">03</td>
<td align="center"><code>__del__</code></td>
<td align="center">方法</td>
<td align="left"><strong>对象被从内存中销毁</strong>前，会被 <strong>自动</strong> 调用</td>
</tr>
<tr>
<td align="center">04</td>
<td align="center"><code>__str__</code></td>
<td align="center">方法</td>
<td align="left">返回<strong>对象的描述信息</strong>，<code>print</code> 函数输出使用</td>
</tr>
</tbody></table>
<p><strong>提示</strong> 利用好 <code>dir()</code> 函数，在学习时很多内容就不需要死记硬背了</p>
<h2 id="02-定义简单的类（只包含方法）"><a href="#02-定义简单的类（只包含方法）" class="headerlink" title="02. 定义简单的类（只包含方法）"></a>02. 定义简单的类（只包含方法）</h2><blockquote>
<p><strong>面向对象</strong> 是 <strong>更大</strong> 的 <strong>封装</strong>，在 <strong>一个类中 封装 多个方法</strong>，这样 <strong>通过这个类创建出来的对象，就可以直接调用这些方法了</strong>！</p>
</blockquote>
<h3 id="2-1-定义只包含方法的类"><a href="#2-1-定义只包含方法的类" class="headerlink" title="2.1 定义只包含方法的类"></a>2.1 定义只包含方法的类</h3><ul>
<li>在 <code>Python</code> 中要定义一个只包含方法的类，语法格式如下：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">方法1</span>(<span class="params">self, 参数列表</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">方法2</span>(<span class="params">self, 参数列表</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>方法</strong> 的定义格式和之前学习过的<strong>函数</strong> 几乎一样</li>
<li>区别在于第一个参数必须是 <code>self</code>，大家暂时先记住，稍后介绍 <code>self</code></li>
</ul>
<blockquote>
<p>注意：<strong>类名</strong> 的 命名规则 要符合 <strong>大驼峰命名法</strong></p>
</blockquote>
<h3 id="2-2-创建对象"><a href="#2-2-创建对象" class="headerlink" title="2.2 创建对象"></a>2.2 创建对象</h3><ul>
<li>当一个类定义完成之后，要使用这个类来创建对象，语法格式如下：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">对象变量 = 类名()</span><br></pre></td></tr></table></figure>

<h3 id="2-3-第一个面向对象程序"><a href="#2-3-第一个面向对象程序" class="headerlink" title="2.3 第一个面向对象程序"></a>2.3 第一个面向对象程序</h3><p><strong>需求</strong></p>
<ul>
<li><strong>小猫</strong> 爱 <strong>吃</strong> 鱼，<strong>小猫</strong> 要 <strong>喝</strong> 水</li>
</ul>
<p><strong>分析</strong></p>
<ol>
<li>定义一个猫类 <code>Cat</code></li>
<li>定义两个方法 <code>eat</code> 和 <code>drink</code></li>
<li>按照需求 —— 不需要定义属性</li>
</ol>
<p><img src="https://s2.loli.net/2022/03/19/4nyHJSbaDlu6WAY.png" alt="004_Cat类1"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;这是一个猫类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;小猫爱吃鱼&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">drink</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;小猫在喝水&quot;</span>)</span><br><span class="line"></span><br><span class="line">tom = Cat()</span><br><span class="line">tom.drink()</span><br><span class="line">tom.eat()</span><br></pre></td></tr></table></figure>

<h4 id="引用概念的强调"><a href="#引用概念的强调" class="headerlink" title="引用概念的强调"></a>引用概念的强调</h4><blockquote>
<p>在面向对象开发中，<strong>引用</strong>的概念是同样适用的！</p>
</blockquote>
<ul>
<li><p>在 <code>Python</code> 中使用类 <strong>创建对象之后</strong>，<code>tom</code> 变量中 仍然记录的是 <strong>对象在内存中的地址</strong></p>
</li>
<li><p>也就是 <code>tom</code> 变量 <strong>引用</strong> 了 <strong>新建的猫对象</strong></p>
<ul>
<li><p>（借用引用概念可以解释：</p>
<p><a href="%5B(4%E6%9D%A1%E6%B6%88%E6%81%AF">Python中一切皆对象。不管是我们自己定义的类、6种基本数据类型还是内置的类(第三方类)等都称作为对象</a> python：类基础_不怕猫的耗子A的博客-CSDN博客_python 类](<a href="https://blog.csdn.net/qq_39314932/article/details/80716295))%EF%BC%89">https://blog.csdn.net/qq_39314932/article/details/80716295))）</a></p>
</li>
</ul>
</li>
<li><p>使用 <code>print</code> 输出 <strong>对象变量</strong>，默认情况下，是能够输出这个变量 <strong>引用的对象</strong> 是 <strong>由哪一个类创建的对象</strong>，以及 <strong>在内存中的地址</strong>（<strong>十六进制表示</strong>）</p>
</li>
</ul>
<blockquote>
<p>提示：在计算机中，通常使用 <strong>十六进制</strong> 表示 <strong>内存地址</strong></p>
<ul>
<li><strong>十进制</strong> 和 <strong>十六进制</strong> 都是用来表达数字的，只是表示的方式不一样</li>
<li><strong>十进制</strong> 和 <strong>十六进制</strong> 的数字之间可以来回转换</li>
</ul>
</blockquote>
<ul>
<li><code>%d</code> 可以以 <strong>10 进制</strong> 输出数字</li>
<li><code>%x</code> 可以以 <strong>16 进制</strong> 输出数字</li>
</ul>
<p><img src="https://s2.loli.net/2022/03/20/Yg96x43bnzpRiyO.png" alt="image-20220320132828155"></p>
<h4 id="案例进阶-——-使用-Cat-类再创建一个对象"><a href="#案例进阶-——-使用-Cat-类再创建一个对象" class="headerlink" title="案例进阶 —— 使用 Cat 类再创建一个对象"></a>案例进阶 —— 使用 Cat 类再创建一个对象</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lazy_cat = Cat()</span><br><span class="line">lazy_cat.eat()</span><br><span class="line">lazy_cat.drink()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提问：<code>tom</code> 和 <code>lazy_cat</code> 是同一个对象吗？</p>
</blockquote>
<h2 id="03-方法中的-self-参数"><a href="#03-方法中的-self-参数" class="headerlink" title="03. 方法中的 self 参数"></a>03. 方法中的 <code>self</code> 参数</h2><h3 id="3-1-案例改造-——-给对象增加属性"><a href="#3-1-案例改造-——-给对象增加属性" class="headerlink" title="3.1 案例改造 —— 给对象增加属性"></a>3.1 案例改造 —— 给对象增加属性</h3><ul>
<li><p>在 Python中，要给对象设置属性，非常的容易，但是不推荐使用</p>
<ul>
<li>因为：对象属性的封装应该封装在类的内部</li>
</ul>
</li>
<li><p>只需要在 <strong>类的外部的代码</strong> 中直接通过 <code>.</code> 设置一个属性即可</p>
<p><img src="https://s2.loli.net/2022/03/20/iJaLUof3WjwOcEM.png" alt="image-20220320134607670"></p>
</li>
</ul>
<blockquote>
<p>注意：这种方式虽然简单，但是不推荐使用！</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tom.name = <span class="string">&quot;Tom&quot;</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">lazy_cat.name = <span class="string">&quot;大懒猫&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-使用-self-在方法内部输出每一只猫的名字"><a href="#3-2-使用-self-在方法内部输出每一只猫的名字" class="headerlink" title="3.2 使用 self 在方法内部输出每一只猫的名字"></a>3.2 使用 <code>self</code> 在方法内部输出每一只猫的名字</h3><blockquote>
<p>由 <strong>哪一个对象</strong> 调用的方法，方法内的 <code>self</code> 就是 <strong>哪一个对象的引用</strong></p>
<p><img src="https://s2.loli.net/2022/03/20/B4nzx5FOyAwHgiv.png" alt="image-20220320135141107" style="zoom:33%;" /><img src="https://s2.loli.net/2022/03/20/BHUGXhb2596A1Rj.png" alt="image-20220320135222976" style="zoom:33%;" /><img src="https://s2.loli.net/2022/03/20/hOgwHs1CVESdmMT.png" alt="image-20220320135613550" style="zoom: 25%;" /></p>
</blockquote>
<ul>
<li>在类封装的方法内部，<code>self</code> 就表示 <strong>当前调用方法的对象自己</strong></li>
<li><strong>调用方法时</strong>，程序员不需要传递 <code>self</code> 参数</li>
<li>在方法内部<ul>
<li>可以通过 <code>self.</code> <strong>访问对象的属性</strong></li>
<li>也可以通过 <code>self.</code> <strong>调用其他的对象方法</strong></li>
</ul>
</li>
<li>改造代码如下：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 爱吃鱼&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line">tom = Cat()</span><br><span class="line">tom.name = <span class="string">&quot;Tom&quot;</span></span><br><span class="line">tom.eat()</span><br><span class="line"></span><br><span class="line">lazy_cat = Cat()</span><br><span class="line">lazy_cat.name = <span class="string">&quot;大懒猫&quot;</span></span><br><span class="line">lazy_cat.eat()</span><br></pre></td></tr></table></figure>





<p><img src="https://s2.loli.net/2022/03/19/JaVXxeRbFdZmswT.png" alt="005_方法中的self"></p>
<ul>
<li>在 <strong>类的外部</strong>，通过 <code>变量名.</code> 访问对象的 <strong>属性和方法</strong></li>
<li>在 <strong>类封装的方法中</strong>，通过 <code>self.</code> 访问对象的 <strong>属性和方法</strong></li>
</ul>
<h2 id="04-初始化方法"><a href="#04-初始化方法" class="headerlink" title="04. 初始化方法"></a>04. 初始化方法</h2><h3 id="4-1-之前代码存在的问题-——-在类的外部给对象增加属性"><a href="#4-1-之前代码存在的问题-——-在类的外部给对象增加属性" class="headerlink" title="4.1 之前代码存在的问题 —— 在类的外部给对象增加属性"></a>4.1 之前代码存在的问题 —— 在类的外部给对象增加属性</h3><ul>
<li>将案例代码进行调整，<strong>先调用方法 再设置属性</strong>，观察一下执行效果</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tom = Cat()</span><br><span class="line">tom.drink()</span><br><span class="line">tom.eat()</span><br><span class="line">tom.name = <span class="string">&quot;Tom&quot;</span></span><br><span class="line"><span class="built_in">print</span>(tom)</span><br></pre></td></tr></table></figure>

<ul>
<li>程序执行报错如下：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AttributeError: &#x27;Cat&#x27; object has no attribute &#x27;name&#x27;</span><br><span class="line">属性错误：&#x27;Cat&#x27; 对象没有 &#x27;name&#x27; 属性</span><br></pre></td></tr></table></figure>

<p><strong>提示</strong></p>
<ul>
<li><p>在日常开发中，不推荐在类的外部给对象增加属性</p>
<ul>
<li>如果<strong>在运行时，没有找到属性，程序会报错</strong></li>
</ul>
</li>
<li><p>对象应该包含有哪些属性，应该 <strong>封装在类的内部</strong></p>
</li>
</ul>
<h3 id="4-2-初始化方法"><a href="#4-2-初始化方法" class="headerlink" title="4.2 初始化方法"></a>4.2 初始化方法</h3><ul>
<li><p>当使用  类名()  创建对象时，会自动执行以下操作：</p>
<ol>
<li>为对象在内存中 <strong>分配空间</strong> —— 创建对象</li>
<li>为对象的属性 <strong>设置初始值</strong> —— 初始化方法(<code>init</code>)</li>
</ol>
</li>
<li><p>这个 <strong>初始化方法</strong> 就是 <code>__init__</code> 方法，<code>__init__</code> 是对象的<strong>内置方法</strong></p>
</li>
</ul>
<blockquote>
<p><code>__init__</code> 方法是 <strong>专门</strong> 用来定义一个类 <strong>具有哪些属性的方法</strong>！</p>
</blockquote>
<p>在 <code>Cat</code> 中增加 <code>__init__</code> 方法，验证该方法在创建对象时会被自动调用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;这是一个猫类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;初始化方法&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="4-3-在初始化方法内部定义属性"><a href="#4-3-在初始化方法内部定义属性" class="headerlink" title="4.3 在初始化方法内部定义属性"></a>4.3 在初始化方法内部定义属性</h3><ul>
<li>在 <code>__init__</code> 方法内部使用 <code>self.属性名 = 属性的初始值</code> 就可以 <strong>定义属性</strong></li>
<li>定义属性之后，再使用 <code>Cat</code> 类创建的对象，都会拥有该属性</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这是一个初始化方法&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 定义用 Cat 类创建的猫对象都有一个 name 的属性</span></span><br><span class="line">        self.name = <span class="string">&quot;Tom&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 爱吃鱼&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用类名()创建对象的时候，会自动调用初始化方法 __init__</span></span><br><span class="line">tom = Cat()</span><br><span class="line"></span><br><span class="line">tom.eat()</span><br></pre></td></tr></table></figure>

<h3 id="4-4-改造初始化方法-——-初始化的同时设置初始值"><a href="#4-4-改造初始化方法-——-初始化的同时设置初始值" class="headerlink" title="4.4 改造初始化方法 —— 初始化的同时设置初始值"></a>4.4 改造初始化方法 —— 初始化的同时设置初始值</h3><ul>
<li><p>在开发中，如果希望在创建对象的同时，就设置对象的属性，可以对__init__方法进行改造</p>
<ol>
<li>把希望设置的属性值，定义成 <code>__init__</code> 方法的参数</li>
<li>在方法内部使用 <code>self.属性 = 形参</code> 接收外部传递的参数</li>
<li>在创建对象时，使用 <code>类名(属性1, 属性2...)</code> 调用</li>
</ol>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;初始化方法 %s&quot;</span> % name)</span><br><span class="line">        self.name = name</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">tom = Cat(<span class="string">&quot;Tom&quot;</span>)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">lazy_cat = Cat(<span class="string">&quot;大懒猫&quot;</span>)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="05-内置方法和属性"><a href="#05-内置方法和属性" class="headerlink" title="05. 内置方法和属性"></a>05. 内置方法和属性</h2><table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">方法名</th>
<th align="center">类型</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">01</td>
<td align="center"><code>__del__</code></td>
<td align="center">方法</td>
<td align="left"><strong>对象被从内存中销毁</strong>前，会被 <strong>自动</strong> 调用</td>
</tr>
<tr>
<td align="center">02</td>
<td align="center"><code>__str__</code></td>
<td align="center">方法</td>
<td align="left">返回<strong>对象的描述信息</strong>，<code>print</code> 函数输出使用</td>
</tr>
</tbody></table>
<h3 id="5-1-del-方法（知道）"><a href="#5-1-del-方法（知道）" class="headerlink" title="5.1 __del__ 方法（知道）"></a>5.1 <code>__del__</code> 方法（知道）</h3><ul>
<li>在 <code>Python</code> 中<ul>
<li>当使用 <code>类名()</code> 创建对象时，为对象 <strong>分配完空间</strong>后，<strong>自动</strong> 调用 <code>__init__</code> 方法</li>
<li>当一个 <strong>对象被从内存中销毁</strong> 前，会 <strong>自动</strong> 调用 <code>__del__</code> 方法</li>
</ul>
</li>
<li><strong>应用场景</strong><ul>
<li><code>__init__</code> 改造初始化方法，可以让创建对象更加灵活</li>
<li><code>__del__</code> 如果希望在对象被销毁前，再做一些事情，可以考虑一下 <code>__del__</code> 方法</li>
</ul>
</li>
<li><strong>生命周期</strong><ul>
<li>一个对象从调用 <code>类名()</code> 创建，生命周期开始</li>
<li>一个对象的 <code>__del__</code> 方法一旦被调用，生命周期结束</li>
<li>在对象的生命周期内，可以访问对象属性，或者让对象调用方法</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, new_name</span>):</span><br><span class="line"></span><br><span class="line">        self.name = new_name</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 来了&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 去了&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tom 是一个全局变量</span></span><br><span class="line">tom = Cat(<span class="string">&quot;Tom&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(tom.name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># del 关键字可以删除一个对象</span></span><br><span class="line"><span class="keyword">del</span> tom</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br></pre></td></tr></table></figure>

<h3 id="5-2-str-方法"><a href="#5-2-str-方法" class="headerlink" title="5.2 __str__ 方法"></a>5.2 <code>__str__</code> 方法</h3><ul>
<li>在 <code>Python</code> 中，使用 <code>print</code> 输出 <strong>对象变量</strong>，默认情况下，会输出这个变量 <strong>引用的对象</strong> 是 <strong>由哪一个类创建的对象</strong>，以及 <strong>在内存中的地址</strong>（<strong>十六进制表示</strong>）</li>
<li>如果在开发中，希望使用 <code>print</code> 输出 <strong>对象变量</strong> 时，能够打印 <strong>自定义的内容</strong>，就可以利用 <code>__str__</code> 这个内置方法了</li>
</ul>
<blockquote>
<p>注意：<code>__str__</code> 方法必须返回一个字符串</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, new_name</span>):</span><br><span class="line"></span><br><span class="line">        self.name = new_name</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 来了&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 去了&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我是小猫：%s&quot;</span> % self.name</span><br><span class="line"></span><br><span class="line">tom = Cat(<span class="string">&quot;Tom&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(tom)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python面对对象学习</category>
      </categories>
      <tags>
        <tag>python学习</tag>
      </tags>
  </entry>
  <entry>
    <title>05_封装案例II</title>
    <url>/2022/03/21/python%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E5%AD%A6%E4%B9%A0/05_%E5%B0%81%E8%A3%85%E6%A1%88%E4%BE%8BII/</url>
    <content><![CDATA[<h1 id="面向对象封装案例-II"><a href="#面向对象封装案例-II" class="headerlink" title="面向对象封装案例 II"></a>面向对象封装案例 II</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>士兵突击案例</li>
<li>身份运算符</li>
</ul>
<p><strong>封装</strong></p>
<ol>
<li><strong>封装</strong> 是面向对象编程的一大特点</li>
<li>面向对象编程的 <strong>第一步</strong> —— 将 <strong>属性</strong> 和 <strong>方法</strong> <strong>封装</strong> 到一个抽象的 <strong>类</strong> 中</li>
<li><strong>外界</strong> 使用 <strong>类</strong> 创建 <strong>对象</strong>，然后 <strong>让对象调用方法</strong></li>
<li><strong>对象方法的细节</strong> 都被 <strong>封装</strong> 在 <strong>类的内部</strong></li>
</ol>
<blockquote>
<p>一个对象的 <strong>属性</strong> 可以是 <strong>另外一个类创建的对象</strong></p>
</blockquote>
<h2 id="01-士兵突击"><a href="#01-士兵突击" class="headerlink" title="01. 士兵突击"></a>01. 士兵突击</h2><p><strong>需求</strong></p>
<ol>
<li><strong>士兵</strong> <strong>许三多</strong> 有一把 <strong>AK47</strong></li>
<li><strong>士兵</strong> 可以 <strong>开火</strong></li>
<li><strong>枪</strong> 能够 <strong>发射</strong> 子弹</li>
<li><strong>枪</strong> 装填 <strong>装填子弹</strong> —— <strong>增加子弹数量</strong></li>
</ol>
<p><img src="https://s2.loli.net/2022/03/20/6dQRAE2buIS4xWh.png" alt="009_士兵突击"></p>
<h3 id="1-1-开发枪类"><a href="#1-1-开发枪类" class="headerlink" title="1.1 开发枪类"></a>1.1 开发枪类</h3><p><strong><code>shoot</code> 方法需求</strong></p>
<ul>
<li>1&gt; 判断是否有子弹，没有子弹无法射击</li>
<li>2&gt; 使用 <code>print</code> 提示射击，并且输出子弹数量</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Gun</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, model</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 枪的型号</span></span><br><span class="line">        self.model = model</span><br><span class="line">        <span class="comment"># 子弹数量</span></span><br><span class="line">        self.bullet_count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_bullet</span>(<span class="params">self, count</span>):</span><br><span class="line"></span><br><span class="line">        self.bullet_count += count</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">shoot</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断是否还有子弹</span></span><br><span class="line">        <span class="keyword">if</span> self.bullet_count &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;没有子弹了...&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 发射一颗子弹</span></span><br><span class="line">        self.bullet_count -= <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 发射子弹[%d]...&quot;</span> % (self.model, self.bullet_count))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建枪对象</span></span><br><span class="line">ak47 = Gun(<span class="string">&quot;ak47&quot;</span>)</span><br><span class="line">ak47.add_bullet(<span class="number">50</span>)</span><br><span class="line">ak47.shoot()</span><br></pre></td></tr></table></figure>

<h3 id="1-2-开发士兵类"><a href="#1-2-开发士兵类" class="headerlink" title="1.2 开发士兵类"></a>1.2 开发士兵类</h3><blockquote>
<p>假设：每一个新兵 都 <strong>没有枪</strong></p>
</blockquote>
<p><strong>定义没有初始值的属性</strong></p>
<p>在定义属性时，如果 <strong>不知道设置什么初始值</strong>，可以设置为 <code>None</code></p>
<ul>
<li><code>None</code> <strong>关键字</strong> 表示 <strong>什么都没有</strong></li>
<li>表示一个 <strong>空对象</strong>，<strong>没有方法和属性，是一个特殊的常量</strong></li>
<li>可以将 <code>None</code> 赋值给任何一个变量</li>
</ul>
<p><strong><code>fire</code> 方法需求</strong></p>
<ul>
<li>1&gt; 判断是否有枪，没有枪没法冲锋</li>
<li>2&gt; 喊一声口号</li>
<li>3&gt; 装填子弹</li>
<li>4&gt; 射击</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Soldier</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 姓名</span></span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="comment"># 枪，士兵初始没有枪 None 关键字表示什么都没有</span></span><br><span class="line">        self.gun = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fire</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. 判断士兵是否有枪</span></span><br><span class="line">        <span class="keyword">if</span> self.gun <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[%s] 还没有枪...&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 高喊口号</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;冲啊...[%s]&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 让枪装填子弹</span></span><br><span class="line">        self.gun.add_bullet(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 4. 让枪发射子弹</span></span><br><span class="line">        self.gun.shoot()</span><br></pre></td></tr></table></figure>

<p><strong>小结</strong></p>
<ol>
<li>创建了一个 <strong>士兵类</strong>，使用到 <code>__init__</code> 内置方法</li>
<li>在定义属性时，如果 <strong>不知道设置什么初始值</strong>，可以设置为 <code>None</code></li>
<li>在 <strong>封装的</strong> 方法内部，还可以让 <strong>自己的</strong> <strong>使用其他类创建的对象属性</strong> 调用已经 <strong>封装好的方法</strong></li>
</ol>
<h2 id="02-身份运算符"><a href="#02-身份运算符" class="headerlink" title="02. 身份运算符"></a>02. 身份运算符</h2><p>身份运算符用于 <strong>比较</strong> 两个对象的 <strong>内存地址</strong> 是否一致 —— <strong>是否是对同一个对象的引用</strong></p>
<ul>
<li>在 <code>Python</code> 中针对 <code>None</code> 比较时，建议使用 <code>is</code> 判断</li>
</ul>
<table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">描述</th>
<th align="left">实例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">is</td>
<td align="left">is 是判断两个标识符是不是引用同一个对象</td>
<td align="left">x is y，类似 id(x) &#x3D;&#x3D; id(y)</td>
</tr>
<tr>
<td align="left">is not</td>
<td align="left">is not 是判断两个标识符是不是引用不同对象</td>
<td align="left">x is not y，类似 id(a) !&#x3D; id(b)</td>
</tr>
</tbody></table>
<h3 id="is-与-x3D-x3D-区别："><a href="#is-与-x3D-x3D-区别：" class="headerlink" title="is 与 &#x3D;&#x3D; 区别："></a>is 与 &#x3D;&#x3D; 区别：</h3><p><code>is</code> 用于判断 <strong>两个变量 引用对象是否为同一个</strong><br><code>==</code> 用于判断 <strong>引用变量的值</strong> 是否相等</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b <span class="keyword">is</span> a </span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b == a</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python面对对象学习</category>
      </categories>
      <tags>
        <tag>python学习</tag>
      </tags>
  </entry>
  <entry>
    <title>02_类和对象基本概念</title>
    <url>/2022/03/18/python%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E5%AD%A6%E4%B9%A0/02_%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h1 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>类和对象的概念</li>
<li>类和对象的关系</li>
<li>类的设计</li>
</ul>
<h2 id="01-类和对象的概念"><a href="#01-类和对象的概念" class="headerlink" title="01. 类和对象的概念"></a>01. 类和对象的概念</h2><p><strong>类</strong> 和 <strong>对象</strong> 是 <strong>面向对象编程的 两个 核心概念</strong></p>
<h3 id="1-1-类"><a href="#1-1-类" class="headerlink" title="1.1 类"></a>1.1 类</h3><ul>
<li><p>类是对一群具有相同 特征或者行为的事物的一个统称，是抽象的不能直接使用</p>
<ul>
<li><strong>特征</strong> 被称为 <strong>属性</strong></li>
<li><strong>行为</strong> 被称为 <strong>方法</strong></li>
</ul>
</li>
<li><p><strong>类</strong> 就相当于制造飞机时的<strong>图纸</strong>，是一个 <strong>模板</strong>，是 <strong>负责创建对象的</strong></p>
</li>
</ul>
<p><img src="https://s2.loli.net/2022/03/16/rkGoAUPZy5Nnla3.png" alt="002_飞机设计图纸"></p>
<h3 id="1-2-对象"><a href="#1-2-对象" class="headerlink" title="1.2 对象"></a>1.2 对象</h3><ul>
<li><p><strong>对象</strong> 是 <strong>由类创建出来的一个具体存在</strong>，可以直接使用</p>
</li>
<li><p>由哪一个类创建出来的对象，就拥有在哪一个类中定义的：</p>
<ul>
<li>属性</li>
<li>方法</li>
</ul>
</li>
<li><p><strong>对象</strong> 就相当于用 <strong>图纸</strong> <strong>制造</strong> 的飞机</p>
</li>
</ul>
<blockquote>
<p>在程序开发中，应该 <strong>先有类，再有对象</strong></p>
</blockquote>
<p><img src="https://s2.loli.net/2022/03/16/5CZYScf4MD6dyiJ.png" alt="003_飞机对象"></p>
<h2 id="02-类和对象的关系"><a href="#02-类和对象的关系" class="headerlink" title="02. 类和对象的关系"></a>02. 类和对象的关系</h2><ul>
<li><p><strong>类是模板</strong>，<strong>对象</strong> 是根据 <strong>类</strong> 这个模板创建出来的，应该 <strong>先有类，再有对象</strong></p>
</li>
<li><p>类只有一个，而对象可以有很多个</p>
<ul>
<li><strong>不同的对象</strong> 之间 <strong>属性</strong> 可能会各不相同</li>
</ul>
</li>
<li><p><strong>类</strong> 中定义了什么 <strong>属性和方法</strong>，<strong>对象</strong> 中就有什么属性和方法，<strong>不可能多，也不可能少</strong></p>
</li>
</ul>
<h2 id="03-类的设计"><a href="#03-类的设计" class="headerlink" title="03. 类的设计"></a>03. 类的设计</h2><p>在使用面相对象开发前，应该首先分析需求，确定一下，程序中需要包含哪些类！</p>
<p><img src="https://s2.loli.net/2022/03/16/24Ktq5Q3o1rOLFP.png" alt="001_植物大战僵尸类图"></p>
<p>在程序开发中，要设计一个类，通常需要满足一下三个要素：</p>
<ol>
<li><strong>类名</strong> 这类事物的名字，<strong>满足大驼峰命名法</strong></li>
<li><strong>属性</strong> 这类事物具有什么样的特征</li>
<li><strong>方法</strong> 这类事物具有什么样的行为</li>
</ol>
<h3 id="大驼峰命名法"><a href="#大驼峰命名法" class="headerlink" title="大驼峰命名法"></a>大驼峰命名法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CapWords</span><br></pre></td></tr></table></figure>

<ol>
<li>每一个单词的首字母大写</li>
<li>单词与单词之间没有下划线</li>
</ol>
<h3 id="3-1-类名的确定"><a href="#3-1-类名的确定" class="headerlink" title="3.1 类名的确定"></a>3.1 类名的确定</h3><p><strong>名词提炼法</strong> 分析 <strong>整个业务流程</strong>，出现的 <strong>名词</strong>，通常就是找到的类</p>
<h3 id="3-2-属性和方法的确定"><a href="#3-2-属性和方法的确定" class="headerlink" title="3.2 属性和方法的确定"></a>3.2 属性和方法的确定</h3><ul>
<li>对 <strong>对象的特征描述</strong>，通常可以定义成 <strong>属性</strong></li>
<li><strong>对象具有的行为</strong>（动词），通常可以定义成 <strong>方法</strong></li>
</ul>
<blockquote>
<p>提示：需求中没有涉及的属性或者方法在设计类时，不需要考虑</p>
</blockquote>
<h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习 1"></a>练习 1</h3><p><strong>需求</strong></p>
<ul>
<li><strong>小明</strong> 今年 <strong>18 岁</strong>，<strong>身高 1.75</strong>，每天早上 <strong>跑</strong> 完步，会去 <strong>吃</strong> 东西</li>
<li><strong>小美</strong> 今年 <strong>17 岁</strong>，<strong>身高 1.65</strong>，小美不跑步，小美喜欢 <strong>吃</strong> 东西</li>
</ul>
<p><img src="https://s2.loli.net/2022/03/16/2PD6wjgXvybfNMz.png" alt="002_Person类"></p>
<h3 id="练习-2"><a href="#练习-2" class="headerlink" title="练习 2"></a>练习 2</h3><p><strong>需求</strong></p>
<ul>
<li>一只 <strong>黄颜色</strong> 的 <strong>狗狗</strong> 叫 <strong>大黄</strong></li>
<li>看见生人 <strong>汪汪叫</strong></li>
<li>看见家人 <strong>摇尾巴</strong></li>
</ul>
<p><img src="https://s2.loli.net/2022/03/16/arkt9XpSVGIdKLc.png" alt="003_Dog类"></p>
]]></content>
      <categories>
        <category>python面对对象学习</category>
      </categories>
      <tags>
        <tag>python学习</tag>
      </tags>
  </entry>
  <entry>
    <title>04_封装案例I</title>
    <url>/2022/03/20/python%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E5%AD%A6%E4%B9%A0/04_%E5%B0%81%E8%A3%85%E6%A1%88%E4%BE%8BI/</url>
    <content><![CDATA[<h1 id="面向对象封装案例"><a href="#面向对象封装案例" class="headerlink" title="面向对象封装案例"></a>面向对象封装案例</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>封装</li>
<li>小明爱跑步</li>
<li>存放家具</li>
</ul>
<h3 id="01-封装"><a href="#01-封装" class="headerlink" title="01. 封装"></a>01. 封装</h3><ol>
<li><strong>封装</strong> 是面向对象编程的一大特点</li>
<li>面向对象编程的 <strong>第一步</strong> —— 将 <strong>属性</strong> 和 <strong>方法</strong> <strong>封装</strong> 到一个抽象的 <strong>类</strong> 中</li>
<li><strong>外界</strong> 使用 <strong>类</strong> 创建 <strong>对象</strong>，然后 <strong>让对象调用方法</strong></li>
<li><strong>对象方法的细节</strong> 都被 <strong>封装</strong> 在 <strong>类的内部</strong></li>
</ol>
<h2 id="02-小明爱跑步"><a href="#02-小明爱跑步" class="headerlink" title="02. 小明爱跑步"></a>02. 小明爱跑步</h2><p><strong>需求</strong></p>
<ol>
<li><strong>小明</strong> <strong>体重</strong> <code>75.0</code> 公斤</li>
<li>小明每次 <strong>跑步</strong> 会减肥 <code>0.5</code> 公斤</li>
<li>小明每次 <strong>吃东西</strong> 体重增加 <code>1</code> 公斤</li>
</ol>
<p><img src="https://s2.loli.net/2022/03/20/BsuykA3KWrg6c8H.png" alt="007_小明爱跑步"></p>
<blockquote>
<p>提示：在 <strong>对象的方法内部</strong>，是可以 <strong>直接访问对象的属性</strong> 的！</p>
</blockquote>
<ul>
<li>代码实现：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;人类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, weight</span>):</span><br><span class="line"></span><br><span class="line">        self.name = name</span><br><span class="line">        self.weight = weight</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我的名字叫 %s 体重 %.2f 公斤&quot;</span> % (self.name, self.weight)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;跑步&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 爱跑步，跑步锻炼身体&quot;</span> % self.name)</span><br><span class="line">        self.weight -= <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;吃东西&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 是吃货，吃完这顿再减肥&quot;</span> % self.name)</span><br><span class="line">        self.weight += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xiaoming = Person(<span class="string">&quot;小明&quot;</span>, <span class="number">75</span>)</span><br><span class="line"></span><br><span class="line">xiaoming.run()</span><br><span class="line">xiaoming.eat()</span><br><span class="line">xiaoming.eat()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(xiaoming)</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/03/20/ZA3GvCldV6nQDos.png" alt="image-20220320221837175"></p>
<p>Ps:</p>
<p>​	<img src="https://s2.loli.net/2022/03/20/xS3mBdGNFLbtMTs.png" alt="image-20220320222508907"></p>
<h3 id="2-1-小明爱跑步扩展-——-小美也爱跑步"><a href="#2-1-小明爱跑步扩展-——-小美也爱跑步" class="headerlink" title="2.1 小明爱跑步扩展 —— 小美也爱跑步"></a>2.1 小明爱跑步扩展 —— 小美也爱跑步</h3><p><strong>需求</strong></p>
<ol>
<li><strong>小明</strong> 和 <strong>小美</strong> 都爱跑步</li>
<li><strong>小明</strong> <strong>体重</strong> <code>75.0</code> 公斤</li>
<li><strong>小美</strong> <strong>体重</strong> <code>45.0</code> 公斤</li>
<li>每次 <strong>跑步</strong> 都会减少 <code>0.5</code> 公斤</li>
<li>每次 <strong>吃东西</strong> 都会增加 <code>1</code> 公斤</li>
</ol>
<p><img src="https://s2.loli.net/2022/03/20/BsuykA3KWrg6c8H.png" alt="007_小明爱跑步"></p>
<p><strong>提示</strong></p>
<ol>
<li><p>在 <strong>对象的方法内部</strong>，是可以 <strong>直接访问对象的属性</strong> 的</p>
<p><img src="https://s2.loli.net/2022/03/26/j7cmDGp52IXBE3K.png" alt="image-20220326003736464"></p>
</li>
<li><p><strong>同一个类</strong> 创建的 <strong>多个对象</strong> 之间，<strong>属性</strong> 互不干扰！</p>
</li>
</ol>
<h2 id="03-摆放家具"><a href="#03-摆放家具" class="headerlink" title="03. 摆放家具"></a><img src="https://s2.loli.net/2022/03/20/jDwXOEz4P1uVnfl.png" alt="001_植物大战僵尸">03. 摆放家具</h2><p><strong>需求</strong></p>
<ol>
<li>房子(House)有户型、总面积和家具名称列表<ul>
<li>新房子没有任何的家具</li>
</ul>
</li>
<li>家具(HouseItem)有名字和占地面积，其中<ul>
<li><strong>席梦思(bed)</strong> 占地 <code>4</code> 平米</li>
<li><strong>衣柜(chest)</strong> 占地 <code>2</code> 平米</li>
<li><strong>餐桌(table)</strong> 占地 <code>1.5</code> 平米</li>
</ul>
</li>
<li>将以上三件 <strong>家具</strong> <strong>添加</strong> 到 <strong>房子</strong> 中</li>
<li>打印房子时，要求输出：<strong>户型</strong>、<strong>总面积</strong>、<strong>剩余面积</strong>、<strong>家具名称列表</strong></li>
</ol>
<p><img src="https://s2.loli.net/2022/03/20/owMXR5QqkDWKvY8.png" alt="008_摆放家具"></p>
<p><strong>剩余面积</strong></p>
<ol>
<li>在创建房子对象时，定义一个 <strong>剩余面积的属性</strong>，<strong>初始值和总面积相等</strong></li>
<li>当调用 <code>add_item</code> 方法，向房间 <strong>添加家具</strong> 时，让 <strong>剩余面积</strong> -&#x3D; <strong>家具面积</strong></li>
</ol>
<p><strong>思考</strong>：应该先开发哪一个类？</p>
<p><strong>答案</strong> —— <strong>家具类</strong></p>
<ol>
<li>家具简单</li>
<li>房子要使用到家具，<strong>被使用的类</strong>，通常应该先开发</li>
</ol>
<h3 id="3-1-创建家具"><a href="#3-1-创建家具" class="headerlink" title="3.1 创建家具"></a>3.1 创建家具</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HouseItem</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, area</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param name: 家具名称</span></span><br><span class="line"><span class="string">        :param area: 占地面积</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.area = area</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[%s] 占地面积 %.2f&quot;</span> % (self.name, self.area)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 创建家具</span></span><br><span class="line">bed = HouseItem(<span class="string">&quot;席梦思&quot;</span>, <span class="number">4</span>)</span><br><span class="line">chest = HouseItem(<span class="string">&quot;衣柜&quot;</span>, <span class="number">2</span>)</span><br><span class="line">table = HouseItem(<span class="string">&quot;餐桌&quot;</span>, <span class="number">1.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(bed)</span><br><span class="line"><span class="built_in">print</span>(chest)</span><br><span class="line"><span class="built_in">print</span>(table)</span><br></pre></td></tr></table></figure>

<p><strong>小结</strong></p>
<ol>
<li>创建了一个 <strong>家具类</strong>，使用到 <code>__init__</code> 和 <code>__str__</code> 两个内置方法</li>
<li>使用 <strong>家具类</strong> 创建了 <strong>三个家具对象</strong>，并且 <strong>输出家具信息</strong></li>
</ol>
<h3 id="3-2-创建房间"><a href="#3-2-创建房间" class="headerlink" title="3.2 创建房间"></a>3.2 创建房间</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">House</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, house_type, area</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param house_type: 户型</span></span><br><span class="line"><span class="string">        :param area: 总面积</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.house_type = house_type</span><br><span class="line">        self.area = area</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 剩余面积默认和总面积一致</span></span><br><span class="line">        self.free_area = area</span><br><span class="line">        <span class="comment"># 默认没有任何的家具</span></span><br><span class="line">        self.item_list = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Python 能够自动的将一对括号内部的代码连接在一起</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;户型：%s\n总面积：%.2f[剩余：%.2f]\n家具：%s&quot;</span></span><br><span class="line">                % (self.house_type, self.area,</span><br><span class="line">                   self.free_area, self.item_list))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_item</span>(<span class="params">self, item</span>):</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;要添加 %s&quot;</span> % item)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 创建房子对象</span></span><br><span class="line">my_home = House(<span class="string">&quot;两室一厅&quot;</span>, <span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">my_home.add_item(bed)</span><br><span class="line">my_home.add_item(chest)</span><br><span class="line">my_home.add_item(table)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(my_home)</span><br></pre></td></tr></table></figure>

<p><strong>小结</strong></p>
<ol>
<li>创建了一个 <strong>房子类</strong>，使用到 <code>__init__</code> 和 <code>__str__</code> 两个内置方法</li>
<li>准备了一个 <code>add_item</code> 方法 <strong>准备添加家具</strong></li>
<li>使用 <strong>房子类</strong> 创建了 <strong>一个房子对象</strong></li>
<li>让 <strong>房子对象</strong> 调用了三次 <code>add_item</code> 方法，将 <strong>三件家具</strong> 以实参传递到 <code>add_item</code> 内部</li>
</ol>
<h3 id="3-3-添加家具"><a href="#3-3-添加家具" class="headerlink" title="3.3 添加家具"></a>3.3 添加家具</h3><p><strong>需求</strong></p>
<ul>
<li>1&gt; <strong>判断</strong> <strong>家具的面积</strong> 是否 <strong>超过剩余面积</strong>，<strong>如果超过</strong>，提示不能添加这件家具</li>
<li>2&gt; 将 <strong>家具的名称</strong> 追加到 <strong>家具名称列表</strong> 中</li>
<li>3&gt; 用 <strong>房子的剩余面积</strong> - <strong>家具面积</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_item</span>(<span class="params">self, item</span>):</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;要添加 %s&quot;</span> % item)</span><br><span class="line">    <span class="comment"># 1. 判断家具面积是否大于剩余面积</span></span><br><span class="line">    <span class="keyword">if</span> item.area &gt; self.free_area:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 的面积太大，不能添加到房子中&quot;</span> % item.name)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 将家具的名称追加到名称列表中</span></span><br><span class="line">    self.item_list.append(item.name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 计算剩余面积</span></span><br><span class="line">    self.free_area -= item.area</span><br></pre></td></tr></table></figure>

<h3 id="3-4-小结"><a href="#3-4-小结" class="headerlink" title="3.4 小结"></a>3.4 小结</h3><ul>
<li>主程序只负责创建 <strong>房子</strong> 对象和 <strong>家具</strong> 对象</li>
<li>让 <strong>房子</strong> 对象调用 <code>add_item</code> 方法 <strong>将家具添加到房子</strong>中</li>
<li><strong>面积计算</strong>、<strong>剩余面积</strong>、<strong>家具列表</strong> 等处理都被 <strong>封装</strong> 到 <strong>房子类的内部</strong></li>
</ul>
]]></content>
      <categories>
        <category>python面对对象学习</category>
      </categories>
      <tags>
        <tag>python学习</tag>
      </tags>
  </entry>
  <entry>
    <title>06_私有属性和私有方法</title>
    <url>/2022/03/22/python%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E5%AD%A6%E4%B9%A0/06_%E7%A7%81%E6%9C%89%E5%B1%9E%E6%80%A7%E5%92%8C%E7%A7%81%E6%9C%89%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="私有属性和私有方法"><a href="#私有属性和私有方法" class="headerlink" title="私有属性和私有方法"></a>私有属性和私有方法</h1><h2 id="01-应用场景及定义方式"><a href="#01-应用场景及定义方式" class="headerlink" title="01. 应用场景及定义方式"></a>01. 应用场景及定义方式</h2><p><strong>应用场景</strong></p>
<ul>
<li>在实际开发中，<strong>对象</strong> 的 <strong>某些属性或方法</strong> 可能只希望 <strong>在对象的内部被使用</strong>，而 <strong>不希望在外部被访问到</strong></li>
<li><strong>私有属性</strong> 就是 <strong>对象</strong> 不希望公开的 <strong>属性</strong></li>
<li><strong>私有方法</strong> 就是 <strong>对象</strong> 不希望公开的 <strong>方法</strong></li>
</ul>
<p><strong>定义方式</strong></p>
<ul>
<li>在 <strong>定义属性或方法时</strong>，在 <strong>属性名或者方法名前</strong> 增加 <strong>两个下划线</strong>，定义的就是 <strong>私有</strong> 属性或方法</li>
</ul>
<p><img src="https://s2.loli.net/2022/03/20/T3qbDCGIydin6KM.png" alt="010_私有属性和方法"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Women</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line"></span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="comment"># 不要问女生的年龄</span></span><br><span class="line">        self.__age = <span class="number">18</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__secret</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我的年龄是 %d&quot;</span> % self.__age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xiaofang = Women(<span class="string">&quot;小芳&quot;</span>)</span><br><span class="line"><span class="comment"># 私有属性，外部不能直接访问</span></span><br><span class="line"><span class="comment"># print(xiaofang.__age)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 私有方法，外部不能直接调用</span></span><br><span class="line"><span class="comment"># xiaofang.__secret()</span></span><br></pre></td></tr></table></figure>

<h2 id="02-伪私有属性和私有方法（科普）"><a href="#02-伪私有属性和私有方法（科普）" class="headerlink" title="02. 伪私有属性和私有方法（科普）"></a>02. 伪私有属性和私有方法（科普）</h2><blockquote>
<p>提示：在日常开发中，<strong>不要使用这种方式</strong>，<strong>访问对象的 私有属性 或 私有方法</strong></p>
</blockquote>
<p><code>Python</code> 中，并没有 <strong>真正意义</strong> 的 <strong>私有</strong></p>
<ul>
<li>在给 <strong>属性</strong>、<strong>方法</strong> 命名时，实际是对 <strong>名称</strong> 做了一些特殊处理，使得外界无法访问到</li>
<li><strong>处理方式</strong>：在 <strong>名称</strong> 前面加上 <code>_类名</code> &#x3D;&gt; <code>_类名__名称</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 私有属性，外部不能直接访问到</span></span><br><span class="line"><span class="built_in">print</span>(xiaofang._Women__age)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 私有方法，外部不能直接调用</span></span><br><span class="line">xiaofang._Women__secret()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python面对对象学习</category>
      </categories>
      <tags>
        <tag>python学习</tag>
      </tags>
  </entry>
  <entry>
    <title>07_继承</title>
    <url>/2022/03/23/python%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E5%AD%A6%E4%B9%A0/07_%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>单继承</li>
<li>多继承</li>
</ul>
<p><strong>面向对象三大特性</strong></p>
<ol>
<li><strong>封装</strong> 根据 <strong>职责</strong> 将 <strong>属性</strong> 和 <strong>方法</strong> <strong>封装</strong> 到一个抽象的 <strong>类</strong> 中</li>
<li><strong>继承</strong> <strong>实现代码的重用</strong>，相同的代码不需要重复的编写</li>
<li><strong>多态</strong> 不同的对象调用相同的方法，产生不同的执行结果，<strong>增加代码的灵活度</strong></li>
</ol>
<h2 id="01-单继承"><a href="#01-单继承" class="headerlink" title="01. 单继承"></a>01. 单继承</h2><h3 id="1-1-继承的概念、语法和特点"><a href="#1-1-继承的概念、语法和特点" class="headerlink" title="1.1 继承的概念、语法和特点"></a>1.1 继承的概念、语法和特点</h3><p><strong>继承的概念</strong>：<strong>子类</strong> 拥有 <strong>父类</strong> 的所有 <strong>方法</strong> 和 <strong>属性</strong></p>
<p><img src="https://s2.loli.net/2022/03/20/w29N81CdsuxOPqI.png" alt="011_继承对比图示"></p>
<h4 id="1-继承的语法"><a href="#1-继承的语法" class="headerlink" title="1) 继承的语法"></a>1) 继承的语法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>(<span class="title class_ inherited__">父类名</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>子类</strong> 继承自 <strong>父类</strong>，可以直接 <strong>享受</strong> 父类中已经封装好的方法，不需要再次开发</li>
<li><strong>子类</strong> 中应该根据 <strong>职责</strong>，封装 <strong>子类特有的</strong> <strong>属性和方法</strong></li>
</ul>
<h4 id="2-专业术语"><a href="#2-专业术语" class="headerlink" title="2) 专业术语"></a>2) 专业术语</h4><ul>
<li><code>Dog</code> 类是 <code>Animal</code> 类的<strong>子类</strong>，<code>Animal</code> 类是 <code>Dog</code> 类的<strong>父类</strong>，<code>Dog</code> 类从 <code>Animal</code> 类<strong>继承</strong></li>
<li><code>Dog</code> 类是 <code>Animal</code> 类的<strong>派生类</strong>，<code>Animal</code> 类是 <code>Dog</code> 类的<strong>基类</strong>，<code>Dog</code> 类从 <code>Animal</code> 类<strong>派生</strong></li>
</ul>
<h4 id="3-继承的传递性"><a href="#3-继承的传递性" class="headerlink" title="3) 继承的传递性"></a>3) 继承的传递性</h4><ul>
<li><code>C</code> 类从 <code>B</code> 类继承，<code>B</code> 类又从 <code>A</code> 类继承</li>
<li>那么 <code>C</code> 类就具有 <code>B</code> 类和 <code>A</code> 类的所有属性和方法</li>
</ul>
<p><strong>子类</strong> 拥有 <strong>父类</strong> 以及 <strong>父类的父类</strong> 中封装的所有 <strong>属性</strong> 和 <strong>方法</strong></p>
<p><strong>提问</strong></p>
<p><strong>哮天犬</strong> 能够调用 <code>Cat</code> 类中定义的 <code>catch</code> 方法吗？</p>
<p><strong>答案</strong></p>
<p><strong>不能</strong>，因为 <strong>哮天犬</strong> 和 <code>Cat</code> 之间没有 <strong>继承</strong> 关系</p>
<h3 id="1-2-方法的重写"><a href="#1-2-方法的重写" class="headerlink" title="1.2 方法的重写"></a>1.2 方法的重写</h3><ul>
<li><strong>子类</strong> 拥有 <strong>父类</strong> 的所有 <strong>方法</strong> 和 <strong>属性</strong></li>
<li><strong>子类</strong> 继承自 <strong>父类</strong>，可以直接 <strong>享受</strong> 父类中已经封装好的方法，不需要再次开发</li>
</ul>
<p><strong>应用场景</strong></p>
<ul>
<li>当 <strong>父类</strong> 的方法实现不能满足子类需求时，可以对方法进行 <strong>重写(override)</strong></li>
</ul>
<p><img src="https://s2.loli.net/2022/03/20/EOzN2ZxCDJa9lLB.png" alt="012_继承方法的重写"></p>
<p><strong>重写</strong> 父类方法有两种情况：</p>
<ol>
<li><strong>覆盖</strong> 父类的方法</li>
<li>对父类方法进行 <strong>扩展</strong></li>
</ol>
<h4 id="1-覆盖父类的方法"><a href="#1-覆盖父类的方法" class="headerlink" title="1) 覆盖父类的方法"></a>1) 覆盖父类的方法</h4><ul>
<li>如果在开发中，<strong>父类的方法实现</strong> 和 <strong>子类的方法实现</strong>，<strong>完全不同</strong></li>
<li>就可以使用 <strong>覆盖</strong> 的方式，<strong>在子类中</strong> <strong>重新编写</strong> 父类的方法实现</li>
</ul>
<blockquote>
<p>具体的实现方式，就相当于在 <strong>子类中</strong> 定义了一个 <strong>和父类同名的方法并且实现</strong></p>
</blockquote>
<p>重写之后，在运行时，<strong>只会调用</strong> 子类中重写的方法，而不再会调用 <strong>父类封装的方法</strong></p>
<h4 id="2-对父类方法进行-扩展"><a href="#2-对父类方法进行-扩展" class="headerlink" title="2) 对父类方法进行 扩展"></a>2) 对父类方法进行 <strong>扩展</strong></h4><ul>
<li>如果在开发中，子类的方法实现中包含父类的方法实现<ul>
<li><strong>父类原本封装的方法实现</strong> 是 <strong>子类方法的一部分</strong></li>
</ul>
</li>
<li>就可以使用扩展的方式<ol>
<li><strong>在子类中</strong> <strong>重写</strong> 父类的方法</li>
<li>在需要的位置使用 <code>super().父类方法</code> 来调用父类方法的执行</li>
<li>代码其他的位置针对子类的需求，编写 <strong>子类特有的代码实现</strong></li>
</ol>
</li>
</ul>
<h5 id="关于-super"><a href="#关于-super" class="headerlink" title="关于 super"></a>关于 <code>super</code></h5><ul>
<li>在 <code>Python</code> 中 <code>super</code> 是一个 <strong>特殊的类</strong></li>
<li><code>super()</code> 就是使用 <code>super</code> 类创建出来的对象</li>
<li><strong>最常</strong> 使用的场景就是在 <strong>重写父类方法时</strong>，调用 <strong>在父类中封装的方法实现</strong></li>
</ul>
<h5 id="调用父类方法的另外一种方式（知道）"><a href="#调用父类方法的另外一种方式（知道）" class="headerlink" title="调用父类方法的另外一种方式（知道）"></a>调用父类方法的另外一种方式（知道）</h5><blockquote>
<p>在 <code>Python 2.x</code> 时，如果需要调用父类的方法，还可以使用以下方式：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">父类名.方法(self)</span><br></pre></td></tr></table></figure>

<ul>
<li>这种方式，目前在 <code>Python 3.x</code> 还支持这种方式</li>
<li>这种方法 <strong>不推荐使用</strong>，因为一旦 <strong>父类发生变化</strong>，方法调用位置的 <strong>类名</strong> 同样需要修改</li>
</ul>
<p><strong>提示</strong></p>
<ul>
<li>在开发时，<code>父类名</code> 和 <code>super()</code> 两种方式不要混用</li>
<li>如果使用 <strong>当前子类名</strong> 调用方法，会形成递归调用，<strong>出现死循环</strong></li>
</ul>
<h3 id="1-3-父类的-私有属性-和-私有方法"><a href="#1-3-父类的-私有属性-和-私有方法" class="headerlink" title="1.3 父类的 私有属性 和 私有方法"></a>1.3 父类的 私有属性 和 私有方法</h3><ol>
<li><strong>子类对象</strong> <strong>不能</strong> 在自己的方法内部，<strong>直接</strong> 访问 父类的 <strong>私有属性</strong> 或 <strong>私有方法</strong></li>
<li><strong>子类对象</strong> 可以通过 <strong>父类</strong> 的 <strong>公有方法</strong> <strong>间接</strong> 访问到 <strong>私有属性</strong> 或 <strong>私有方法</strong></li>
</ol>
<blockquote>
<ul>
<li><strong>私有属性、方法</strong> 是对象的隐私，不对外公开，<strong>外界</strong> 以及 <strong>子类</strong> 都不能直接访问</li>
<li><strong>私有属性、方法</strong> 通常用于做一些内部的事情</li>
</ul>
</blockquote>
<p><strong>示例</strong></p>
<p><img src="https://s2.loli.net/2022/03/20/j2Hx9N7g6SEek8q.png" alt="013_父类的私有属性和私有方法"></p>
<ul>
<li><code>B</code> 的对象不能直接访问 <code>__num2</code> 属性</li>
<li><code>B</code> 的对象不能在 <code>demo</code> 方法内访问 <code>__num2</code> 属性</li>
<li><code>B</code> 的对象可以在 <code>demo</code> 方法内，调用父类的 <code>test</code> 方法</li>
<li>父类的 <code>test</code> 方法内部，能够访问 <code>__num2</code> 属性和 <code>__test</code> 方法</li>
<li><code>B</code>的对象不可以   以直接直接调用父类<code>text</code>方法，进而直接访问</li>
</ul>
<h2 id="02-多继承"><a href="#02-多继承" class="headerlink" title="02. 多继承"></a>02. 多继承</h2><p><strong>概念</strong></p>
<ul>
<li><strong>子类</strong> 可以拥有 <strong>多个父类</strong>，并且具有 <strong>所有父类</strong> 的 <strong>属性</strong> 和 <strong>方法</strong></li>
<li>例如：<strong>孩子</strong> 会继承自己 <strong>父亲</strong> 和 <strong>母亲</strong> 的 <strong>特性</strong></li>
</ul>
<p><img src="https://s2.loli.net/2022/03/20/xzuibnWfoL6IUkj.png" alt="014_多继承"><strong>语法</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">子类名</span>(父类名<span class="number">1</span>, 父类名<span class="number">2.</span>..)</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h3 id="2-1-多继承的使用注意事项"><a href="#2-1-多继承的使用注意事项" class="headerlink" title="2.1 多继承的使用注意事项"></a>2.1 多继承的使用注意事项</h3><p><strong>问题的提出</strong></p>
<ul>
<li>如果 <strong>不同的父类</strong> 中存在 <strong>同名的方法</strong>，<strong>子类对象</strong> 在调用方法时，会调用 <strong>哪一个父类中</strong>的方法呢？</li>
</ul>
<blockquote>
<p>提示：<strong>开发时，应该尽量避免这种容易产生混淆的情况！</strong> —— 如果 <strong>父类之间</strong> 存在 <strong>同名的属性或者方法</strong>，应该 <strong>尽量避免</strong> 使用多继承</p>
</blockquote>
<p><img src="https://s2.loli.net/2022/03/20/MkCwRrghGNtfASL.png" alt="015_多继承II"></p>
<h4 id="Python-中的-MRO-——-方法搜索顺序（知道）"><a href="#Python-中的-MRO-——-方法搜索顺序（知道）" class="headerlink" title="Python 中的 MRO —— 方法搜索顺序（知道）"></a>Python 中的 MRO —— 方法搜索顺序（知道）</h4><ul>
<li><code>Python</code> 中针对 <strong>类</strong> 提供了一个 <strong>内置属性</strong> <code>__mro__</code> 可以查看 <strong>方法</strong> 搜索顺序</li>
<li>MRO 是 <code>method resolution order</code>，主要用于 <strong>在多继承时判断 方法、属性 的调用 路径</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(C.__mro__)</span><br></pre></td></tr></table></figure>

<p><strong>输出结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(&lt;class &#x27;__main__.C&#x27;&gt;, &lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;)</span><br></pre></td></tr></table></figure>

<ul>
<li>在搜索方法时，是按照 <code>__mro__</code> 的输出结果 <strong>从左至右</strong> 的顺序查找的</li>
<li>如果在当前类中 <strong>找到方法，就直接执行，不再搜索</strong></li>
<li>如果 <strong>没有找到，就查找下一个类</strong> 中是否有对应的方法，<strong>如果找到，就直接执行，不再搜索</strong></li>
<li>如果找到最后一个类，还没有找到方法，程序报错</li>
</ul>
<h3 id="2-2-新式类与旧式（经典）类"><a href="#2-2-新式类与旧式（经典）类" class="headerlink" title="2.2 新式类与旧式（经典）类"></a>2.2 新式类与旧式（经典）类</h3><blockquote>
<p><code>object</code> 是 <code>Python</code> 为所有对象提供的 <strong>基类</strong>，提供有一些内置的属性和方法，可以使用 <code>dir</code> 函数查看</p>
</blockquote>
<ul>
<li><strong>新式类</strong>：以 <code>object</code> 为基类的类，<strong>推荐使用</strong></li>
<li><strong>经典类</strong>：不以 <code>object</code> 为基类的类，<strong>不推荐使用</strong></li>
<li>在 <code>Python 3.x</code> 中定义类时，如果没有指定父类，会 <strong>默认使用</strong> <code>object</code> 作为该类的 <strong>基类</strong> —— <code>Python 3.x</code> 中定义的类都是 <strong>新式类</strong></li>
<li>在 <code>Python 2.x</code> 中定义类时，如果没有指定父类，则不会以 </li>
<li><code>object</code> 作为 <strong>基类</strong></li>
</ul>
<blockquote>
<p><strong>新式类</strong> 和 <strong>经典类</strong> 在多继承时 —— <strong>会影响到方法的搜索顺序</strong></p>
</blockquote>
<p>为了保证编写的代码能够同时在 <code>Python 2.x</code> 和 <code>Python 3.x</code> 运行！<br>今后在定义类时，<strong>如果没有父类，建议统一继承自 <code>object</code></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python面对对象学习</category>
      </categories>
      <tags>
        <tag>python学习</tag>
      </tags>
  </entry>
  <entry>
    <title>08_多态</title>
    <url>/2022/03/24/python%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E5%AD%A6%E4%B9%A0/08_%E5%A4%9A%E6%80%81/</url>
    <content><![CDATA[<h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>多态</li>
</ul>
<p><strong>面向对象三大特性</strong></p>
<ol>
<li><p>封装根据职责将属性和方法封装到一个抽象的类中</p>
<ul>
<li>定义类的准则</li>
</ul>
</li>
<li><p>继承实现代码的重用，相同的代码不需要重复的编写</p>
<ul>
<li>设计类的技巧</li>
<li>子类针对自己特有的需求，编写特定的代码</li>
</ul>
</li>
<li><p><strong>多态</strong> 不同的 <strong>子类对象</strong> 调用相同的 <strong>父类方法</strong>，产生不同的执行结果</p>
<ul>
<li><strong>多态</strong> 可以 <strong>增加代码的灵活度</strong></li>
<li>以 <strong>继承</strong> 和 <strong>重写父类方法</strong> 为前提</li>
<li>是调用方法的技巧，<strong>不会影响到类的内部设计</strong></li>
</ul>
<p><img src="https://s2.loli.net/2022/03/20/zU649oeYJCwFAuM.png" alt="016_多态示意图"></p>
</li>
</ol>
<h2 id="多态案例演练"><a href="#多态案例演练" class="headerlink" title="多态案例演练"></a>多态案例演练</h2><p><strong>需求</strong></p>
<ol>
<li>在<strong>Dog</strong>类中封装方法<strong>game</strong><ul>
<li>普通狗只是简单的玩耍</li>
</ul>
</li>
<li>定义<strong>XiaoTianDog</strong>继承自<strong>Dog</strong>，并且重写<strong>game</strong>方法<ul>
<li>哮天犬需要在天上玩耍</li>
</ul>
</li>
<li>定义<strong>Person</strong>类，并且封装一个和狗玩的方法<ul>
<li>在方法内部，直接让 <strong>狗对象</strong> 调用 <code>game</code> 方法</li>
</ul>
</li>
</ol>
<p><img src="https://s2.loli.net/2022/03/20/FWyjwmn3OKDAN72.png" alt="016_多态"></p>
<p><strong>案例小结</strong></p>
<ul>
<li><strong>Person</strong>类中只需要让狗对象调用<strong>game</strong>方法，而不关心具体是什么狗<ul>
<li><code>game</code> 方法是在 <code>Dog</code> 父类中定义的</li>
</ul>
</li>
<li>在程序执行时，传入不同的 <strong>狗对象</strong> 实参，就会产生不同的执行效果</li>
</ul>
<blockquote>
<p><strong>多态</strong> 更容易编写出出通用的代码，做出通用的编程，以适应需求的不断变化！</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">game</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 蹦蹦跳跳的玩耍...&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">XiaoTianDog</span>(<span class="title class_ inherited__">Dog</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">game</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 飞到天上去玩耍...&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">game_with_dog</span>(<span class="params">self, dog</span>):</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 和 %s 快乐的玩耍...&quot;</span> % (self.name, dog.name))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 让狗玩耍</span></span><br><span class="line">        dog.game()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 创建一个狗对象</span></span><br><span class="line"><span class="comment"># wangcai = Dog(&quot;旺财&quot;)</span></span><br><span class="line">wangcai = XiaoTianDog(<span class="string">&quot;飞天旺财&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 创建一个小明对象</span></span><br><span class="line">xiaoming = Person(<span class="string">&quot;小明&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 让小明调用和狗玩的方法</span></span><br><span class="line">xiaoming.game_with_dog(wangcai)</span><br><span class="line">        </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python面对对象学习</category>
      </categories>
      <tags>
        <tag>python学习</tag>
      </tags>
  </entry>
  <entry>
    <title>09_类属性和类方法</title>
    <url>/2022/03/25/python%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E5%AD%A6%E4%B9%A0/09_%E7%B1%BB%E5%B1%9E%E6%80%A7%E5%92%8C%E7%B1%BB%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="类属性和类方法"><a href="#类属性和类方法" class="headerlink" title="类属性和类方法"></a>类属性和类方法</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>类的结构</li>
<li>类属性和实例属性</li>
<li>类方法和静态方法</li>
</ul>
<h2 id="01-类的结构"><a href="#01-类的结构" class="headerlink" title="01. 类的结构"></a>01. 类的结构</h2><h3 id="1-1-术语-——-实例"><a href="#1-1-术语-——-实例" class="headerlink" title="1.1 术语 —— 实例"></a>1.1 术语 —— 实例</h3><ol>
<li>使用面相对象开发，<strong>第 1 步</strong> 是设计 <strong>类</strong></li>
<li>使用类名()创建对象，创建对象的动作有两步：<ul>
<li>\1) 在内存中为对象 <strong>分配空间</strong></li>
<li>\2) 调用初始化方法 <code>__init__</code> 为 <strong>对象初始化</strong></li>
</ul>
</li>
<li>对象创建后，<strong>内存</strong> 中就有了一个对象的 <strong>实实在在</strong> 的存在 —— <strong>实例</strong></li>
</ol>
<p><img src="https://s2.loli.net/2022/03/20/olTW9A28ad1LJPR.png" alt="017_类的结构示意图I"></p>
<p>因此，通常也会把：</p>
<ol>
<li>创建出来的 <strong>对象</strong> 叫做 <strong>类</strong> 的 <strong>实例</strong></li>
<li>创建对象的 <strong>动作</strong> 叫做 <strong>实例化</strong></li>
<li><strong>对象的属性</strong> 叫做 <strong>实例属性</strong></li>
<li><strong>对象调用的方法</strong> 叫做 <strong>实例方法</strong></li>
</ol>
<p>在程序执行时：</p>
<ol>
<li><p>对象各自拥有自己的 <strong>实例属性</strong></p>
</li>
<li><p>调用对象方法，可以通过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">self.</span><br></pre></td></tr></table></figure>

<ul>
<li>访问自己的属性</li>
<li>调用自己的方法</li>
</ul>
</li>
</ol>
<p><strong>结论</strong></p>
<ul>
<li><p><strong>每一个对象</strong> 都有自己 <strong>独立的内存空间</strong>，<strong>保存各自不同的属性</strong></p>
<ul>
<li><strong><code>对象的实例方法</code></strong>	 保存在 <strong><code>类所在的内存空间</code></strong></li>
</ul>
</li>
<li><p><strong>多个对象的方法</strong>，<strong>在内存中只有一份</strong>，在调用方法时，<strong>需要把对象的引用</strong> 传递到方法内部</p>
</li>
</ul>
<h3 id="1-2-类是一个特殊的对象"><a href="#1-2-类是一个特殊的对象" class="headerlink" title="1.2 类是一个特殊的对象"></a>1.2 类是一个特殊的对象</h3><blockquote>
<p><code>Python</code> 中 <strong>一切皆对象</strong>：</p>
<ul>
<li><code>class AAA:</code> 定义的类属于 <strong>类对象</strong></li>
<li><code>obj1 = AAA()</code> 属于 <strong>实例对象</strong></li>
</ul>
</blockquote>
<ul>
<li>在程序运行时，<strong>类</strong> 同样 <strong>会被加载到内存</strong></li>
<li>在 <code>Python</code> 中，<strong>类</strong> 是一个特殊的对象 —— <strong>类对象</strong></li>
<li>在程序运行时，<strong>类对象</strong> 在内存中 <strong>只有一份</strong>，使用 <strong>一个类</strong> 可以创建出 <strong>很多个对象实例</strong></li>
<li>除了封装实例的属性和方法外，类对象还可以拥有自己的属性和方法<ol>
<li><strong>类属性</strong></li>
<li><strong>类方法</strong></li>
</ol>
</li>
<li>通过 <strong>类名.</strong> 的方式可以 <strong>访问类的属性</strong> 或者 <strong>调用类的方法</strong></li>
</ul>
<p><img src="https://s2.loli.net/2022/03/20/DscwYZ3gAihWQv1.png" alt="017_类的结构示意图II"></p>
<p><img src="https://s2.loli.net/2022/03/25/Doy49KfrBbhadG3.png" alt="image-20220325174231471"></p>
<h2 id="02-类属性和实例属性"><a href="#02-类属性和实例属性" class="headerlink" title="02. 类属性和实例属性"></a>02. 类属性和实例属性</h2><h3 id="2-1-概念和使用"><a href="#2-1-概念和使用" class="headerlink" title="2.1 概念和使用"></a>2.1 概念和使用</h3><ul>
<li><p><strong>类属性</strong> 就是给 <strong>类对象</strong> 中定义的 <strong>属性</strong></p>
</li>
<li><p>通常用来记录 <strong>与这个类相关</strong> 的特征</p>
</li>
<li><p><strong>类属性</strong> <strong>不会用于</strong>记录 <strong>具体对象的特征</strong></p>
<p><img src="https://s2.loli.net/2022/03/25/tRL14xP95sKBYD3.png" alt="image-20220325175741437"></p>
</li>
</ul>
<p><strong>示例需求</strong></p>
<ul>
<li>定义一个 <strong>工具类</strong></li>
<li>每件工具都有自己的 <code>name</code></li>
<li><strong>需求</strong> —— 知道使用这个类，创建了多少个工具对象？</li>
</ul>
<p><img src="https://s2.loli.net/2022/03/20/eLpRGjtZnloaYE2.png" alt="018_类属性案例I"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Tool</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用赋值语句，定义类属性，记录创建工具对象的总数</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 针对类属性做一个计数+1</span></span><br><span class="line">        Tool.count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建工具对象</span></span><br><span class="line">tool1 = Tool(<span class="string">&quot;斧头&quot;</span>)</span><br><span class="line">tool2 = Tool(<span class="string">&quot;榔头&quot;</span>)</span><br><span class="line">tool3 = Tool(<span class="string">&quot;铁锹&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 知道使用 Tool 类到底创建了多少个对象?</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;现在创建了 %d 个工具&quot;</span> % Tool.count)</span><br></pre></td></tr></table></figure>

<h3 id="2-2-属性的获取机制（科普）"><a href="#2-2-属性的获取机制（科普）" class="headerlink" title="2.2 属性的获取机制（科普）"></a>2.2 属性的获取机制（科普）</h3><ul>
<li>在 <code>Python</code> 中 <strong>属性的获取</strong> 存在一个 <strong>向上查找机制</strong></li>
</ul>
<p><img src="https://s2.loli.net/2022/03/20/We6joUHIJ5PmST8.png" alt="019_通过对象访问类属性"></p>
<ul>
<li>因此，要访问类属性有两种方式：<ol>
<li><p><strong>类名.类属性</strong></p>
</li>
<li><p><strong>对象.类属性</strong> （不推荐）</p>
<p><img src="https://s2.loli.net/2022/03/26/gUBRwyt1suLP9h4.png" alt="image-20220326004457404"></p>
</li>
</ol>
</li>
</ul>
<p><strong>注意</strong></p>
<ul>
<li><p>如果使用 <code>对象.类属性 = 值</code> 赋值语句，只会 <strong>给对象添加一个属性</strong>，而不会影响到 <strong>类属性的值</strong></p>
<p><img src="https://s2.loli.net/2022/03/26/7e3IAWQPUfH8ilV.png" alt="image-20220326004912886"></p>
</li>
</ul>
<h2 id="03-类方法和静态方法"><a href="#03-类方法和静态方法" class="headerlink" title="03. 类方法和静态方法"></a>03. 类方法和静态方法</h2><h3 id="3-1-类方法"><a href="#3-1-类方法" class="headerlink" title="3.1 类方法"></a>3.1 类方法</h3><ul>
<li>类属性就是针对类对象定义的属性<ul>
<li>使用 <strong>赋值语句</strong> 在 <code>class</code> 关键字下方可以定义 <strong>类属性</strong></li>
<li><strong>类属性</strong> 用于记录 <strong>与这个类相关</strong> 的特征</li>
</ul>
</li>
<li>类方法就是针对类对象定义的方法<ul>
<li>在 <strong>类方法</strong> 内部可以直接访问 <strong>类属性</strong> 或者调用其他的 <strong>类方法</strong></li>
</ul>
</li>
</ul>
<p><strong>语法如下</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">类方法名</span>(<span class="params">cls</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<ul>
<li>类方法需要用 <strong>修饰器</strong> <code>@classmethod</code> 来标识，<strong>告诉解释器这是一个类方法</strong></li>
<li>类方法的第一个参数应该是<strong>cls</strong><ul>
<li>由 <strong>哪一个类</strong> 调用的方法，方法内的 <code>cls</code> 就是 <strong>哪一个类的引用</strong></li>
<li>这个参数和 <strong>实例方法</strong> 的第一个参数是 <code>self</code> 类似</li>
<li><strong>提示</strong> 使用其他名称也可以，不过习惯使用 <code>cls</code></li>
</ul>
</li>
<li>通过 <strong>类名.</strong> 调用 <strong>类方法</strong>，<strong>调用方法时</strong>，不需要传递 <code>cls</code> 参数</li>
<li>在方法内部<ul>
<li>可以通过 <code>cls.</code> <strong>访问类的属性</strong></li>
<li>也可以通过 <code>cls.</code> <strong>调用其他的类方法</strong></li>
</ul>
</li>
</ul>
<p><strong>示例需求</strong></p>
<ul>
<li>定义一个 <strong>工具类</strong></li>
<li>每件工具都有自己的 <code>name</code></li>
<li><strong>需求</strong> —— 在 <strong>类</strong> 封装一个 <code>show_tool_count</code> 的类方法，输出使用当前这个类，创建的对象个数</li>
</ul>
<p><img src="https://s2.loli.net/2022/03/20/x6IeoibJTfacK8d.png" alt="020_类方法案例"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_tool_count</span>(<span class="params">cls</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示工具对象的总数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;工具对象的总数 %d&quot;</span> % cls.count)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在类方法内部，可以直接使用 <code>cls</code> 访问 <strong>类属性</strong> 或者 <strong>调用类方法</strong></p>
</blockquote>
<h3 id="3-2-静态方法"><a href="#3-2-静态方法" class="headerlink" title="3.2 静态方法"></a>3.2 静态方法</h3><ul>
<li>在开发时，如果需要在 <strong>类</strong> 中封装一个方法，这个方法：<ul>
<li>既 <strong>不需要</strong> 访问 <strong>实例属性</strong> 或者调用 <strong>实例方法</strong></li>
<li>也 <strong>不需要</strong> 访问 <strong>类属性</strong> 或者调用 <strong>类方法</strong></li>
</ul>
</li>
<li>这个时候，可以把这个方法封装成一个 <strong>静态方法</strong></li>
</ul>
<p><strong>语法如下</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">静态方法名</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>静态方法</strong> 需要用 <strong>修饰器</strong> <code>@staticmethod</code> 来标识，<strong>告诉解释器这是一个静态方法</strong></li>
<li>通过 <strong>类名.</strong> 调用 <strong>静态方法</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 狗对象计数</span></span><br><span class="line">    dog_count = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 不需要访问实例属性也不需要访问类属性的方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;狗在跑...&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        </span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 查看游戏的帮助信息</span></span><br><span class="line">Game.show_help()             <span class="comment"># 2）.（不需要依赖“对象”）不访问实例属性/类属性，则可以把方法定为一个 【静态方法】</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 查看历史最高分</span></span><br><span class="line">Game.show_top_score()        <span class="comment"># 1）.不需要依赖“对象” 就可以调用方法  【类方法】</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 创建游戏对象</span></span><br><span class="line">xiao = Game(<span class="string">&quot;小明&quot;</span>)</span><br><span class="line"></span><br><span class="line">xiao.start_game()            <span class="comment"># 3）.“依赖对象”的  【实例方法】</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3-方法综合案例"><a href="#3-3-方法综合案例" class="headerlink" title="3.3 方法综合案例"></a>3.3 方法综合案例</h3><p><strong>需求</strong></p>
<ol>
<li>设计一个 <code>Game</code> 类</li>
<li>属性：<ul>
<li>定义一个 <strong>类属性</strong> <code>top_score</code> 记录游戏的 <strong>历史最高分</strong></li>
<li>定义一个 <strong>实例属性</strong> <code>player_name</code> 记录 <strong>当前游戏的玩家姓名</strong></li>
</ul>
</li>
<li>方法：<ul>
<li><strong>静态方法</strong> <code>show_help</code> 显示游戏帮助信息</li>
<li><strong>类方法</strong> <code>show_top_score</code> 显示历史最高分</li>
<li><strong>实例方法</strong> <code>start_game</code> 开始当前玩家的游戏</li>
</ul>
</li>
<li>主程序步骤<ul>
<li>\1) 查看帮助信息</li>
<li>\2) 查看历史最高分</li>
<li>\3) 创建游戏对象，开始游戏</li>
</ul>
</li>
</ol>
<p><img src="https://s2.loli.net/2022/03/20/t1onSfr6R5aMx4j.png" alt="021_方法综合案例"></p>
<h4 id="案例小结"><a href="#案例小结" class="headerlink" title="案例小结"></a>案例小结</h4><ol>
<li><p>实例方法—— 方法内部需要访问实例属性</p>
<ul>
<li><strong>实例方法</strong> 内部可以使用 <strong>类名.</strong> 访问类属性</li>
</ul>
</li>
<li><p><strong>类方法</strong> —— 方法内部 <strong>只</strong> 需要访问 <strong>类属性</strong></p>
</li>
<li><p><strong>静态方法</strong> —— 方法内部，不需要访问 <strong>实例属性</strong> 和 <strong>类属性</strong></p>
</li>
</ol>
<p><strong>提问</strong></p>
<p>如果方法内部 即需要访问 <strong>实例属性</strong>，又需要访问 <strong>类属性</strong>，应该定义成什么方法？</p>
<p><strong>答案</strong></p>
<ul>
<li>应该定义 <strong>实例方法</strong></li>
<li>因为，<strong>类只有一个</strong>，在 <strong>实例方法</strong> 内部可以使用 <strong>类名.</strong> 访问类属性</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Game</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 游戏最高分，类属性</span></span><br><span class="line">    top_score = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_help</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;帮助信息：让僵尸走进房间&quot;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_top_score</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;游戏最高分是 %d&quot;</span> % cls.top_score)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, player_name</span>):</span><br><span class="line">        self.player_name = player_name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start_game</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[%s] 开始游戏...&quot;</span> % self.player_name)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 使用类名.修改历史最高分</span></span><br><span class="line">        Game.top_score = <span class="number">999</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 查看游戏帮助</span></span><br><span class="line">Game.show_help()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 查看游戏最高分</span></span><br><span class="line">Game.show_top_score()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 创建游戏对象，开始游戏</span></span><br><span class="line">game = Game(<span class="string">&quot;小明&quot;</span>)</span><br><span class="line"></span><br><span class="line">game.start_game()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 游戏结束，查看游戏最高分</span></span><br><span class="line">Game.show_top_score()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python面对对象学习</category>
      </categories>
      <tags>
        <tag>python学习</tag>
      </tags>
  </entry>
  <entry>
    <title>10_单例</title>
    <url>/2022/03/26/python%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E5%AD%A6%E4%B9%A0/10_%E5%8D%95%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>单例设计模式</li>
<li><code>__new__</code> 方法</li>
<li>Python 中的单例</li>
</ul>
<h2 id="01-单例设计模式"><a href="#01-单例设计模式" class="headerlink" title="01. 单例设计模式"></a>01. 单例设计模式</h2><ul>
<li><p>设计模式</p>
<ul>
<li><strong>设计模式</strong> 是 <strong>前人工作的总结和提炼</strong>，通常，被人们广泛流传的设计模式都是针对 <strong>某一特定问题</strong> 的成熟的解决方案</li>
<li>使用 <strong>设计模式</strong> 是为了可重用代码、让代码更容易被他人理解、保证代码可靠性</li>
</ul>
</li>
<li><p>单例设计模式</p>
<ul>
<li><p><strong>目的</strong> —— 让 <strong>类</strong> 创建的对象，aazx在系统中 <strong>只有</strong> <strong>唯一的一个实例</strong></p>
<p>​		  ——对象在内存空间分配空间的时候，永远只会返回<strong>一个、固定的、唯一的</strong>内存空间，保证内存中类的对象只有一份</p>
</li>
<li><p>每一次执行 <code>类名()</code> 返回的对象，<strong>内存地址是相同的</strong></p>
</li>
</ul>
</li>
</ul>
<h3 id="单例设计模式的应用场景"><a href="#单例设计模式的应用场景" class="headerlink" title="单例设计模式的应用场景"></a>单例设计模式的应用场景</h3><ul>
<li><strong>音乐播放</strong> 对象</li>
<li><strong>回收站</strong> 对象</li>
<li><strong>打印机</strong> 对象</li>
<li>……</li>
</ul>
<h2 id="02-new-方法"><a href="#02-new-方法" class="headerlink" title="02. __new__ 方法"></a>02. <a href="http://c.biancheng.net/view/5484.html"><code>__new__</code> 方法</a></h2><blockquote>
<p><strong>new</strong>() 是一种负责创建类实例的静态方法，它无需使用 staticmethod 装饰器修饰，且该方法会优先 <strong>init</strong>() 初始化方法被调用。</p>
<p>那么，什么情况下使用 <strong>new</strong>() 呢？答案很简单，在 <strong>init</strong>() 不够用的时候。</p>
<p>例如，前面例子中对 Python 不可变的内置类型（如 int、str、float 等）进行了子类化，这是因为一旦创建了这样不可变的对象实例，就无法在 <strong>init</strong>() 方法中对其进行修改。</p>
<p>有些读者可能会认为，<strong>new</strong>() 对执行重要的对象初始化很有用，如果用户忘记使用 super()，可能会漏掉这一初始化。虽然这听上去很合理，但有一个主要的缺点，即如果使用这样的方法，那么即便初始化过程已经是预期的行为，程序员明确跳过初始化步骤也会变得更加困难。不仅如此，它还破坏了“<strong>init</strong>() 中执行所有初始化工作”的潜规则。</p>
<p>注意，由于 <strong>new</strong>() 不限于返回同一个类的实例，所以很容易被滥用，不负责任地使用这种方法可能会对代码有害，所以要谨慎使用。一般来说，对于特定问题，最好搜索其他可用的解决方案，最好不要影响对象的创建过程，使其违背程序员的预期。比如说，前面提到的覆写不可变类型初始化的例子，完全可以用工厂方法（一种<a href="http://c.biancheng.net/design_pattern/">设计模式</a>）来替代。</p>
<blockquote>
<p>Python中大量使用 <strong>new</strong>() 方法且合理的，就是 MetaClass 元类。有关元类的介绍，可阅读《<a href="http://c.biancheng.net/view/2293.html">Python MetaClass元类</a>》一节。</p>
</blockquote>
</blockquote>
<ul>
<li>使用 <strong>类名()</strong> 创建对象时，<code>Python</code> 的解释器 <strong>首先</strong> 会 调用 <code>__new__</code> 方法为对象 <strong>分配空间</strong></li>
<li><code>__new__</code>是一个 由<strong>object</strong>基类提供的内置的静态方法，主要作用有两个：<ul>
<li>\1) 在内存中为对象 <strong>分配空间</strong></li>
<li>\2) <strong>返回</strong> 对象的引用<a href="">（python解释器拿到对象引用后会传递给初始化方法__init__的第一个参数）</a></li>
</ul>
</li>
<li><code>Python</code> 的解释器获得对象的 <strong>引用</strong> 后，将引用作为 <strong>第一个参数</strong>，传递给 <code>__init__</code> 方法</li>
</ul>
<blockquote>
<p>重写 <code>__new__</code> 方法 的代码非常固定！</p>
</blockquote>
<ul>
<li><p>重写 <code>__new__</code> 方法 <strong>一定要</strong> <code>return super().__new__(cls)</code></p>
</li>
<li><p>否则 Python 的解释器 <strong>得不到</strong> 分配了空间的 <strong>对象引用</strong>，<strong>就不会调用对象的初始化方法</strong></p>
</li>
<li><p>注意：<code>__new__</code> 是一个静态方法，在调用时需要 <strong>主动传递</strong> <code>cls</code> 参数</p>
<blockquote>
<h2 id="当在超方法中调用其父级的-new-时，为什么-new-方法需要传递cls参数？"><a href="#当在超方法中调用其父级的-new-时，为什么-new-方法需要传递cls参数？" class="headerlink" title="当在超方法中调用其父级的__new__时，为什么__new__方法需要传递cls参数？"></a>当在超方法中调用其父级的__new__时，为什么__new__方法需要传递cls参数？</h2><p>​	我知道当我们跨超级方法调用父方法时，可以忽略绑定方法中的“ self”参数，如下所示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Foo, self).__init__() <span class="comment"># We needn&#x27;t pass in the &quot;self&quot; argument</span></span><br><span class="line">        <span class="comment"># ...</span></span><br></pre></td></tr></table></figure>

<p>但是<code>__new__</code>方法有所不同：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bar</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>(Bar, cls).__new__(cls, *args, **kwargs) <span class="comment"># Why need a &quot;cls&quot; argument?</span></span><br></pre></td></tr></table></figure>

<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><hr>
<p><code>__new__</code>不是实例方法；它是传递给类对象的静态方法（也使其不是类方法）。</p>
<p>从<a href="http://docs.python.org/2/reference/datamodel.html#object.__new__"><code>__new__</code>文档中</a>：</p>
<blockquote>
<p><code>__new__()</code> 是一个静态方法（特殊情况，因此您无需这样声明），它将实例被请求的类作为其第一个参数。</p>
</blockquote>
<p>这样，即使用于在MRO中<code>super()</code>查找下一个<code>__new__</code>方法，您仍需要<code>cls</code>显式传递。</p>
<p>通常在<em>type</em>上查找带有双下划线的特殊方法，在类的元类上查找（<code>type()</code>默认情况下）。那是行不通的，<code>__new__</code>因为您直接在类本身上声明了它。作为这种无<a href="http://docs.python.org/2/howto/descriptor.html">描述符协议</a>可以应用于<em>任一</em>（这是通常打开的功能成绑定的方法，为类和实例方法）。因此，该<code>__new__</code>钩子必须是特殊情况的，并且永不束缚</p>
</blockquote>
</li>
</ul>
<p><img src="https://s2.loli.net/2022/03/20/YR95NICdTth4vDZ.png" alt="022_对象分配空间和初始化"></p>
<p><strong>示例代码</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MusicPlayer</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 如果不返回任何结果，</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().__new__(cls)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;初始化音乐播放对象&quot;</span>)</span><br><span class="line"></span><br><span class="line">player = MusicPlayer()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(player)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>new</strong>() 通常会返回该类的一个实例，但有时也可能会返回其他类的实例，如果发生了这种情况，则会跳过对 <strong>init</strong>() 方法的调用。而在某些情况下（比如需要修改不可变类实例（<a href="http://c.biancheng.net/python/">Python</a> 的某些内置类型）的创建行为），利用这一点会事半功倍。比如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">nonZero</span>(<span class="title class_ inherited__">int</span>):    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls,value</span>):        <span class="keyword">return</span> <span class="built_in">super</span>().__new__(cls,value) <span class="keyword">if</span> value != <span class="number">0</span> <span class="keyword">else</span> <span class="literal">None</span>    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,skipped_value</span>):        <span class="comment">#此例中会跳过此方法        print(&quot;__init__()&quot;)        super().__init__()print(type(nonZero(-12)))print(type(nonZero(0)))</span></span><br></pre></td></tr></table></figure>

<p>运行结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__init__()</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;__main__.nonZero&#x27;</span>&gt;</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;NoneType&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="03-Python-中的单例"><a href="#03-Python-中的单例" class="headerlink" title="03. Python 中的单例"></a>03. Python 中的单例</h2><ul>
<li>单例—— 让类创建对象，在系统中 只有唯一的一个实例<ol>
<li>定义一个 <strong>类属性</strong>，初始值是 <code>None</code>，用于记录 <strong>单例对象的引用</strong></li>
<li>重写 <code>__new__</code> 方法</li>
<li>如果 <strong>类属性</strong> <code>is None</code>，调用父类方法分配空间，并在类属性中记录结果</li>
<li>返回 <strong>类属性</strong> 中记录的 <strong>对象引用</strong></li>
</ol>
</li>
</ul>
<p><img src="https://s2.loli.net/2022/03/20/cM1ZtkUFdQWspmH.png" alt="023_单例流程"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MusicPlayer</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义类属性记录单例对象引用</span></span><br><span class="line">    instance = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. 判断类属性是否已经被赋值</span></span><br><span class="line">        <span class="keyword">if</span> cls.instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            cls.instance = <span class="built_in">super</span>().__new__(cls)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 返回类属性的单例引用</span></span><br><span class="line">        <span class="keyword">return</span> cls.instance</span><br></pre></td></tr></table></figure>

<h3 id="只执行一次初始化工作"><a href="#只执行一次初始化工作" class="headerlink" title="只执行一次初始化工作"></a>只执行一次初始化工作</h3><ul>
<li>在每次使用<strong>类名</strong>()创建对象时，Python的解释器都会自动调用两个方法：<ul>
<li><code>__new__</code> 分配空间</li>
<li><code>__init__</code> 对象初始化</li>
</ul>
</li>
<li>在上一小节对 <code>__new__</code> 方法改造之后，每次都会得到 <strong>第一次被创建对象的引用</strong></li>
<li>但是：<strong>初始化方法还会被再次调用</strong></li>
</ul>
<p><strong>需求</strong></p>
<ul>
<li>让 <strong>初始化动作</strong> 只被 <strong>执行一次</strong></li>
</ul>
<p><strong>解决办法</strong></p>
<ol>
<li>定义一个类属性 <code>init_flag</code> 标记是否 <strong>执行过初始化动作</strong>，初始值为 <code>False</code></li>
<li>在 <code>__init__</code> 方法中，判断 <code>init_flag</code>，如果为 <code>False</code> 就执行初始化动作</li>
<li>然后将 <code>init_flag</code> 设置为 <code>True</code></li>
<li>这样，再次 <strong>自动</strong> 调用 <code>__init__</code> 方法时，<strong>初始化动作就不会被再次执行</strong> 了</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MusicPlayer</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 记录第一个被创建对象的引用</span></span><br><span class="line">    instance = <span class="literal">None</span></span><br><span class="line">    <span class="comment"># 记录是否执行过初始化动作</span></span><br><span class="line">    init_flag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. 判断类属性是否是空对象</span></span><br><span class="line">        <span class="keyword">if</span> cls.instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 2. 调用父类的方法，为第一个对象分配空间</span></span><br><span class="line">            cls.instance = <span class="built_in">super</span>().__new__(cls)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 返回类属性保存的对象引用</span></span><br><span class="line">        <span class="keyword">return</span> cls.instance</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> MusicPlayer.init_flag:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;初始化音乐播放器&quot;</span>)</span><br><span class="line"></span><br><span class="line">            MusicPlayer.init_flag = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建多个对象</span></span><br><span class="line">player1 = MusicPlayer()</span><br><span class="line"><span class="built_in">print</span>(player1)</span><br><span class="line"></span><br><span class="line">player2 = MusicPlayer()</span><br><span class="line"><span class="built_in">print</span>(player2)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python面对对象学习</category>
      </categories>
      <tags>
        <tag>python学习</tag>
      </tags>
  </entry>
  <entry>
    <title>12_模块和包</title>
    <url>/2022/03/27/python%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E5%AD%A6%E4%B9%A0/12_%E6%A8%A1%E5%9D%97%E5%92%8C%E5%8C%85/</url>
    <content><![CDATA[<h1 id="模块和包"><a href="#模块和包" class="headerlink" title="模块和包"></a>模块和包</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>模块</li>
<li>包</li>
<li>发布模块</li>
</ul>
<h2 id="01-模块"><a href="#01-模块" class="headerlink" title="01. 模块"></a>01. 模块</h2><h3 id="1-1-模块的概念"><a href="#1-1-模块的概念" class="headerlink" title="1.1 模块的概念"></a>1.1 模块的概念</h3><blockquote>
<p><strong>模块是 Python 程序架构的一个核心概念</strong></p>
</blockquote>
<ul>
<li>每一个以扩展名 <code>py</code> 结尾的 <code>Python</code> 源代码文件都是一个 <strong>模块</strong></li>
<li><strong>模块名</strong> 同样也是一个 <strong>标识符</strong>，需要符合标识符的命名规则</li>
<li>在模块中定义的 <strong>全局变量</strong> 、<strong>函数</strong>、<strong>类</strong> 都是提供给外界直接使用的 <strong>工具</strong></li>
<li><strong>模块</strong> 就好比是 <strong>工具包</strong>，要想使用这个工具包中的工具，就需要先 <strong>导入</strong> 这个模块</li>
</ul>
<h3 id="1-2-模块的两种导入方式"><a href="#1-2-模块的两种导入方式" class="headerlink" title="1.2 模块的两种导入方式"></a>1.2 模块的两种导入方式</h3><h4 id="1）import-导入"><a href="#1）import-导入" class="headerlink" title="1）import 导入"></a>1）import 导入</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> 模块名<span class="number">1</span>, 模块名<span class="number">2</span> </span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：在导入模块时，每个导入应该独占一行</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> 模块名<span class="number">1</span></span><br><span class="line"><span class="keyword">import</span> 模块名<span class="number">2</span> </span><br></pre></td></tr></table></figure>

<ul>
<li>导入之后<ul>
<li>通过 <code>模块名.</code> 使用 <strong>模块提供的工具</strong> —— <strong>全局变量</strong>、<strong>函数</strong>、<strong>类</strong></li>
</ul>
</li>
</ul>
<h5 id="使用-as-指定模块的别名"><a href="#使用-as-指定模块的别名" class="headerlink" title="使用 as 指定模块的别名"></a>使用 <code>as</code> 指定模块的别名</h5><blockquote>
<p><strong>如果模块的名字太长</strong>，可以使用 <code>as</code> 指定模块的名称，以方便在代码中的使用</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> 模块名<span class="number">1</span> <span class="keyword">as</span> 模块别名</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：<strong>模块别名</strong> 应该符合 <strong>大驼峰命名法</strong></p>
</blockquote>
<h4 id="2）from…import-导入"><a href="#2）from…import-导入" class="headerlink" title="2）from…import 导入"></a>2）from…import 导入</h4><ul>
<li>如果希望 <strong>从某一个模块</strong> 中，导入 <strong>部分</strong> 工具，就可以使用 <code>from ... import</code> 的方式</li>
<li><code>import 模块名</code> 是 <strong>一次性</strong> 把模块中 <strong>所有工具全部导入</strong>，并且通过 <strong>模块名&#x2F;别名</strong> 访问</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从 模块 导入 某一个工具</span></span><br><span class="line"><span class="keyword">from</span> 模块名<span class="number">1</span> <span class="keyword">import</span> 工具名</span><br></pre></td></tr></table></figure>

<ul>
<li>导入之后<ul>
<li><strong>不需要</strong> 通过 <code>模块名.</code></li>
<li>可以直接使用 <strong>模块提供的工具</strong> —— <strong>全局变量</strong>、<strong>函数</strong>、<strong>类</strong></li>
</ul>
</li>
</ul>
<p><strong>注意</strong></p>
<blockquote>
<p>如果 <strong>两个模块</strong>，存在 <strong>同名的函数</strong>，那么 <strong>后导入模块的函数</strong>，会 <strong>覆盖掉先导入的函数</strong></p>
</blockquote>
<ul>
<li>开发时 <code>import</code> 代码应该统一写在 <strong>代码的顶部</strong>，更容易及时发现冲突</li>
<li>一旦发现冲突，可以使用 <code>as</code> 关键字 <strong>给其中一个工具起一个别名</strong></li>
</ul>
<h5 id="from…import-（知道）"><a href="#from…import-（知道）" class="headerlink" title="from…import *（知道）"></a>from…import *（知道）</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从 模块 导入 所有工具</span></span><br><span class="line"><span class="keyword">from</span> 模块名<span class="number">1</span> <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong></p>
<blockquote>
<p>这种方式不推荐使用，因为函数重名并没有任何的提示，出现问题不好排查</p>
</blockquote>
<h3 id="1-3-模块的搜索顺序-扩展"><a href="#1-3-模块的搜索顺序-扩展" class="headerlink" title="1.3 模块的搜索顺序[扩展]"></a>1.3 模块的搜索顺序[扩展]</h3><p><code>Python</code> 的解释器在 <strong>导入模块</strong> 时，会：</p>
<ol>
<li>搜索 <strong>当前目录</strong> 指定模块名的文件，<strong>如果有就直接导入</strong></li>
<li>如果没有，再搜索 <strong>系统目录</strong></li>
</ol>
<blockquote>
<p>在开发时，给文件起名，不要和 <strong>系统的模块文件</strong> <strong>重名</strong></p>
</blockquote>
<p><code>Python</code> 中每一个模块都有一个内置属性 <code>__file__</code> 可以 <strong>查看模块</strong> 的 <strong>完整路径</strong></p>
<p><strong>示例</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成一个 0～10 的数字</span></span><br><span class="line">rand = random.randint(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rand)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：如果当前目录下，存在一个 <code>random.py</code> 的文件，程序就无法正常执行了！</p>
</blockquote>
<ul>
<li>这个时候，<code>Python</code> 的解释器会 <strong>加载当前目录</strong> 下的 <code>random.py</code> 而不会加载 <strong>系统的</strong> <code>random</code> 模块</li>
</ul>
<h3 id="1-4-原则-——-每一个文件都应该是可以被导入的"><a href="#1-4-原则-——-每一个文件都应该是可以被导入的" class="headerlink" title="1.4 原则 —— 每一个文件都应该是可以被导入的"></a>1.4 原则 —— 每一个文件都应该是可以被导入的</h3><ul>
<li>一个 <strong>独立的 <code>Python</code> 文件</strong> 就是一个 <strong>模块</strong></li>
<li>在导入文件时，文件中 <strong>所有没有任何缩进的代码</strong> 都会被执行一遍！</li>
</ul>
<p><strong>实际开发场景</strong></p>
<ul>
<li>在实际开发中，每一个模块都是独立开发的，大多都有专人负责</li>
<li>开发人员通常会在模块下方增加一些测试代码<ul>
<li>仅在模块内使用，而被导入到其他文件中不需要执行</li>
</ul>
</li>
</ul>
<h4 id="name-属性"><a href="#name-属性" class="headerlink" title="__name__ 属性"></a><code>__name__</code> 属性</h4><blockquote>
<ul>
<li><code>__name__</code> 属性可以做到，测试模块的代码 <strong>只在测试情况下被运行</strong>，而在 <strong>被导入时不会被执行</strong>！</li>
</ul>
</blockquote>
<ul>
<li><code>__name__</code> 是 <code>Python</code> 的一个内置属性，记录着一个 <strong>字符串</strong></li>
<li>如果 <strong>是被其他文件导入的</strong>，<code>__name__</code> 就是 <strong>模块名</strong></li>
<li>如果 <strong>是当前执行的程序</strong> <code>__name__</code> 是 <strong><code>__main__</code></strong></li>
</ul>
<p><strong>在很多 <code>Python</code> 文件中都会看到以下格式的代码</strong>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入模块</span></span><br><span class="line"><span class="comment"># 定义全局变量</span></span><br><span class="line"><span class="comment"># 定义类</span></span><br><span class="line"><span class="comment"># 定义函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在代码的最下方</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据 __name__ 判断是否执行下方代码</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="02-包（Package）"><a href="#02-包（Package）" class="headerlink" title="02. 包（Package）"></a>02. 包（Package）</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul>
<li><strong>包</strong> 是一个 <strong>包含多个模块</strong> 的 <strong>特殊目录</strong></li>
<li>目录下有一个 <strong>特殊的文件</strong> <code>__init__.py</code></li>
<li>包名的 <strong>命名方式</strong> 和变量名一致，<strong>小写字母</strong> + <code>_</code></li>
</ul>
<p><strong>好处</strong></p>
<ul>
<li>使用 <code>import 包名</code> 可以一次性导入 <strong>包</strong> 中 <strong>所有的模块</strong></li>
</ul>
<h3 id="案例演练"><a href="#案例演练" class="headerlink" title="案例演练"></a>案例演练</h3><ol>
<li>新建一个 <code>hm_message</code> 的 <strong>包</strong></li>
<li>在目录下，新建两个文件 <code>send_message</code> 和 <code>receive_message</code></li>
<li>在 <code>send_message</code> 文件中定义一个 <code>send</code> 函数</li>
<li>在 <code>receive_message</code> 文件中定义一个 <code>receive</code> 函数</li>
<li>在外部直接导入 <code>hm_message</code> 的包</li>
</ol>
<h3 id="init-py"><a href="#init-py" class="headerlink" title="__init__.py"></a><code>__init__.py</code></h3><ul>
<li>要在外界使用 <strong>包</strong> 中的模块，需要在 <code>__init__.py</code> 中指定 <strong>对外界提供的模块列表</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从 当前目录 导入 模块列表</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> send_message</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> receive_message</span><br></pre></td></tr></table></figure>

<h2 id="03-发布模块（知道）"><a href="#03-发布模块（知道）" class="headerlink" title="03. 发布模块（知道）"></a>03. 发布模块（知道）</h2><ul>
<li>如果希望自己开发的模块，<strong>分享</strong> 给其他人，可以按照以下步骤操作</li>
</ul>
<h3 id="3-1-制作发布压缩包步骤"><a href="#3-1-制作发布压缩包步骤" class="headerlink" title="3.1 制作发布压缩包步骤"></a>3.1 制作发布压缩包步骤</h3><h4 id="1-创建-setup-py"><a href="#1-创建-setup-py" class="headerlink" title="1) 创建 setup.py"></a>1) 创建 setup.py</h4><ul>
<li><code>setup.py</code> 的文件</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> distutils.core <span class="keyword">import</span> setup</span><br><span class="line"></span><br><span class="line">setup(name=<span class="string">&quot;hm_message&quot;</span>,  <span class="comment"># 包名</span></span><br><span class="line">      version=<span class="string">&quot;1.0&quot;</span>,  <span class="comment"># 版本</span></span><br><span class="line">      description=<span class="string">&quot;itheima&#x27;s 发送和接收消息模块&quot;</span>,  <span class="comment"># 描述信息</span></span><br><span class="line">      long_description=<span class="string">&quot;完整的发送和接收消息模块&quot;</span>,  <span class="comment"># 完整描述信息</span></span><br><span class="line">      author=<span class="string">&quot;itheima&quot;</span>,  <span class="comment"># 作者</span></span><br><span class="line">      author_email=<span class="string">&quot;itheima@itheima.com&quot;</span>,  <span class="comment"># 作者邮箱</span></span><br><span class="line">      url=<span class="string">&quot;www.itheima.com&quot;</span>,  <span class="comment"># 主页</span></span><br><span class="line">      py_modules=[<span class="string">&quot;hm_message.send_message&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;hm_message.receive_message&quot;</span>])</span><br></pre></td></tr></table></figure>

<p>有关字典参数的详细信息，可以参阅官方网站：</p>
<p><a href="https://docs.python.org/2/distutils/apiref.html">https://docs.python.org/2/distutils/apiref.html</a></p>
<h4 id="2-构建模块"><a href="#2-构建模块" class="headerlink" title="2) 构建模块"></a>2) 构建模块</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python3 setup.py build</span><br></pre></td></tr></table></figure>

<h4 id="3-生成发布压缩包"><a href="#3-生成发布压缩包" class="headerlink" title="3) 生成发布压缩包"></a>3) 生成发布压缩包</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python3 setup.py sdist</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：要制作哪个版本的模块，就使用哪个版本的解释器执行！</p>
</blockquote>
<h3 id="3-2-安装模块"><a href="#3-2-安装模块" class="headerlink" title="3.2 安装模块"></a>3.2 安装模块</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar -zxvf hm_message-1.0.tar.gz </span><br><span class="line"></span><br><span class="line">$ sudo python3 setup.py install</span><br></pre></td></tr></table></figure>

<p><strong>卸载模块</strong></p>
<p>直接从安装目录下，把安装模块的 <strong>目录</strong> 删除就可以</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ cd /usr/local/lib/python3<span class="number">.5</span>/dist-packages/</span><br><span class="line">$ sudo rm -r hm_message*</span><br></pre></td></tr></table></figure>

<h3 id="3-3-pip-安装第三方模块"><a href="#3-3-pip-安装第三方模块" class="headerlink" title="3.3 pip 安装第三方模块"></a>3.3 <code>pip</code> 安装第三方模块</h3><ul>
<li>第三方模块通常是指由知名的第三方团队开发的并且被程序员广泛使用的Python包 &#x2F; 模块<ul>
<li>例如 <code>pygame</code> 就是一套非常成熟的 <strong>游戏开发模块</strong></li>
</ul>
</li>
<li><code>pip</code> 是一个现代的，通用的 <code>Python</code> 包管理工具</li>
<li>提供了对 <code>Python</code> 包的查找、下载、安装、卸载等功能</li>
</ul>
<p>安装和卸载命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将模块安装到 Python 2.x 环境</span></span><br><span class="line">$ sudo pip install pygame</span><br><span class="line">$ sudo pip uninstall pygame</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将模块安装到 Python 3.x 环境</span></span><br><span class="line">$ sudo pip3 install pygame</span><br><span class="line">$ sudo pip3 uninstall pygame</span><br></pre></td></tr></table></figure>

<h4 id="在-Mac-下安装-iPython"><a href="#在-Mac-下安装-iPython" class="headerlink" title="在 Mac 下安装 iPython"></a>在 <code>Mac</code> 下安装 <code>iPython</code></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pip install ipython</span><br></pre></td></tr></table></figure>

<h4 id="在-Linux-下安装-iPython"><a href="#在-Linux-下安装-iPython" class="headerlink" title="在 Linux 下安装 iPython"></a>在 <code>Linux</code> 下安装 <code>iPython</code></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt install ipython</span><br><span class="line">$ sudo apt install ipython3</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python面对对象学习</category>
      </categories>
      <tags>
        <tag>python学习</tag>
      </tags>
  </entry>
  <entry>
    <title>11_异常</title>
    <url>/2022/03/27/python%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E5%AD%A6%E4%B9%A0/11_%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>异常的概念</li>
<li>捕获异常</li>
<li>异常的传递</li>
<li>抛出异常</li>
</ul>
<h2 id="01-异常的概念"><a href="#01-异常的概念" class="headerlink" title="01. 异常的概念"></a>01. 异常的概念</h2><ul>
<li>程序在运行时，如果 <code>Python 解释器</code> <strong>遇到</strong> 到一个错误，<strong>会停止程序的执行，并且提示一些错误信息</strong>，这就是 <strong>异常</strong></li>
<li><strong>程序停止执行并且提示错误信息</strong> 这个动作，我们通常称之为：<strong>抛出(raise)异常</strong></li>
</ul>
<p><img src="https://s2.loli.net/2022/03/20/PW3YBJ4yztnOXqQ.png" alt="001_异常示意图"></p>
<blockquote>
<p>程序开发时，很难将 <strong>所有的特殊情况</strong> 都处理的面面俱到，通过 <strong>异常捕获</strong> 可以针对突发事件做集中的处理，从而保证程序的 <strong>稳定性和健壮性</strong></p>
</blockquote>
<h2 id="02-捕获异常"><a href="#02-捕获异常" class="headerlink" title="02. 捕获异常"></a>02. 捕获异常</h2><h3 id="2-1-简单的捕获异常语法"><a href="#2-1-简单的捕获异常语法" class="headerlink" title="2.1 简单的捕获异常语法"></a>2.1 简单的捕获异常语法</h3><ul>
<li>在程序开发中，如果 <strong>对某些代码的执行不能确定是否正确</strong>，可以增加 <code>try(尝试)</code> 来 <strong>捕获异常</strong></li>
<li>捕获异常最简单的语法格式：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    尝试执行的代码</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    出现错误的处理</span><br></pre></td></tr></table></figure>

<ul>
<li><code>try</code> <strong>尝试</strong>，下方编写要尝试代码，不确定是否能够正常执行的代码</li>
<li><code>except</code> <strong>如果不是</strong>，下方编写尝试失败的代码</li>
</ul>
<h4 id="简单异常捕获演练-——-要求用户输入整数"><a href="#简单异常捕获演练-——-要求用户输入整数" class="headerlink" title="简单异常捕获演练 —— 要求用户输入整数"></a>简单异常捕获演练 —— 要求用户输入整数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 提示用户输入一个数字</span></span><br><span class="line">    num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入数字：&quot;</span>))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请输入正确的数字&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="2-2-错误类型捕获"><a href="#2-2-错误类型捕获" class="headerlink" title="2.2 错误类型捕获"></a>2.2 错误类型捕获</h3><ul>
<li>在程序执行时，可能会遇到 <strong>不同类型的异常</strong>，并且需要 <strong>针对不同类型的异常，做出不同的响应</strong>，这个时候，就需要捕获错误类型了</li>
<li>语法如下：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 尝试执行的代码</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> 错误类型<span class="number">1</span>:</span><br><span class="line">    <span class="comment"># 针对错误类型1，对应的代码处理</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> (错误类型<span class="number">2</span>, 错误类型<span class="number">3</span>):</span><br><span class="line">    <span class="comment"># 针对错误类型2 和 3，对应的代码处理</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;未知错误 %s&quot;</span> % result)</span><br></pre></td></tr></table></figure>

<ul>
<li>当 <code>Python</code> 解释器 <strong>抛出异常</strong> 时，<strong>最后一行错误信息的第一个单词，就是错误类型</strong></li>
</ul>
<h4 id="异常类型捕获演练-——-要求用户输入整数"><a href="#异常类型捕获演练-——-要求用户输入整数" class="headerlink" title="异常类型捕获演练 —— 要求用户输入整数"></a>异常类型捕获演练 —— 要求用户输入整数</h4><p><strong>需求</strong></p>
<ol>
<li>提示用户输入一个整数</li>
<li>使用 <code>8</code> 除以用户输入的整数并且输出</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入整数：&quot;</span>))</span><br><span class="line">    result = <span class="number">8</span> / num</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请输入正确的整数&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;除 0 错误&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="捕获未知错误"><a href="#捕获未知错误" class="headerlink" title="捕获未知错误"></a>捕获未知错误</h4><ul>
<li>在开发时，<strong>要预判到所有可能出现的错误</strong>，还是有一定难度的</li>
<li>如果希望程序 <strong>无论出现任何错误</strong>，都不会因为 <code>Python</code> 解释器 <strong>抛出异常而被终止</strong>，可以再增加一个 <code>except</code></li>
</ul>
<p>语法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;未知错误 %s&quot;</span> % result)</span><br></pre></td></tr></table></figure>

<h3 id="2-3-异常捕获完整语法"><a href="#2-3-异常捕获完整语法" class="headerlink" title="2.3 异常捕获完整语法"></a>2.3 异常捕获完整语法</h3><ul>
<li>在实际开发中，为了能够处理复杂的异常情况，完整的异常语法如下：</li>
</ul>
<blockquote>
<p>提示：</p>
<ul>
<li>有关完整语法的应用场景，在后续学习中，<strong>结合实际的案例</strong>会更好理解</li>
<li>现在先对这个语法结构有个印象即可</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 尝试执行的代码</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> 错误类型<span class="number">1</span>:</span><br><span class="line">    <span class="comment"># 针对错误类型1，对应的代码处理</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> 错误类型<span class="number">2</span>:</span><br><span class="line">    <span class="comment"># 针对错误类型2，对应的代码处理</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> (错误类型<span class="number">3</span>, 错误类型<span class="number">4</span>):</span><br><span class="line">    <span class="comment"># 针对错误类型3 和 4，对应的代码处理</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    <span class="comment"># 打印错误信息</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 没有异常才会执行的代码</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 无论是否有异常，都会执行的代码</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;无论是否有异常，都会执行的代码&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>else</code> 只有在没有异常时才会执行的代码</li>
<li><code>finally</code> 无论是否有异常，都会执行的代码</li>
<li>之前一个演练的 <strong>完整捕获异常</strong> 的代码如下：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入整数：&quot;</span>))</span><br><span class="line">    result = <span class="number">8</span> / num</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请输入正确的整数&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;除 0 错误&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;未知错误 %s&quot;</span> % result)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正常执行&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;执行完成，但是不保证正确&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="03-异常的传递"><a href="#03-异常的传递" class="headerlink" title="03. 异常的传递"></a>03. 异常的传递</h2><ul>
<li><strong>异常的传递</strong> —— 当 <strong>函数&#x2F;方法</strong> 执行 <strong>出现异常</strong>，会 <strong>将异常传递</strong> 给 函数&#x2F;方法 的 <strong>调用一方</strong></li>
<li>如果 <strong>传递到主程序</strong>，仍然 <strong>没有异常处理</strong>，程序才会被终止</li>
</ul>
<blockquote>
<p>提示</p>
</blockquote>
<ul>
<li>在开发中，可以在主函数中增加 <strong>异常捕获</strong></li>
<li>而在主函数中调用的其他函数，只要出现异常，都会传递到主函数的 <strong>异常捕获</strong> 中</li>
<li>这样就不需要在代码中，增加大量的 <strong>异常捕获</strong>，能够保证代码的整洁</li>
</ul>
<p><strong>需求</strong></p>
<ol>
<li>定义函数 <code>demo1()</code> <strong>提示用户输入一个整数并且返回</strong></li>
<li>定义函数 <code>demo2()</code> 调用 <code>demo1()</code></li>
<li>在主程序中调用 <code>demo2()</code></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">demo1</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个整数：&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo2</span>():</span><br><span class="line">    <span class="keyword">return</span> demo1()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(demo2())</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请输入正确的整数&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;未知错误 %s&quot;</span> % result)</span><br></pre></td></tr></table></figure>

<h2 id="04-抛出-raise-异常"><a href="#04-抛出-raise-异常" class="headerlink" title="04. 抛出 raise 异常"></a>04. 抛出 <code>raise</code> 异常</h2><h3 id="4-1-应用场景"><a href="#4-1-应用场景" class="headerlink" title="4.1 应用场景"></a>4.1 应用场景</h3><ul>
<li>在开发中，除了 <strong>代码执行出错</strong> <code>Python</code> 解释器会 <strong>抛出</strong> 异常之外</li>
<li>还可以根据 <strong>应用程序</strong> <strong>特有的业务需求</strong> <strong>主动抛出异常</strong></li>
</ul>
<p><strong>示例</strong></p>
<ul>
<li>提示用户 <strong>输入密码</strong>，如果 <strong>长度少于 8</strong>，抛出 <strong>异常</strong></li>
</ul>
<p><img src="https://s2.loli.net/2022/03/20/tIoyBqJPZX6Cku5.png" alt="024_自定义异常"></p>
<p><strong>注意</strong></p>
<ul>
<li>当前函数 <strong>只负责</strong> 提示用户输入密码，如果 <strong>密码长度不正确，需要其他的函数进行额外处理</strong></li>
<li>因此可以 <strong>抛出异常</strong>，由其他需要处理的函数 <strong>捕获异常</strong></li>
</ul>
<h3 id="4-2-抛出异常"><a href="#4-2-抛出异常" class="headerlink" title="4.2 抛出异常"></a>4.2 抛出异常</h3><ul>
<li><code>Python</code> 中提供了一个 <code>Exception</code> <strong>异常类</strong></li>
<li>在开发时，如果满足特定业务需求时，希望抛出异常，可以：<ol>
<li><strong>创建</strong> 一个 <code>Exception</code> 的 <strong>对象</strong></li>
<li>使用 <code>raise</code> <strong>关键字</strong> 抛出 <strong>异常对象</strong></li>
</ol>
</li>
</ul>
<p><strong>需求</strong></p>
<ul>
<li>定义 <code>input_password</code> 函数，提示用户输入密码</li>
<li>如果用户输入长度 &lt; 8，抛出异常</li>
<li>如果用户输入长度 &gt;&#x3D;8，返回输入的密码</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">input_password</span>():</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 提示用户输入密码</span></span><br><span class="line">    pwd = <span class="built_in">input</span>(<span class="string">&quot;请输入密码：&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 判断密码长度，如果长度 &gt;= 8，返回用户输入的密码</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(pwd) &gt;= <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">return</span> pwd</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 密码长度不够，需要抛出异常</span></span><br><span class="line">    <span class="comment"># 1&gt; 创建异常对象 - 使用异常的错误信息字符串作为参数</span></span><br><span class="line">    ex = Exception(<span class="string">&quot;密码长度不够&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2&gt; 抛出异常对象</span></span><br><span class="line">    <span class="keyword">raise</span> ex</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    user_pwd = input_password()</span><br><span class="line">    <span class="built_in">print</span>(user_pwd)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;发现错误：%s&quot;</span> % result)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python面对对象学习</category>
      </categories>
      <tags>
        <tag>python学习</tag>
      </tags>
  </entry>
  <entry>
    <title>0.python学习</title>
    <url>/2021/12/22/python%E9%9D%A2%E5%AF%B9%E8%BF%87%E7%A8%8B%E5%AD%A6%E4%B9%A0/0.python%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="学习方法"><a href="#学习方法" class="headerlink" title="学习方法"></a>学习方法</h1><p>\1. 每天知识点必须理解（定义、作用、适用性、语法）</p>
<p>\2. 每天练习必须会做（独立完成）</p>
<p>\3. 将理论、代码、图示形成笔记保留下来（合三为一）</p>
<p>\4. 课上注意听！课下抓紧练、不懂马上问（群讨论）</p>
<h1 id=""><a href="#" class="headerlink" title=""></a><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/wps8594.tmp.png" alt="img"></h1><h1 id="Python-简介"><a href="#Python-简介" class="headerlink" title="*Python* *简介*"></a><em><strong>*Python*</strong></em> <em><strong>*简介*</strong></em></h1><p>程序员：</p>
<p>程序设计人员。</p>
<p>程序：</p>
<p>一组由计算机负责执行的指令，是实现某种需求的软件。 </p>
<p>操作系统：</p>
<p>管理和控制计算机硬件与软件资源的程序，隔离不同硬件的差异，使开发程序简单化。</p>
<p>例如，Windows，Linux，Unix。</p>
<p>硬件：</p>
<p>主板–计算机的主要电路系统。</p>
<p>CPU –主要负责执行程序指令，处理数据。</p>
<p>硬盘–持久化存储数据的记忆设备，容量大，速度慢。</p>
<p>内存–临时存储数据的记忆设备，容量小，速度快。</p>
<p>IO设备–键盘、鼠标、显示器。</p>
<h2 id="Python-定义"><a href="#Python-定义" class="headerlink" title="*Python* *定义*"></a><em><strong>*Python*</strong></em> <em><strong>*定义*</strong></em></h2><p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/wps8595.tmp.jpg" alt="img"> </p>
<p>是一个免费、开源、跨平台、动态、面向对象的编程语言。</p>
<h2 id="Python程序的执行方式"><a href="#Python程序的执行方式" class="headerlink" title="*Python程序的执行方式*"></a><em><strong>*Python程序的执行方式*</strong></em></h2><h3 id="交互式"><a href="#交互式" class="headerlink" title="*交互式*"></a><em><strong>*交互式*</strong></em></h3><p>在命令行输入指令，回车即可得到结果。</p>
<p>\1. 打开终端</p>
<p>\2. 进入：python3</p>
<p>\3. python代码：print(“hello world”) </p>
<p>\4. 离开：exit()</p>
<h3 id="文件式"><a href="#文件式" class="headerlink" title="*文件式*"></a><em><strong>*文件式*</strong></em></h3><p>将指令编写到.py文件，可以重复运行程序。</p>
<p>\1. 在指定目录中创建Python文件</p>
<p>目录：&#x2F;home&#x2F;tarena&#x2F;month01&#x2F;python_base&#x2F;day01</p>
<p>文件名:hello.py</p>
<p>\2. 在终端命令行输入如下命令: </p>
<p>  cd &#x2F;home&#x2F;tarena&#x2F;month01&#x2F;python_base&#x2F;day01</p>
<p>python3 hello.py</p>
<h2 id="Linux-常用-命令"><a href="#Linux-常用-命令" class="headerlink" title="*Linux**常用**命令*"></a><em><strong>*Linux*</strong></em><em><strong>*常用*</strong></em><em><strong>*命令*</strong></em></h2><p>(1) pwd：查看当前工作目录的路径 </p>
<p>(2) ls：查看指定目录的内容或文件信息   </p>
<p>(3) cd命令:改变工作目录（进入到某个目录）       </p>
<h2 id="执行过程"><a href="#执行过程" class="headerlink" title="*执行过程*"></a><em><strong>*执行过程*</strong></em></h2><p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/wps85A6.tmp.jpg" alt="img"> </p>
<p>计算机只能识别机器码(1010)，不能识别源代码(python)。</p>
<p>由源代码转变成机器码的过程分成两类：编译和解释。</p>
<p>编译：在程序执行之前，通过编译器将源代码变成机器码；</p>
<p>运行时，计算机就可以直接执行。例如：C语言。</p>
<p>优点是运行速度快；缺点是开发效率低，不能跨平台。</p>
<p>解释：运行时，通过解释器对程序逐行解释，然后运行。例如Javascript</p>
<p>   优点是开发效率高，可以跨平台；缺点是运行速度低。</p>
<p>python是解释型语言，但出于效率的考虑，提供了一种编译的方法。编译之后就得到pyc文件，存储了字节码（特定于Python的表现形式，不是机器码）。</p>
<p>​	python执行过程：</p>
<p>​	源代码 –编译–&gt; 字节码–解释–&gt; 机器码</p>
<p>​	|————1次————|</p>
<h2 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/wps85A7.tmp.png" alt="img"></h2><h2 id="解释器类型"><a href="#解释器类型" class="headerlink" title="*解释器类型*"></a><em><strong>*解释器类型*</strong></em></h2><p>CPython（C语言开发)</p>
<p>Jython (java开发)</p>
<p>IronPython (.net开发)</p>
<h1 id="数据基本运算"><a href="#数据基本运算" class="headerlink" title="*数据基本运算*"></a><em><strong>*数据基本运算*</strong></em></h1><h2 id="py-charm-常用快捷键"><a href="#py-charm-常用快捷键" class="headerlink" title="*py**charm**常用快捷键*"></a><em><strong>*py*</strong></em><em><strong>*charm*</strong></em><em><strong>*常用快捷键*</strong></em></h2><p>移动到本行开头：home键</p>
<p>移动到本行末尾：end键盘</p>
<p>注释代码：ctrl + &#x2F;</p>
<p>复制行：ctrl +d</p>
<p>选择列：鼠标左键 + alt</p>
<p>移动行：shift + alt + 上下箭头</p>
<p>智能提示：Ctrl + Space</p>
<h2 id="注释"><a href="#注释" class="headerlink" title="*注释*"></a><em><strong>*注释*</strong></em></h2><p>给人看的，通常是对代码的描述信息。</p>
<p>\1. 单行注释：以#号开头。</p>
<p>\2. 多行注释：三引号开头，三引号结尾。</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="*函数*"></a><em><strong>*函数*</strong></em></h2><p>表示一个功能，函数定义者是提供功能的人，函数调用者是使用功能的人。</p>
<p>例如：</p>
<p>print(数据) 作用：将括号中的内容显示在控制台中</p>
<p>变量 &#x3D; input(“需要显示的内容”) 作用：将用户输入的内容赋值给变量</p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/wps85A8.tmp.png" alt="img"> </p>
<p>代码：函数</p>
<p>Print（“需要显示的内容”）：</p>
<p>Qxt  &#x3D; input（“需要显示的内容”）</p>
<p>Print（qxt） </p>
<h2 id="变量"><a href="#变量" class="headerlink" title="*变量*"></a><em><strong>*变量*</strong></em></h2><p>定义：关联一个对象的标识符。</p>
<p>  命名：必须是字母或下划线开头，后跟字母、数字、下划线。</p>
<p>​     不能使用python的关键字(蓝色)，否则发生语法错误：SyntaxError: invalid syntax。</p>
<p>建议命名：字母小写，多个单词以下划线隔开。</p>
<p>​     class_name</p>
<p>赋值：创建一个变量或改变一个变量绑定的数据。</p>
<p>  语法：变量名 &#x3D; 数据</p>
<p>​     变量名1 &#x3D; 变量名2 &#x3D; 数据</p>
<p>​     变量名1, 变量名2, &#x3D; 数据1, 数据2</p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/wps85A9.tmp.png" alt="img"><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/wps85AA.tmp.png" alt="img"> </p>
<p>代码：变量</p>
<p>变量名&#x3D;….</p>
<p>a &#x3D; “你好” </p>
<p>b &#x3D; “世界”</p>
<p>c &#x3D; b + a</p>
<p>class_name &#x3D; “1903”</p>
<p>stu_name &#x3D; “zs”</p>
<p>class_name &#x3D; class_name + stu_name<img src="https://gitee.com/lichaikui/picture/raw/master/tupian/wps85BB.tmp.png" alt="img"></p>
<h2 id="del-语句"><a href="#del-语句" class="headerlink" title="*del 语句*"></a><em><strong>*del 语句*</strong></em></h2><p>语法: del 变量名1, 变量名2</p>
<p>作用：用于删除变量,同时解除与对象的关联关系.如果可能则释放对象。</p>
<p>自动化内存管理的引用计数：每个对象记录被变量绑定(引用)的数量,当为0时被销毁。</p>
<h2 id="核心数据类-型"><a href="#核心数据类-型" class="headerlink" title="核心数据类*型*"></a>核心数据类<em><strong>*型*</strong></em></h2><p>在python中变量没有类型，但关联的对象有类型。</p>
<p>通过type函数可查看。</p>
<h3 id="空值对象-None"><a href="#空值对象-None" class="headerlink" title="*空值对象* *None*"></a><em><strong>*空值对象*</strong></em> <em><strong>*None*</strong></em></h3><pre><code> 表示不存在的特殊对象
</code></pre>
<p>作用:</p>
<pre><code>      用来占位
  
  变量解除绑定
</code></pre>
<h3 id="整形i-nt"><a href="#整形i-nt" class="headerlink" title="*整形i**nt*"></a><em><strong>*整形i*</strong></em><em><strong>*nt*</strong></em></h3><p>整数，包含正数、负数、0。</p>
<p>   - 如： -5, 100, 0</p>
<p>字面值：</p>
<p>– 十进制：5 </p>
<p>num01 &#x3D; 18</p>
<p>– 二进制：0b101</p>
<p>– 二进制(每逢2进1)  0  1   10  11  100  101   110  ….</p>
<p>num02 &#x3D; 0b11</p>
<p>print(num02)</p>
<p>– 八进制方式表示(0o开头，后跟0~7)</p>
<p>– 八进制(每逢8进1) 0 1 … 7  10  11  12  …</p>
<p>num03 &#x3D; 0o10</p>
<p>print(num03)</p>
<p>– 十六进制表示(0x开头后跟0<del>9,A</del>F,a~f)</p>
<p>– 十六进制(每逢16进1) 0–9   a(10) – f(15)</p>
<p>num04 &#x3D; 0x10</p>
<p>print(num04)</p>
<p>小整数对象池：CPython 中整数 -5 至 256,永远存在小整数对象池中,不会被释放并可重复使用。</p>
<p>小整数对象池</p>
<p>a &#x3D; 500</p>
<p>b &#x3D; 500</p>
<p># id函数:返回变量存储的对象地址</p>
<p>print(id(a))</p>
<p>print(id(b)) <img src="https://gitee.com/lichaikui/picture/raw/master/tupian/wps85BC.tmp.png" alt="img"></p>
<p># 备注:在交互式中,两个500不是同一个对象. </p>
<h3 id="浮点型f-loat"><a href="#浮点型f-loat" class="headerlink" title="*浮点型f**loat*"></a><em><strong>*浮点型f*</strong></em><em><strong>*loat*</strong></em></h3><p>小数(包含正数、负数，0.0) </p>
<p>字面值：</p>
<p>– 小数：1.0  2.5</p>
<p>浮点数(小数)float</p>
<p>f01 &#x3D; 1.0</p>
<p>– 科学计数法：e&#x2F;E (正负号) 指数 </p>
<p>​    1.23e-2 (等同于0.0123)</p>
<p>​    1.23456e5(等同于123456.0)</p>
<p>f03 &#x3D; 1.234e-3</p>
<p>print(f03)</p>
<h3 id="字符串str"><a href="#字符串str" class="headerlink" title="*字符串str*"></a><em><strong>*字符串str*</strong></em></h3><p>​	是用来记录文本信息(文字信息)。</p>
<p>​	字面值：双引号</p>
<p>字符串str</p>
<p>s01 &#x3D; “唐僧”</p>
<p>s02 &#x3D; “10”</p>
<p>s03 &#x3D; “1.5”</p>
<p>print(“10”+”2”)</p>
<p>print(10+2)</p>
<h3 id="复数-complex"><a href="#复数-complex" class="headerlink" title="*复数**complex*"></a><em><strong>*复数*</strong></em><em><strong>*complex*</strong></em></h3><p>由实部和虚部组成的数字。</p>
<p>虚部是以j或J结尾。</p>
<p>字面值： 1j   1+1j  1-1j </p>
<p>c01 &#x3D; 1j</p>
<p>c02 &#x3D; 5 + 1j</p>
<p>print(c02)</p>
<p>print(type(c01))</p>
<h3 id="布尔bool"><a href="#布尔bool" class="headerlink" title="*布尔bool*"></a><em><strong>*布尔bool*</strong></em></h3><p>用来表示真和假的类型</p>
<p>True 表示真(条件满足或成立)，本质是1</p>
<p>False 表示假(条件不满足或不成立)，本质是0</p>
<p>b01 &#x3D; True # 真的  对的   成立的   满足条件的</p>
<p>b02 &#x3D; False# 假的  错的   不成立的   不满足条件的</p>
<p>b03 &#x3D; 1 &gt; 2</p>
<p>print(b03)</p>
<h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="*数据类型转换*"></a><em><strong>*数据类型转换*</strong></em></h2><p>​	转换为整形: int(数据)</p>
<p>​	转换为浮点型:float(数据)</p>
<p>​	转换为字符串:str(数据)</p>
<p>​	转换为布尔:bool(数据)</p>
<p>​     – 结果为False：bool(0)  bool(0.0)  bool(None)  </p>
<p>混合类型自动升级：</p>
<p> 1 + 2.14  返回的结果是 3.14</p>
<p> 1 + 3.0  返回结果是:  4.0</p>
<p>数据类型转换</p>
<p> str_score &#x3D; input(“请输入成绩:”)</p>
<p> input 函数的结果就是str,如果需要做数学运算,必须转换成数字.</p>
<p>print(type(str_score))</p>
<p># float_score &#x3D; float(str_score)</p>
<p># print(type(float_score))</p>
<p>b04 &#x3D; bool(“False”)</p>
<p>print(b04)</p>
<p>i01 &#x3D; float(“5.1”) # 如果需要转换的类型,与目标类型不一致,则错误.</p>
<p>print(i01)</p>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="*运算符*"></a><em><strong>*运算符*</strong></em></h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="*算术运算符*"></a><em><strong>*算术运算符*</strong></em></h3><p> +  加法</p>
<p>num01 &#x3D; 5</p>
<p>num02 &#x3D; 2.1</p>
<p>print(num01 + num02)</p>
<p> -  减法</p>
<p> *  乘法</p>
<p> &#x2F;  除法：结果为浮点数</p>
<p> &#x2F;&#x2F; 地板除：除的结果去掉小数部分</p>
<p> %  求余</p>
<p># %作用1:判断一个数能否被另外一个数整除</p>
<p>print(num01 % 2 &#x3D;&#x3D; 0)</p>
<p># %作用2: 获取个位</p>
<p>print(67 % 10)</p>
<p> ** 幂运算</p>
<p>优先级从高到低： **</p>
<p>​     		  ()</p>
<p>​             *  &#x2F; % &#x2F;&#x2F;</p>
<p>​           +  -</p>
<h3 id="增强运算符"><a href="#增强运算符" class="headerlink" title="*增强运算符*"></a><em><strong>*增强运算符*</strong></em></h3><p>  y +&#x3D; x    等同于 y &#x3D; y + x</p>
<p>num03 &#x3D; 1</p>
<p>print(num03 + 1)</p>
<p>print(num03) # 1</p>
<p>num04 &#x3D; 800</p>
<p># 修改num04</p>
<p>num04 &#x3D; num04 + 1</p>
<p>num04 +&#x3D; 1</p>
<p>  y -&#x3D; x    等同于 y &#x3D; y - x</p>
<p>  y *&#x3D; x    等同于 y &#x3D; y * x</p>
<p>  y &#x2F;&#x3D; x    等同于 y &#x3D; y &#x2F; x</p>
<p>  y &#x2F;&#x2F;&#x3D; x   等同于 y &#x3D; y &#x2F;&#x2F; x</p>
<p>  y %&#x3D; x    等同于 y &#x3D; y % x</p>
<p>  y **&#x3D; x   等同于 y &#x3D; y ** x</p>
<h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="*比较运算符*"></a><em><strong>*比较运算符*</strong></em></h3><p>  &lt;   小于</p>
<p>  &lt;&#x3D;  小于等于</p>
<p>  &gt;   大于</p>
<p>  &gt;&#x3D;  大于等于</p>
<p>  &#x3D;&#x3D;  等于</p>
<p>  !&#x3D;  不等于</p>
<p>  返回布尔类型的值</p>
<p>比较运算的数学表示方式:0 &lt;&#x3D; x &lt;&#x3D; 100</p>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="*逻辑运算符*"></a><em><strong>*逻辑运算符*</strong></em></h3><h4 id="与-and"><a href="#与-and" class="headerlink" title="*与**and*"></a><em><strong>*与*</strong></em><em><strong>*and*</strong></em></h4><p>  表示并且的关系，一假俱假。     </p>
<p> 示例:</p>
<p>  True and True   # True</p>
<p>  True and False  # False</p>
<p>  False and True  # False</p>
<p>False and False  # False</p>
<p># 放学了  and  完成作业了   &#x3D;两个条件都满足&#x3D;&gt;  回家了</p>
<p># print(True and True)  # True</p>
<p># print(False and False)# False</p>
<p># print(True and False)# False</p>
<p># print(False and True)# False</p>
<p>#</p>
<p># print(1 &gt; 2 and 5 &gt; 3)# False</p>
<p># print(1 &lt; 2 and 5 &gt; 3 and 10 &gt; 5) # True</p>
<h4 id="或-or"><a href="#或-or" class="headerlink" title="*或**or*"></a><em><strong>*或*</strong></em><em><strong>*or*</strong></em></h4><h4 id="表示或者的-关系-，一真俱真"><a href="#表示或者的-关系-，一真俱真" class="headerlink" title="*表示或者的**关系**，一真俱真*"></a><em><strong>*表示或者的*</strong></em><em><strong>*关系*</strong></em><em><strong>*，一真俱真*</strong></em></h4><p> 示例:</p>
<p>  True or True   # True</p>
<p>  True or False   # True</p>
<p>  False or True   # True</p>
<p>False or False  # False </p>
<p># 放学了  or  完成作业了   &#x3D;满足其中一个条件即可&#x3D;&gt;  回家了</p>
<p>print(True  or True)  # True</p>
<p>print(False or False)# False</p>
<p>print(True  or  False)# True</p>
<p>print(False or True)# True</p>
<p>print(1 &gt; 2 or 5 &lt; 3 or 10 &gt; 5)  # True</p>
<p>表示取反</p>
<p>例如：</p>
<p>not True  # 返回False</p>
<p>not False  # 返回True</p>
<p>not 100   # 返回False</p>
<h4 id="短路运算"><a href="#短路运算" class="headerlink" title="*短路运算*"></a><em><strong>*短路运算*</strong></em></h4><pre><code> 一但结果确定，后面的表达式将不再执行。
</code></pre>
<p>短路逻辑</p>
<p># 如果第一个条件不满足  则不再考虑第二个条件</p>
<p># print(1 &gt; 2 and input(“请输入:”) &#x3D;&#x3D; “a”)</p>
<p># 如果第一个条件满足  则不再考虑第二个条件</p>
<p># print(1 &gt; 2 or input(“请输入:”) &#x3D;&#x3D; “a”)</p>
<p># 建议(启发):尽量将耗时的判断,放在后面.(因为很可能不执行)</p>
<h3 id="身份运算符"><a href="#身份运算符" class="headerlink" title="*身份运算符*"></a><em><strong>*身份运算符*</strong></em></h3><p>  语法:</p>
<pre><code>      x is y
  
      x is not y
</code></pre>
<p>作用：</p>
<p>is 用于判断两个对象是否是同一个对象,是时返回True,否则返回False。</p>
<pre><code>  is not 的作用与is相反
</code></pre>
<p>num01 &#x3D; 800</p>
<p>num02 &#x3D; 9<img src="https://gitee.com/lichaikui/picture/raw/master/tupian/wps85BD.tmp.png" alt="img"><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/wps85BE.tmp.png" alt="img"></p>
<p>num03 &#x3D; num01</p>
<p>print(num01 is num02) # false</p>
<p>print(id(num01) &#x3D;&#x3D;  id(num02))</p>
<p>print(num03 is num01) #  true</p>
<h3 id="优先级"><a href="#优先级" class="headerlink" title="*优先级*"></a><em><strong>*优先级*</strong></em></h3><p>​	高到低：</p>
<p>算数运算符</p>
<p>比较运算符</p>
<p>快捷运算符</p>
<p>身份运算符</p>
<p>逻辑运算符</p>
<h1 id="语句"><a href="#语句" class="headerlink" title="*语句*"></a><em><strong>*语句*</strong></em></h1><h2 id="行"><a href="#行" class="headerlink" title="*行*"></a><em><strong>*行*</strong></em></h2><p>物理行：程序员编写代码的行。</p>
<p>逻辑行：python解释器需要执行的指令。</p>
<p>建议一个逻辑行在一个物理行上。</p>
<p>如果一个物理行中使用多个逻辑行，需要使用分号；隔开。</p>
<p>如果逻辑行过长，可以使用隐式换行或显式换行。</p>
<p>– 隐式换行：所有括号的内容换行,称为隐式换行</p>
<p>  括号包括:  ()  []  {} 三种</p>
<p>– 显式换行：通过折行符 \ (反斜杠)换行，必须放在一行的末尾，目的是告诉解释器,下一行也是本行的语句。 </p>
<h2 id="pass-语句"><a href="#pass-语句" class="headerlink" title="*pass 语句*"></a><em><strong>*pass 语句*</strong></em></h2><pre><code> 作用:通常用来填充语法空白。
</code></pre>
<h2 id="选择-语句"><a href="#选择-语句" class="headerlink" title="*选择**语句*"></a><em><strong>*选择*</strong></em><em><strong>*语句*</strong></em></h2><h3 id="If-elif-else-语句"><a href="#If-elif-else-语句" class="headerlink" title="*If* *elif* *else* *语句*"></a><em><strong>*If*</strong></em> <em><strong>*elif*</strong></em> <em><strong>*else*</strong></em> <em><strong>*语句*</strong></em></h3><p>作用:</p>
<p>  让程序根据条件选择性的执行语句。</p>
<p> 语法:</p>
<p>  if 条件1:</p>
<p>​    语句块1</p>
<p>  elif 条件2:</p>
<p>​    语句块2</p>
<p>  else:</p>
<p>​    语句块3</p>
<p> 说明:</p>
<p>  elif 子句可以有0个或多个。</p>
<p>  else 子句可以有0个或1个,且只能放在if语句的最后。</p>
<p>“””</p>
<p>  条件表达式</p>
<p>“””</p>
<p># sex &#x3D; None</p>
<p># if input(“请输入性别:”) &#x3D;&#x3D; “男”:</p>
<p>#   sex &#x3D; 0</p>
<p># else:</p>
<p>#   sex &#x3D; 1</p>
<p>sex &#x3D; 0 if input(“请输入性别:”) &#x3D;&#x3D; “男” else 1</p>
<p>print(sex)</p>
<p># 满足条件赋值0 否则赋值 1</p>
<h3 id="if-语句的真值表达式"><a href="#if-语句的真值表达式" class="headerlink" title="*if 语句的真值表达式*"></a><em><strong>*if 语句的真值表达式*</strong></em></h3><p>  if 100:</p>
<p>​    print(“真值”)</p>
<p>  等同于</p>
<p>  if bool(100):</p>
<p>​    print(“真值”)</p>
<h3 id="条件表达式"><a href="#条件表达式" class="headerlink" title="*条件表达式*"></a><em><strong>*条件表达式*</strong></em></h3><p> 语法:</p>
<p>  结果1 if 条件 else 结果2</p>
<p> 作用:</p>
<p>根据条件(True&#x2F;False) 来决定返回结果1还是结果2。</p>
<h2 id="循环-语句"><a href="#循环-语句" class="headerlink" title="*循环**语句*"></a><em><strong>*循环*</strong></em><em><strong>*语句*</strong></em></h2><h3 id="while语句"><a href="#while语句" class="headerlink" title="*while语句*"></a><em><strong>*while语句*</strong></em></h3><p> 作用: 可以让一段代码满足条件，重复执行。</p>
<p> 语法:</p>
<p>  while 条件:</p>
<p>​    满足条件执行的语句</p>
<p>  else:</p>
<p>​    不满足条件执行的语句</p>
<p> 说明:</p>
<p>  else子句可以省略。</p>
<p>在循环体内用break终止循环时,else子句不执行。</p>
<p>“””</p>
<p>  循环语句</p>
<p>​    – while</p>
<p>“””</p>
<p># while 条件:</p>
<p>#   执行代码</p>
<p>#   if 退出条件1:</p>
<p>#     break</p>
<p># 死循环:条件永远满足的循环</p>
<p>while True:</p>
<p>  str_usd &#x3D; input(“请输入美元”)</p>
<p>  float_usd &#x3D; float(str_usd)</p>
<p>  rmb &#x3D; float_usd * 6.708</p>
<p>  print(rmb)</p>
<p>  if input(“按e键则退出”) &#x3D;&#x3D;”e”:</p>
<p>​    break # 退出循环体</p>
<p>print(“…..”)</p>
<h3 id="for-语句"><a href="#for-语句" class="headerlink" title="*for 语句*"></a><em><strong>*for 语句*</strong></em></h3><p> 作用:</p>
<p>  用来遍历可迭代对象的数据元素。</p>
<p>可迭代对象是指能依次获取数据元素的对象，例如：容器类型。</p>
<p> 语法:</p>
<p>  for 变量列表 in 可迭代对象:</p>
<p>​    语句块1</p>
<p>  else:</p>
<p>​    语句块2</p>
<p> 说明:</p>
<p>  else子句可以省略。</p>
<p>  在循环体内用break终止循环时,else子句不执行。</p>
<h3 id="range-函数"><a href="#range-函数" class="headerlink" title="*range 函数*"></a><em><strong>*range 函数*</strong></em></h3><p>作用:</p>
<pre><code>      用来创建一个生成一系列整数的可迭代对象(也叫整数序列生成器)。
</code></pre>
<p>语法:</p>
<pre><code>      range(开始点，结束点，间隔)
  
  说明:
</code></pre>
<p>– 此函数返回的可迭代对象可以用for取出其中的元素</p>
<p>– 返回的数字不包含结束点。</p>
<p>– 开始点默认为0</p>
<p>– 间隔默认值为1 </p>
<p>“””</p>
<p>  循环语句</p>
<p>​    – for</p>
<p>“””</p>
<p># for 变量名 in 可迭代对象:</p>
<p>#   语句</p>
<p># for element in “我爱Python”:</p>
<p>#   print(element)</p>
<p># range()函数:整数生成器</p>
<p># 熟练正叙  倒叙  跳着 生成数字</p>
<p># for element in range(1,5,1): # 1  2  3  4</p>
<p>#   print(element)</p>
<p># range(1,6,2): # 1  3  5</p>
<p># range(3): #0  1  2</p>
<p># range(5,-1,-1): #5  4  3  2  1  0</p>
<p># 结论:for比while,更适合做预定次数的循环.</p>
<p>count &#x3D; 0</p>
<p>while count &lt; 3:</p>
<p>  print(count)</p>
<p>  count+&#x3D;1</p>
<p>for i in range(3):</p>
<p>  print(i)</p>
<h2 id="跳转-语句"><a href="#跳转-语句" class="headerlink" title="*跳转**语句*"></a><em><strong>*跳转*</strong></em><em><strong>*语句*</strong></em></h2><h3 id="break-语句"><a href="#break-语句" class="headerlink" title="*break 语句*"></a><em><strong>*break 语句*</strong></em></h3><p>作用:</p>
<p>\1. 跳出循环体，后面的代码不再执行。</p>
<p>\2. 可以让while语句的else部分不执行。</p>
<h3 id="continue-语句"><a href="#continue-语句" class="headerlink" title="*continue 语句*"></a><em><strong>*continue 语句*</strong></em></h3><pre><code> 作用: 跳过本次，继续下次循环。
</code></pre>
<h1 id="容器-类型"><a href="#容器-类型" class="headerlink" title="*容器**类型*"></a><em><strong>*容器*</strong></em><em><strong>*类型*</strong></em></h1><h2 id="通用操作"><a href="#通用操作" class="headerlink" title="*通用操作*"></a><em><strong>*通用操作*</strong></em></h2><h3 id="数学运算符"><a href="#数学运算符" class="headerlink" title="*数学运算符*"></a><em><strong>*数学运算符*</strong></em></h3><p>+：用于拼接两个容器</p>
<p>+&#x3D;：用原容器与右侧容器拼接,并重新绑定变量</p>
<p>*：重复生成容器元素</p>
<p>*&#x3D;：用原容器生成重复元素, 并重新绑定变量</p>
<p>&lt; &lt;&#x3D; &gt; &gt;&#x3D; &#x3D;&#x3D; !&#x3D;：依次比较两个容器中元素,一但不同则返回比较结果。 </p>
<h3 id="成员运算符"><a href="#成员运算符" class="headerlink" title="*成员运算符*"></a><em><strong>*成员运算符*</strong></em></h3><p>语法：</p>
<p>​	 数据 in 序列</p>
<p>数据 not in 序列</p>
<p>作用：</p>
<p>​	 如果在指定的序列中找到值，返回bool类型。</p>
<h3 id="索引-index"><a href="#索引-index" class="headerlink" title="*索引**index*"></a><em><strong>*索引*</strong></em><em><strong>*index*</strong></em></h3><p>\1. 作用：访问容器元素</p>
<p>\2. 语法：容器[整数]</p>
<p>\3. 说明：</p>
<p>正向索引从0开始，第二个索引为1，最后一个为len(s)-1</p>
<p>反向索引是从-1开始,-1代表最后一个,-2代表倒数第二个,以此类推。第一个是-len(s)</p>
<h3 id="切片slice"><a href="#切片slice" class="headerlink" title="*切片slice*"></a><em><strong>*切片slice*</strong></em></h3><p>\1. 作用：从容器中取出相应的元素重新组成一个容器。</p>
<p>\2. 语法：容器[(开始索引):(结束索引)(:(步长))]</p>
<p>小括号()括起的部分代表可省略</p>
<p>\3. 说明：</p>
<p>结束索引不包含该位置元素</p>
<p>步长是切片每次获取完当前元素后移动的偏移量</p>
<h3 id="内建-函数"><a href="#内建-函数" class="headerlink" title="*内建**函数*"></a><em><strong>*内建*</strong></em><em><strong>*函数*</strong></em></h3><p>  len(x)  返回序列的长度</p>
<p>  max(x)  返回序列的最大值元素</p>
<p>  min(x)  返回序列的最小值元素</p>
<p>  sum(x)  返回序列中所有元素的和(元素必须是数值类型)</p>
<h2 id="字符串-str"><a href="#字符串-str" class="headerlink" title="*字符串 str*"></a><em><strong>*字符串 str*</strong></em></h2><h3 id="定义"><a href="#定义" class="headerlink" title="*定义*"></a><em><strong>*定义*</strong></em></h3><p>由一系列字符组成的不可变序列容器，存储的是字符的编码值。</p>
<h3 id="编码"><a href="#编码" class="headerlink" title="*编码*"></a><em><strong>*编码*</strong></em></h3><p>字节byte：计算机最小存储单位，等于8 位bit.</p>
<p>字符：单个的数字，文字与符号。</p>
<p>字符集(码表)：存储字符与二进制序列的对应关系。</p>
<p>编码：将字符转换为对应的二进制序列的过程。</p>
<p>解码：将二进制序列转换为对应的字符的过程。</p>
<p>编码方式：</p>
<p>  \1. ASCII编码：包含英文、数字等字符，每个字符1个字节。</p>
<p>  \2. GBK编码：兼容ASCII编码，包含21003个中文；英文1个字节，汉字2个字节。</p>
<p>  \3. Unicode字符集：国际统一编码，旧字符集每个字符2字节，新字符集每个字符4字节。</p>
<p>  \4. UTF-8编码：Unicode的存储与传输方式，英文1字节，中文3字节。<img src="https://gitee.com/lichaikui/picture/raw/master/tupian/wps85CE.tmp.png" alt="img"></p>
<h4 id="name-x3D-“悟空”"><a href="#name-x3D-“悟空”" class="headerlink" title="*name &#x3D; “悟空”*"></a><em><strong>*name &#x3D; “悟空”*</strong></em></h4><h4 id="name-x3D-“孙悟空”"><a href="#name-x3D-“孙悟空”" class="headerlink" title="*name &#x3D; “孙悟空”*"></a><em><strong>*name &#x3D; “孙悟空”*</strong></em></h4><h4 id="print-name-不是将字符串”悟空”-改变为”孙悟空”"><a href="#print-name-不是将字符串”悟空”-改变为”孙悟空”" class="headerlink" title="*print(name) # 不是将字符串”悟空” 改变为”孙悟空”*"></a><em><strong>*print(name) # 不是将字符串”悟空” 改变为”孙悟空”*</strong></em></h4><h4 id="而是创建了新字符串对象”孙悟空”-替换变量name中存储的地址"><a href="#而是创建了新字符串对象”孙悟空”-替换变量name中存储的地址" class="headerlink" title="*#而是创建了新字符串对象”孙悟空”,替换变量name中存储的地址*"></a><em><strong>*#而是创建了新字符串对象”孙悟空”,替换变量name中存储的地址*</strong></em><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/wps85CF.tmp.jpg" alt="img"></h4><h4 id="相关函数"><a href="#相关函数" class="headerlink" title="*相关函数*"></a><em><strong>*相关函数*</strong></em></h4><h4 id="b-in-整数-将整数-转换为二进制字符串"><a href="#b-in-整数-将整数-转换为二进制字符串" class="headerlink" title="*b**in(整数)* *:**将整数**转换为二进制字符串*"></a><em><strong>*b*</strong></em><em><strong>*in(整数)*</strong></em> <em><strong>*:*</strong></em><em><strong>*将整数*</strong></em><em><strong>*转换为二进制字符串*</strong></em></h4><h4 id="ord-字符串-返回该-字符串-的U-nicode-码"><a href="#ord-字符串-返回该-字符串-的U-nicode-码" class="headerlink" title="*ord(**字符串):返回该**字符串**的U**nicode**码*"></a><em><strong>*ord(*</strong></em><em><strong>*字符串):返回该*</strong></em><em><strong>*字符串*</strong></em><em><strong>*的U*</strong></em><em><strong>*nicode*</strong></em><em><strong>*码*</strong></em></h4><p>​	chr(整数):返回该整数对应的字符串</p>
<p># 字符 –&gt;  编码值</p>
<p>print(ord(“天”))</p>
<p># 编码值 –&gt; 字符</p>
<p>print(chr(97))</p>
<h3 id="字面值"><a href="#字面值" class="headerlink" title="*字面值*"></a><em><strong>*字面值*</strong></em></h3><h4 id="单引和双引号的区别"><a href="#单引和双引号的区别" class="headerlink" title="*单引和双引号的区别*"></a><em><strong>*单引和双引号的区别*</strong></em></h4><p>单引号内的双引号不算结束符</p>
<p>双引号内的单引号不算结束符</p>
<h4 id="三引号作用"><a href="#三引号作用" class="headerlink" title="*三引号作用*"></a><em><strong>*三引号作用*</strong></em></h4><p>换行会自动转换为换行符\n</p>
<p>三引号内可以包含单引号和双引号</p>
<p>作为文档字符串</p>
<p>单引号与双引号功能相同</p>
<p>str01 &#x3D; “大家好”</p>
<p>str01 &#x3D; ‘大家好’</p>
<p># 三引号:可见即所得</p>
<p>str01 &#x3D; ‘’’大</p>
<p>家</p>
<p>好</p>
<p>‘’’</p>
<p>str01 &#x3D; “””大家好”””</p>
<p>str02 &#x3D; ‘我爱”python”.’</p>
<p>str02 &#x3D; “我爱’python’.”</p>
<p>print(str02)</p>
<h4 id="转义字符"><a href="#转义字符" class="headerlink" title="*转义字符*"></a><em><strong>*转义字符*</strong></em></h4><p>改变字符的原始含义。</p>
<p>\’  \”  \”””  \n  \  \t  \0 空字符 </p>
<p>原始字符串：取消转义。</p>
<p>​	a &#x3D; r”C:\newfile\test.py”</p>
<p>转义符:改变原始含义的特殊字符</p>
<p># 如果字符串内部,需要包含多种(单&#x2F;双&#x2F;三)引号,使用转义符.</p>
<p>str03 &#x3D; “我爱&quot;p’yt&quot;&quot;&quot;hon&quot;“</p>
<p>print(str03)</p>
<p># \n 换行</p>
<p>str04 &#x3D; “大家好,\n我是QTX.”</p>
<p>print(str04)</p>
<p># \t 水平制表格 tab 键</p>
<p>str04 &#x3D; “大家好,\t我是QTX.”</p>
<p>print(str04)</p>
<p>str04 &#x3D; “C:\arogram Files\breative\chareDLL\dADI”</p>
<p>print(str04)</p>
<h4 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="*字符串格式化*"></a><em><strong>*字符串格式化*</strong></em></h4><p>\1. 定义：生成一定格式的字符串。</p>
<p>\2. 语法：字符串%(变量)</p>
<p>“我的名字是%s,年龄是%s” % (name, age)</p>
<p>\3. 类型码：%s 字符串   %d整数   %f 浮点数</p>
<p>\4. 格式：%[- + 0 宽度.精度]类型码</p>
<p> -  : 左对齐(默认是右对齐)</p>
<p> +  : 显示正号</p>
<p> 0  : 左侧空白位置补零</p>
<p> 宽度 : 整个数据输出的宽度</p>
<p> 精度 : 保留小数点后多少位</p>
<p># 格式化字符串</p>
<p>name &#x3D; “qtx”</p>
<p>age &#x3D; 32</p>
<p># 字符串拼接,如果格式复杂,代码可读性比较差.</p>
<p>msg01 &#x3D; “我的名字是:” + name + “,年龄是:” + str(age) + “.”</p>
<p>#</p>
<p>msg02 &#x3D; “我的名字是:%s,年龄是:%d.” % (name, age)</p>
<p>print(msg01)</p>
<p>print(msg02)</p>
<p># 宽度是5  右对齐</p>
<p>str05 &#x3D; “整数是:%5d.”%(32) #整数是:  32.</p>
<p># 宽度是5  左对齐</p>
<p>str05 &#x3D; “整数是:%-5d.”%(32) #整数是:32  .</p>
<p># 宽度是2  不足2位使用0填充</p>
<p>str05 &#x3D; “时间:%02d.”%(2) #时间:02.</p>
<p># 02:00  01:59   01:09</p>
<p>str05 &#x3D; “小数:%.2f,”%(1.23556) #小数:1.23.</p>
<p># round(1.234,2)  是改变数值</p>
<p>num &#x3D; 1.234</p>
<p>num &#x3D; round(num,2)</p>
<p>print(str05)</p>
<h2 id="列表-list"><a href="#列表-list" class="headerlink" title="*列表 list*"></a><em><strong>*列表 list*</strong></em></h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="*定义*"></a><em><strong>*定义*</strong></em><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/wps85D0.tmp.png" alt="img"><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/wps85D1.tmp.png" alt="img"></h3><p>由一系列变量组成的可变序列容器。<img src="https://gitee.com/lichaikui/picture/raw/master/tupian/wps85D2.tmp.png" alt="img"><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/wps85D3.tmp.png" alt="img"><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/wps85E4.tmp.png" alt="img"></p>
<h3 id="基础操作"><a href="#基础操作" class="headerlink" title="*基础操作*"></a><em><strong>*基础操作*</strong></em></h3><p>创建列表：[] list(可迭代对象)</p>
<p>添加元素：insert</p>
<p>获取元素：索引</p>
<p>删除元素：remove</p>
<h3 id="深拷贝-和浅拷贝"><a href="#深拷贝-和浅拷贝" class="headerlink" title="*深拷贝**和浅拷贝*"></a><em><strong>*深拷贝*</strong></em><em><strong>*和浅拷贝*</strong></em></h3><p>浅拷贝：是在复制过程中,只复制一层变量,不会复制深层变量绑定的对象的复制过程。</p>
<p>深拷贝：复制整个依懒的变量。</p>
<h3 id="列表V-S-字符串"><a href="#列表V-S-字符串" class="headerlink" title="*列表V**S**字符串*"></a><em><strong>*列表V*</strong></em><em><strong>*S*</strong></em><em><strong>*字符串*</strong></em></h3><p> \1. 列表和字符串都是序列,元素之间有先后顺序关系。</p>
<p> \2. 字符串是不可变的序列,列表是可变的序列。</p>
<p> \3. 字符串中每个元素只能存储字符,而列表可以存储任意类型。</p>
<p> \4. 列表和字符串都是可迭代对象。</p>
<pre><code> 5. 函数：
</code></pre>
<p>将多个字符串拼接为一个。</p>
<p>result &#x3D; “连接符”.join(列表)</p>
<p>将一个字符串拆分为多个。</p>
<p>列表 &#x3D; “a-b-c-d”.split(“分隔符”)</p>
<h3 id="列表推导式"><a href="#列表推导式" class="headerlink" title="*列表推导式*"></a><em><strong>*列表推导式*</strong></em></h3><p>\1. 定义：使用简易方法，将可迭代对象转换为列表。</p>
<p>\2. 语法：</p>
<p>变量 &#x3D; [表达式 for 变量 in 可迭代对象]</p>
<p>变量 &#x3D; [表达式 for 变量 in 可迭代对象 if 条件]</p>
<p>\3. 说明:如果if真值表达式的布尔值为False,则可迭代对象生成的数据将被丢弃。</p>
<p>list01 &#x3D; [3,5,6,7,9]</p>
<p># 需求：创建新列表，每个元素是list01中的元素的平方</p>
<p>list02 &#x3D; []</p>
<p>for item in list01:</p>
<p>  list02.append(item ** 2)</p>
<p>print(list02)</p>
<p># 语法：[对变量的操作　for 变量名　in 可迭代对象]</p>
<p>list03 &#x3D; [item ** 2 for item in list01]</p>
<p>list01 &#x3D; [3,5,6,7,9]</p>
<p># 需求：创建新列表，如果元素是偶数，则将每个元素的元素的平方存入新列表</p>
<p>list02 &#x3D; []</p>
<p>for item in list01:</p>
<p>  if item % 2 &#x3D;&#x3D; 0:</p>
<p>​    list02.append(item ** 2)</p>
<p>list03 &#x3D; [item ** 2 for item in list01 if item % 2 &#x3D;&#x3D; 0]</p>
<p>print(list03)</p>
<h3 id="列表推导式嵌套"><a href="#列表推导式嵌套" class="headerlink" title="*列表推导式嵌套*"></a><em><strong>*列表推导式嵌套*</strong></em></h3><p>\1. 传统写法：</p>
<p>result &#x3D; []</p>
<p>for r in  [“a”, “b”, “c”]:</p>
<p>  for c in [“A”, “B”, “C”]:</p>
<p>​    result.append(r + c)</p>
<p>\2. 推导式写法：</p>
<p>result &#x3D; [r + c for r in list01 for c in list02]</p>
<p>\3. 语法：</p>
<p>[表达式 for 变量1 in 可迭代对象1 for 变量2 in可迭代对象2]</p>
<h2 id="元组-tuple"><a href="#元组-tuple" class="headerlink" title="*元组* *tuple*"></a><em><strong>*元组*</strong></em> <em><strong>*tuple*</strong></em></h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="*定义*"></a><em><strong>*定义*</strong></em><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/wps85E5.tmp.png" alt="img"></h3><p>由一系列变量组成的不可变序列容器。 </p>
<p>  不可变是指一但创建，不可以再添加&#x2F;删除&#x2F;修改元素。  </p>
<h3 id="基础操作-1"><a href="#基础操作-1" class="headerlink" title="*基础操作*"></a><em><strong>*基础操作*</strong></em></h3><p>创建空元组：() tuple()</p>
<p>创建非空元组 t &#x3D; (20,)</p>
<p>  t &#x3D; (1, 2, 3)</p>
<p>  t &#x3D; 100,200,300</p>
<p>tuple(可迭代对象)</p>
<p>获取元素：索引</p>
<p># 1. 创建空元组</p>
<p>t01 &#x3D; ()</p>
<p>t02 &#x3D; tuple()</p>
<p># 2. 创建具有默认值的元组</p>
<p>t01 &#x3D; (1,2,3)</p>
<p>t01 &#x3D; tuple(“abcd”)</p>
<p>t01 &#x3D; (1,2,[4,5])</p>
<p>print(t01)</p>
<p># 修改</p>
<p># t01[2] &#x3D; 100  元组元素不能修改</p>
<p>t01[2][0] &#x3D; 100 # 修改的是元素第三个元素(列表)的元素．</p>
<p># 3. 获取元素(索引　／　切片)</p>
<p>print(t01[:2])</p>
<p># 获取元组所有元素</p>
<p>for item in t01:</p>
<p>  print(item)</p>
<p># 倒序获取元组所有元素</p>
<p>for i in range(len(t01)-1, -1,-1):</p>
<p>  print(t01[i])</p>
<p>t02 &#x3D; (“a”,”b”)</p>
<p>l02 &#x3D; [“a”,”b”]</p>
<p>t03 &#x3D; t02</p>
<p>l03 &#x3D; l02</p>
<p>t02 +&#x3D; (“c”,”d”) # 创建了新元组对象，改变了t02存储的地址．</p>
<p>l02 +&#x3D; [“c”,”d”] # 将[“c”,”d”]追加到原列表中．</p>
<p>print(t02) # (‘a’, ‘b’, ‘c’, ‘d’)</p>
<p>print(t03) # (‘a’, ‘b’)</p>
<p>print(l03) # [‘a’, ‘b’, ‘c’, ‘d’]</p>
<p># 如果元组只有一个元素，必须多写一个逗号，否则视为普通对象，不是元组对象．</p>
<p>t04 &#x3D; (1,)</p>
<p>print(t04)</p>
<h3 id="作用"><a href="#作用" class="headerlink" title="*作用*"></a><em><strong>*作用*</strong></em></h3><p>元组与列表都可以存储一系列变量，由于列表会预留内存空间，所以可以增加元素。</p>
<p>元组会按需分配内存，所以如果变量数量固定，建议使用元组，因为通常占用空间更小。</p>
<p>应用：</p>
<p>变量交换的本质就是创建元组：x, y &#x3D; y, x </p>
<p>格式化字符串的本质就是创建元祖：”姓名:%s, 年龄:%d”  % (“tarena”, 15)</p>
<h2 id="字典-dict"><a href="#字典-dict" class="headerlink" title="*字典* *dict*"></a><em><strong>*字典*</strong></em> <em><strong>*dict*</strong></em></h2><h3 id="定义-3"><a href="#定义-3" class="headerlink" title="*定义*"></a><em><strong>*定义*</strong></em><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/wps85E6.tmp.png" alt="img"></h3><p>由一系列键值对组成的可变映射容器。</p>
<p>映射：通过键获取值(字符串&#x2F;列表&#x2F;元组通过索引)，每条记录无序。</p>
<p>键必须惟一且不可变(字符串&#x2F;数字&#x2F;元组)，值没有限制。</p>
<h3 id="基础操作-2"><a href="#基础操作-2" class="headerlink" title="*基础操作*"></a><em><strong>*基础操作*</strong></em></h3><p>创建字典：{键1：值1，键2：值2}   dict (可迭代对象) </p>
<p>添加&#x2F;修改元素：</p>
<p>语法:</p>
<p>  字典[键] &#x3D; 数据</p>
<p>说明:</p>
<p>  键不存在,创建键,并绑定键对应的值。</p>
<p>  键存在,修改绑的绑定关系。</p>
<p>获取元素：v &#x3D; 字典[键] # 没有键则错误</p>
<p>删除元素：del 字典[键]</p>
<p># 创建空字典</p>
<p>d01 &#x3D; {}</p>
<p>d02 &#x3D; dict()</p>
<p>d01 &#x3D; {“a”:”A”,”b”:”B”}</p>
<p># d01 &#x3D; dict(“ab”) # 分不清key  value</p>
<p>d01 &#x3D; dict([(1,2),(3,4)]) # {1: 2, 3: 4}</p>
<p>#　第一次增加</p>
<p>d01[“c”] &#x3D; “C”</p>
<p>#　第二次修改</p>
<p>d01[“c”] &#x3D; “CC”</p>
<p># 读取元素(如果不存在则异常)</p>
<p># 建议：在字典中读取元素，先判断存在，在进行读取．</p>
<p>if “d” in d01:</p>
<p>  print(d01[“d”])</p>
<p>print(d01)</p>
<p># 删除</p>
<p>del d01[“c”]</p>
<p>print(d01)</p>
<p># 获取字典中所有元素：</p>
<p>for key in d01:</p>
<p>  print(key)</p>
<p>  print(d01[key])</p>
<p># 获取字典中所有记录(元组)</p>
<p>for item in d01.items():</p>
<p>  print(item[0]) # ｋｅｙ</p>
<p>  print(item[1]) # value</p>
<p>for k,v in d01.items():</p>
<p>  print(k) # ｋｅｙ</p>
<p>  print(v) # value</p>
<p># 获取所有键</p>
<p>for k in d01.keys():</p>
<p>  print(k)</p>
<p># 获取所有值</p>
<p>for v in d01.values():</p>
<p>  print(v)</p>
<h3 id="字典推导式"><a href="#字典推导式" class="headerlink" title="*字典推导式*"></a><em><strong>*字典推导式*</strong></em></h3><p>定义：使用简易方法，将可迭代对象转换为字典。</p>
<pre><code> 语法:
</code></pre>
<p>{键:值 for 变量 in 可迭代对象}</p>
<p>​     {键:值 for 变量 in 可迭代对象 if 条件}</p>
<p>ｋｅｙ：数字　　　ｖａｌｕｅ：数字平方</p>
<p># dic01 &#x3D; {}</p>
<p># for item in range(1,10):</p>
<p>#   dic01[item] &#x3D; item ** 2</p>
<p>#</p>
<p># print(dic01)</p>
<p>#</p>
<p># dic01 &#x3D; {item:item ** 2 for item in range(1,10)}</p>
<p>dic01 &#x3D; {}</p>
<p>for item in range(1, 10):</p>
<p>  if item % 2 &#x3D;&#x3D; 0:</p>
<p>​    dic01[item] &#x3D; item ** 2</p>
<p>dic01 &#x3D; {item: item ** 2 for item in range(1, 10) if item % 2 &#x3D;&#x3D; 0}</p>
<p>print(dic01)</p>
<h3 id="字典-VS-列表"><a href="#字典-VS-列表" class="headerlink" title="*字典* *VS 列表*"></a><em><strong>*字典*</strong></em> <em><strong>*VS 列表*</strong></em></h3><p> \1. 都是可变容器。</p>
<p> \2. 获取元素方式不同,列表用索引,字典用键。</p>
<p> \3. 字典的插入,删除,修改的速度快于列表。</p>
<p> \4. 列表的存储是有序的,字典的存储是无序的。</p>
<h2 id="集合-set"><a href="#集合-set" class="headerlink" title="*集合* *set*"></a><em><strong>*集合*</strong></em> <em><strong>*set*</strong></em></h2><h3 id="定义-4"><a href="#定义-4" class="headerlink" title="*定义*"></a><em><strong>*定义*</strong></em></h3><p>由一系列不重复的不可变类型变量组成的可变映射容器。</p>
<p>相当于只有键没有值的字典(键则是集合的数据)。</p>
<h3 id="基础操作-3"><a href="#基础操作-3" class="headerlink" title="*基础操作*"></a><em><strong>*基础操作*</strong></em></h3><p>创建空集合： set()  set(可迭代对象)</p>
<p>创建具有默认值集合：{1, 2, 3}  set(可迭代对象)</p>
<p>添加元素：add</p>
<p>删除元素：discard</p>
<h3 id="运算"><a href="#运算" class="headerlink" title="*运算*"></a><em><strong>*运算*</strong></em></h3><p> 交集&amp;, 并集|, 补集-, 对称补集^, 子集&lt;  超集&gt;</p>
<p>&amp; 生成两个集合的交集 返回共同元素</p>
<p> s1 &#x3D; {1, 2, 3}</p>
<p> s2 &#x3D; {2, 3, 4}</p>
<p> s3 &#x3D; s1 &amp; s2  # s3 &#x3D; {2, 3}</p>
<p>| 生成两个集合的并集 返回所有不重复元素</p>
<p> s1 &#x3D; {1, 2, 3}</p>
<p> s2 &#x3D; {2, 3, 4}</p>
<p> s3 &#x3D; s1 | s2  # s3 &#x3D; {1, 2, 3, 4}</p>
<p>- 生成两个集合的补集  返回只属于其中之一的元素</p>
<p> s1 &#x3D; {1, 2, 3}</p>
<p> s2 &#x3D; {2, 3, 4}</p>
<p> s1 - s2  # {1}, 生成属于s1,但不属于s2的所有元素的集合</p>
<p>^ 生成两个集合的对称补集 返回不同的的元素</p>
<p> s1 &#x3D; {1, 2, 3}</p>
<p> s2 &#x3D; {2, 3, 4}</p>
<p> s3 &#x3D; s1 ^ s2  # {1, 4} # 等同于(s1-s2 | s2-s1)</p>
<p>&lt; 判断一个集合是另一个集合的子集</p>
<p>&gt; 判断一个集合是另一个集合的超集</p>
<p> s1 &#x3D; {1, 2, 3}</p>
<p> s2 &#x3D; {2, 3}</p>
<p> s1 &gt; s2  # True</p>
<p> s2 &lt; s1  # True</p>
<p>&#x3D;&#x3D; !&#x3D; 集合相同或不同</p>
<p> s1 &#x3D; {1, 2, 3}</p>
<p> s2 &#x3D; {3, 2, 1}</p>
<p> s1 &#x3D;&#x3D; s2  # True</p>
<p> s1 !&#x3D; s2  # False</p>
<p>&lt;&#x3D;  &gt;&#x3D; 子集或相同,超集或相同</p>
<h3 id="集合推导式"><a href="#集合推导式" class="headerlink" title="*集合推导式*"></a><em><strong>*集合推导式*</strong></em></h3><p> 定义：使用简易方法，将可迭代对象转换为集合。</p>
<pre><code>  语法:
</code></pre>
<p>{表达式 for 变量 in 可迭代对象}</p>
<p>​     {表达式 for 变量 in 可迭代对象 if 条件}</p>
<h2 id="固定集合-frozenset"><a href="#固定集合-frozenset" class="headerlink" title="*固定集合 frozenset*"></a><em><strong>*固定集合 frozenset*</strong></em></h2><h3 id="定义-5"><a href="#定义-5" class="headerlink" title="*定义*"></a><em><strong>*定义*</strong></em></h3><p>不可变的集合。</p>
<h4 id="作用-1"><a href="#作用-1" class="headerlink" title="*作用*"></a><em><strong>*作用*</strong></em></h4><p>固定集合可以作为字典的键,还可以作为集合的值。</p>
<h4 id="基础操作-4"><a href="#基础操作-4" class="headerlink" title="*基础操作*"></a><em><strong>*基础操作*</strong></em></h4><p> 创建固定集合：frozenset(可迭代对象)</p>
<h4 id="运算-1"><a href="#运算-1" class="headerlink" title="*运算*"></a><em><strong>*运算*</strong></em></h4><p>等同于set</p>
<h1 id="函数-function"><a href="#函数-function" class="headerlink" title="函数 function"></a>函数 function</h1><h2 id="pycharm相关设置"><a href="#pycharm相关设置" class="headerlink" title="*pycharm相关设置*"></a><em><strong>*pycharm相关设置*</strong></em></h2><p>\1. “代码自动完成”时间延时设置</p>
<p>  File -&gt; Settings  -&gt; Editor -&gt; General -&gt; Code Completion</p>
<p>  -&gt; Autopopup in (ms):0</p>
<p>\2. 快捷键：</p>
<p>Ctrl + P  参数信息（在方法中调用参数）</p>
<p>Ctrl + Q  快速查看文档</p>
<p>Ctrl + Alt + M提取方法</p>
<h2 id="定义-6"><a href="#定义-6" class="headerlink" title="*定义*"></a><em><strong>*定义*</strong></em></h2><p>用于封装一个特定的功能，表示一个功能或者行为。</p>
<p>函数是可以重复执行的语句块, 可以重复调用。</p>
<h2 id="作用-2"><a href="#作用-2" class="headerlink" title="*作用*"></a><em><strong>*作用*</strong></em></h2><p>提高代码的可重用性和可维护性（代码层次结构更清晰）。</p>
<h2 id="定义函数"><a href="#定义函数" class="headerlink" title="*定义函数*"></a><em><strong>*定义函数*</strong></em></h2><p>\1. 语法：</p>
<p>def 函数名(形式参数):</p>
<p>   函数体</p>
<p>\2. 说明：</p>
<p>– def 关键字：全称是define，意为”定义”。</p>
<p>– 函数名：对函数体中语句的描述，规则与变量名相同。</p>
<p>– 形式参数：方法定义者要求调用者提供的信息。</p>
<p>– 函数体：完成该功能的语句。</p>
<p>\3. 函数的第一行语句可以选择性地使用文档字符串存放函数与参数的说明。</p>
<h2 id="调用函数"><a href="#调用函数" class="headerlink" title="*调用函数*"></a><em><strong>*调用函数*</strong></em></h2><p>\1. 语法：函数名(实际参数) </p>
<p>\2. 说明：根据形参传递内容。</p>
<h2 id="返回值"><a href="#返回值" class="headerlink" title="*返回值*"></a><em><strong>*返回值*</strong></em></h2><p>\1. 定义：方法定义者告诉调用者的结果。</p>
<p>\2. 语法：return [表达式] </p>
<p>\3. 说明：</p>
<p>– 表达式就是需要返回的结果。</p>
<p>– 不带表达式的return相当于返回 None。</p>
<p>– 不带return语句，函数执行完后返回None</p>
<p>(相当于在最后加了一条return None语句)</p>
<h2 id="可变／不可变类型在传参时的区别"><a href="#可变／不可变类型在传参时的区别" class="headerlink" title="可变／不可变类型在传参时的区别"></a>可变／不可变类型在传参时的区别</h2><p>\1. 不可变类型参数有:</p>
<p>数值型(整数，浮点数,复数)</p>
<p>布尔值bool</p>
<p>None 空值</p>
<p>字符串str</p>
<p>元组tuple</p>
<p>固定集合frozenset</p>
<p>\2. 可变类型参数有:</p>
<p>列表 list</p>
<p>字典 dict</p>
<p>集合 set</p>
<p>字节数组 bytearray</p>
<p>\3. 传参说明：</p>
<p>不可变类型的数据传参时，函数内部不会改变原数据的值。</p>
<p>可变类型的数据传参时，函数内部可以改变原数据。</p>
<h2 id="函数参数"><a href="#函数参数" class="headerlink" title="*函数参数*"></a><em><strong>*函数参数*</strong></em></h2><h3 id="实参传递方式-argument"><a href="#实参传递方式-argument" class="headerlink" title="*实参传递方式**argument*"></a><em><strong>*实参传递方式*</strong></em><em><strong>*argument*</strong></em></h3><h4 id="位置传参"><a href="#位置传参" class="headerlink" title="*位置传参*"></a><em><strong>*位置传参*</strong></em></h4><p>定义：实参与形参的位置依次对应。</p>
<h5 id="序列传参"><a href="#序列传参" class="headerlink" title="*序列传参*"></a><em><strong>*序列传参*</strong></em></h5><p>定义：实参用*将序列拆解后与形参的位置依次对应。</p>
<h4 id="关键字传参"><a href="#关键字传参" class="headerlink" title="*关键字传参*"></a><em><strong>*关键字传参*</strong></em></h4><p>定义：实参根据形参的名字进行对应。</p>
<h5 id="字典关键字传参"><a href="#字典关键字传参" class="headerlink" title="*字典关键字传参*"></a><em><strong>*字典关键字传参*</strong></em></h5><p>\1. 定义：实参用**将字典拆解后与形参的名字进行对应。</p>
<p>\2. 作用：配合形参的缺省参数，可以使调用者随意传参。</p>
<h3 id="形参定义方式-parameter"><a href="#形参定义方式-parameter" class="headerlink" title="*形参定义方式**parameter*"></a><em><strong>*形参定义方式*</strong></em><em><strong>*parameter*</strong></em></h3><h4 id="缺省参数"><a href="#缺省参数" class="headerlink" title="*缺省参数*"></a><em><strong>*缺省参数*</strong></em></h4><p>\1. 语法：</p>
<p>def 函数名(形参名1&#x3D;默认实参1, 形参名2&#x3D;默认实参2, …):</p>
<p>  函数体</p>
<p>\2. 说明：</p>
<p>– 缺省参数必须自右至左依次存在，如果一个参数有缺省参数，则其右侧的所有参数都必须有缺省参数。</p>
<p>– 缺省参数可以有0个或多个，甚至全部都有缺省参数。</p>
<h4 id="位置形参"><a href="#位置形参" class="headerlink" title="*位置形参*"></a><em><strong>*位置形参*</strong></em></h4><p>\1. 语法：</p>
<p>def 函数名(形参名1, 形参名2, …):</p>
<p>函数体</p>
<h5 id="星号元组形参"><a href="#星号元组形参" class="headerlink" title="*星号元组形参*"></a><em><strong>*星号元组形参*</strong></em></h5><p>\1. 语法：</p>
<p>def 函数名(*元组形参名):</p>
<p> 函数体</p>
<p>\2. 作用：收集多余的位置传参。</p>
<p>\3. 说明：</p>
<p>– 一般命名为’args’</p>
<p>– 形参列表中最多只能有一个</p>
<h4 id="命名关键字形参"><a href="#命名关键字形参" class="headerlink" title="*命名关键字形参*"></a><em><strong>*命名关键字形参*</strong></em></h4><p>\1. 语法：</p>
<p>def 函数名(*, 命名关键字形参1, 命名关键字形参2, …):</p>
<p>函数体</p>
<p>def 函数名(*args, 命名关键字形参1, 命名关键字形参2, …):<br>           函数体</p>
<p>\2. 作用：强制实参使用关键字传参</p>
<h5 id="双星号字典形参"><a href="#双星号字典形参" class="headerlink" title="*双星号字典形参*"></a><em><strong>*双星号字典形参*</strong></em></h5><p>\1. 语法：</p>
<p>def 函数名(**字典形参名):</p>
<p>  函数体</p>
<p>\2. 作用：收集多余的关键字传参</p>
<p>\3. 说明:</p>
<p>– 一般命名为’kwargs’</p>
<p>– 形参列表中最多只能有一个</p>
<h4 id="参数自左至右的顺序"><a href="#参数自左至右的顺序" class="headerlink" title="*参数自左至右的顺序*"></a><em><strong>*参数自左至右的顺序*</strong></em></h4><p>位置形参 –&gt; 星号元组形参 –&gt; 命名关键字形参 –&gt; 双星号字典形参</p>
<h1 id="作用域LEGB"><a href="#作用域LEGB" class="headerlink" title="*作用域LEGB*"></a><em><strong>*作用域LEGB*</strong></em></h1><p>\1. 作用域：变量起作用的范围。</p>
<p>\2. Local局部作用域：函数内部。</p>
<p>\3. Enclosing  外部嵌套作用域 ：函数嵌套。 </p>
<p>\4. Global全局作用域：模块(.py文件)内部。 </p>
<p>\5. Builtin内置模块作用域：builtins.py文件。</p>
<h2 id="变量名的查找规则"><a href="#变量名的查找规则" class="headerlink" title="*变量名的查找规则*"></a><em><strong>*变量名的查找规则*</strong></em></h2><p>由内到外：L -&gt; E -&gt; G -&gt; B</p>
<p>在访问变量时，先查找本地变量，然后是包裹此函数外部的函数内部的变量，之后是全局变量，最后是内置变量。</p>
<h2 id="局部变量"><a href="#局部变量" class="headerlink" title="*局部变量*"></a><em><strong>*局部变量*</strong></em></h2><p>定义在函数内部的变量(形参也是局部变量)</p>
<p>只能在函数内部使用</p>
<p>调用函数时才被创建，函数结束后自动销毁</p>
<h2 id="全局变量"><a href="#全局变量" class="headerlink" title="*全局变量*"></a><em><strong>*全局变量*</strong></em></h2><p>定义在函数外部,模块内部的变量。</p>
<p>在整个模块(py文件)范围内访问（但函数内不能将其直接赋值）。</p>
<h2 id="global-语句"><a href="#global-语句" class="headerlink" title="*global 语句*"></a><em><strong>*global 语句*</strong></em></h2><p>1． 作用：</p>
<p>– 在函数内部修改全局变量。</p>
<p>– 在函数内部定义全局变量(全局声明)。</p>
<p>2． 语法</p>
<p>global 变量1, 变量2, …</p>
<p>3． 说明</p>
<p>– 在函数内直接为全局变量赋值，视为创建新的局部变量。</p>
<p>– 不能先声明局部的变量，再用global声明为全局变量。</p>
<h2 id="nonlocal-语句"><a href="#nonlocal-语句" class="headerlink" title="*nonlocal 语句*"></a><em><strong>*nonlocal 语句*</strong></em></h2><p>\1. 作用：在内层函数修改外层嵌套函数内的变量</p>
<p>\2. 语法</p>
<p>nonlocal 变量名1,变量名2, …</p>
<p>\3. 说明</p>
<p>在被嵌套的内函数中进行使用</p>
]]></content>
      <categories>
        <category>python面对过程学习</category>
      </categories>
      <tags>
        <tag>python学习</tag>
      </tags>
  </entry>
  <entry>
    <title>1.python简介</title>
    <url>/2021/12/22/python%E9%9D%A2%E5%AF%B9%E8%BF%87%E7%A8%8B%E5%AD%A6%E4%B9%A0/1.python%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h2 id="一、Python"><a href="#一、Python" class="headerlink" title="一、Python"></a>一、Python</h2><p><strong>编译器对源代码翻译方式</strong></p>
<p>计算机不能直接理解任何除机器语言外的语言，所以必须把程序员所写的程序语言翻译成计算机语言，计算机才能正常执行。其他语言翻译成计算机语言的工具，被称为          <strong>编辑器</strong></p>
<p>1）、编译器            使用编译器编译的语言——编译型语言</p>
<p>   编译型语言  代表：c++</p>
<blockquote>
<p>c ++程序猿在自己的开发环境内编写代码，程序开发完成之后，程序员把开发完成的源代码统一交给编译器，编译器把源代码翻译成机器语言，并生成独立的可执行文件，需要执行时windows双击可执行文件图标，把文件交给CPU去执行</p>
<p><strong>统一编译 一次性执行     ：   编译型语言特点</strong></p>
</blockquote>
<p>2）、解释器             使用解释器解释的语言——解释型语言</p>
<p>​    解释型语言代表  ：   Python</p>
<blockquote>
<p>程序员仍然是在自己的开发环境内来编写代码，假设我们现在写了3行代码那这三行代码怎么运行呢？要想运行解释性语言我们呢就把这个原程序丢给解释器  解释器拿到原程序之后，会按照从上向下的方式逐一读取代码  注意解释器是一行一行来翻译的，解释器首先读出第一行代码 读出之后就立刻翻译成机器码，翻译完成之后呢就丢给 cpu 去执行，cpu 在执行的过程中，解释器再读取第二行代码进行翻译翻译完成之后再交给 cpu 去执行然后依次类推，从上到下依次读取每行代码读取一行 </p>
<p><strong>一行一行代码进行翻译   翻译一行  执行一行      ：   解释性语言特点</strong></p>
</blockquote>
<ul>
<li>两种语言执行速度对比：   编译型语言快</li>
</ul>
<blockquote>
<p>因为最终生成的可执行文件中 就是硬件识别的汲取言 在执行这个文件的时候  </p>
<p>没有任何翻译的动作cpu 可以很快的执行，不需要任何的介入</p>
<p>而解释性语言不同，解释性语言在执行的时候，必须是翻译一行，执行一行  </p>
</blockquote>
<ul>
<li>两种语言跨平台(一次编写，在任何一个平台上都能运行)能力对比：  解释型语言强</li>
</ul>
<blockquote>
<p>果我们使用了某一个操作系统的编译器，那么这个编译器最终，生成的可执行文件，就只能在这个操作系统上运行</p>
<p>解释性语言 程序员按照习惯的方式来编写代码，程序编写完成之后， 想要执行  在不同的操作系统上 安装不同的解释器</p>
</blockquote>
<h5 id="Python的设计目标"><a href="#Python的设计目标" class="headerlink" title="Python的设计目标"></a><strong>Python的设计目标</strong></h5><ul>
<li>一门简单直观的语言</li>
<li>开源</li>
<li>代码像纯英语那样容易理解</li>
<li>适用于短期开发的日常任务</li>
</ul>
<h5 id="Python的设计哲学"><a href="#Python的设计哲学" class="headerlink" title="Python的设计哲学"></a><strong>Python的设计哲学</strong></h5><ol>
<li>优雅</li>
<li>明确</li>
<li>简单</li>
</ol>
<ul>
<li>Python开发者的哲学是：用一种方法，最好只用一种方法来做一件事</li>
<li>如果面临多种选择，Python开发者一般会拒绝花俏的语法，选择明确没有或者很少有歧义的语法</li>
</ul>
<p>仁慈的独裁者——吉多</p>
<h2 id="二、为什么选择Python"><a href="#二、为什么选择Python" class="headerlink" title="二、为什么选择Python"></a>二、为什么选择Python</h2><ul>
<li>代码量少</li>
</ul>
<p>​       ————     <strong>人生苦短，我用Python</strong></p>
<h2 id="三、Python特点"><a href="#三、Python特点" class="headerlink" title="三、Python特点"></a><strong>三、Python特点</strong></h2><blockquote>
<p>结决问题的两种方式：</p>
<ol>
<li>亲力亲为</li>
<li>面向对象</li>
</ol>
<p>对象：   “谁”   ——找一个”谁”来替我们做这件事情（”谁”具有做这件事情的能力）</p>
<img src="https://gitee.com/lichaikui/picture/raw/master/tupian/image-20211113164718918.png" alt="image-20211113164718918" style="zoom:80%;" />
</blockquote>
<ul>
<li><p>python是完全面向对象的语言</p>
</li>
<li><p>python拥有一个强大的标准库<img src="https://gitee.com/lichaikui/picture/raw/master/tupian/image-20211113163934424.png" alt="image-20211113163934424"></p>
</li>
<li><p>python社区提供了大量第三方模块，使用方式与标准库类似，他们的功能覆盖  <strong>科学计算、人工智能、机器学习、web开发</strong></p>
</li>
</ul>
<h2 id="四、Python的优缺点"><a href="#四、Python的优缺点" class="headerlink" title="四、Python的优缺点"></a>四、Python的优缺点</h2><ol>
<li><p>优点</p>
<ul>
<li><p>简单易学</p>
</li>
<li><p>免费、开放</p>
</li>
<li><p>……….</p>
</li>
<li><p>可扩展性</p>
<ul>
<li>如果需要一段关键代码运行得更快或者希望某些算法不公开，可以把这部分程序用c或者c++编写，然后再Python程序中运行他们</li>
</ul>
</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>运行速度慢（解释型语言）</li>
<li>国内市场较小</li>
<li>追踪问资源库发</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>python面对过程学习</category>
      </categories>
      <tags>
        <tag>python学习</tag>
      </tags>
  </entry>
  <entry>
    <title>10.运算符</title>
    <url>/2021/12/23/python%E9%9D%A2%E5%AF%B9%E8%BF%87%E7%A8%8B%E5%AD%A6%E4%B9%A0/10.%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>算数运算符</li>
<li>比较（关系）运算符</li>
<li>逻辑运算符</li>
<li>赋值运算符</li>
<li>运算符的优先级</li>
</ul>
<p>数学符号表链接：<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7%E8%A1%A8">https://zh.wikipedia.org/wiki/数学符号表</a></p>
<h2 id="01-算数运算符"><a href="#01-算数运算符" class="headerlink" title="01. 算数运算符"></a>01. 算数运算符</h2><ul>
<li>是完成基本的算术运算使用的符号，用来处理四则运算</li>
</ul>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">+</td>
<td align="center">加</td>
<td>10 + 20 &#x3D; 30</td>
</tr>
<tr>
<td align="center">-</td>
<td align="center">减</td>
<td>10 - 20 &#x3D; -10</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">乘</td>
<td>10 * 20 &#x3D; 200</td>
</tr>
<tr>
<td align="center">&#x2F;</td>
<td align="center">除</td>
<td>10 &#x2F; 20 &#x3D; 0.5</td>
</tr>
<tr>
<td align="center">&#x2F;&#x2F;</td>
<td align="center">取整除</td>
<td>返回除法的整数部分（商） 9 &#x2F;&#x2F; 2 输出结果 4</td>
</tr>
<tr>
<td align="center">%</td>
<td align="center">取余数</td>
<td>返回除法的余数 9 % 2 &#x3D; 1</td>
</tr>
<tr>
<td align="center">**</td>
<td align="center">幂</td>
<td>又称次方、乘方，2 ** 3 &#x3D; 8</td>
</tr>
</tbody></table>
<ul>
<li>在 Python 中 <code>*</code> 运算符还可以用于字符串，计算结果就是字符串重复指定次数的结果</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="string">&quot;-&quot;</span> * <span class="number">50</span></span><br><span class="line">Out[<span class="number">1</span>]: <span class="string">&#x27;----------------------------------------&#x27;</span> </span><br></pre></td></tr></table></figure>

<h2 id="02-比较（关系）运算符"><a href="#02-比较（关系）运算符" class="headerlink" title="02. 比较（关系）运算符"></a>02. 比较（关系）运算符</h2><table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>&#x3D;&#x3D;</td>
<td>检查两个操作数的值是否 <strong>相等</strong>，如果是，则条件成立，返回 True</td>
</tr>
<tr>
<td>!&#x3D;</td>
<td>检查两个操作数的值是否 <strong>不相等</strong>，如果是，则条件成立，返回 True</td>
</tr>
<tr>
<td>&gt;</td>
<td>检查左操作数的值是否 <strong>大于</strong> 右操作数的值，如果是，则条件成立，返回 True</td>
</tr>
<tr>
<td>&lt;</td>
<td>检查左操作数的值是否 <strong>小于</strong> 右操作数的值，如果是，则条件成立，返回 True</td>
</tr>
<tr>
<td>&gt;&#x3D;</td>
<td>检查左操作数的值是否 <strong>大于或等于</strong> 右操作数的值，如果是，则条件成立，返回 True</td>
</tr>
<tr>
<td>&lt;&#x3D;</td>
<td>检查左操作数的值是否 <strong>小于或等于</strong> 右操作数的值，如果是，则条件成立，返回 True</td>
</tr>
</tbody></table>
<blockquote>
<p>Python 2.x 中判断 <strong>不等于</strong> 还可以使用 <code>&lt;&gt;</code> 运算符</p>
<p><code>!=</code> 在 Python 2.x 中同样可以用来判断 <strong>不等于</strong></p>
</blockquote>
<h2 id="03-逻辑运算符"><a href="#03-逻辑运算符" class="headerlink" title="03. 逻辑运算符"></a>03. 逻辑运算符</h2><table>
<thead>
<tr>
<th>运算符</th>
<th>逻辑表达式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>and</td>
<td>x and y</td>
<td>只有 x 和 y 的值都为 True，才会返回 True<br />否则只要 x 或者 y 有一个值为 False，就返回 False</td>
</tr>
<tr>
<td>or</td>
<td>x or y</td>
<td>只要 x 或者 y 有一个值为 True，就返回 True<br />只有 x 和 y 的值都为 False，才会返回 False</td>
</tr>
<tr>
<td>not</td>
<td>not x</td>
<td>如果 x 为 True，返回 False<br />如果 x 为 False，返回 True</td>
</tr>
</tbody></table>
<h2 id="04-赋值运算符"><a href="#04-赋值运算符" class="headerlink" title="04. 赋值运算符"></a>04. 赋值运算符</h2><ul>
<li>在 Python 中，使用 <code>=</code> 可以给变量赋值</li>
<li>在算术运算时，为了简化代码的编写，<code>Python</code> 还提供了一系列的 与 <strong>算术运算符</strong> 对应的 <strong>赋值运算符</strong></li>
<li>注意：<strong>赋值运算符中间不能使用空格</strong></li>
</ul>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>&#x3D;</td>
<td>简单的赋值运算符</td>
<td>c &#x3D; a + b 将 a + b 的运算结果赋值为 c</td>
</tr>
<tr>
<td>+&#x3D;</td>
<td>加法赋值运算符</td>
<td>c +&#x3D; a 等效于 c &#x3D; c + a</td>
</tr>
<tr>
<td>-&#x3D;</td>
<td>减法赋值运算符</td>
<td>c -&#x3D; a 等效于 c &#x3D; c - a</td>
</tr>
<tr>
<td>*&#x3D;</td>
<td>乘法赋值运算符</td>
<td>c *&#x3D; a 等效于 c &#x3D; c * a</td>
</tr>
<tr>
<td>&#x2F;&#x3D;</td>
<td>除法赋值运算符</td>
<td>c &#x2F;&#x3D; a 等效于 c &#x3D; c &#x2F; a</td>
</tr>
<tr>
<td>&#x2F;&#x2F;&#x3D;</td>
<td>取整除赋值运算符</td>
<td>c &#x2F;&#x2F;&#x3D; a 等效于 c &#x3D; c &#x2F;&#x2F; a</td>
</tr>
<tr>
<td>%&#x3D;</td>
<td>取 <strong>模</strong> (余数)赋值运算符</td>
<td>c %&#x3D; a 等效于 c &#x3D; c % a</td>
</tr>
<tr>
<td>**&#x3D;</td>
<td>幂赋值运算符</td>
<td>c **&#x3D; a 等效于 c &#x3D; c ** a</td>
</tr>
</tbody></table>
<h2 id="05-运算符的优先级"><a href="#05-运算符的优先级" class="headerlink" title="05. 运算符的优先级"></a>05. 运算符的优先级</h2><ul>
<li>以下表格的算数优先级由高到最低顺序排列</li>
</ul>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>**</td>
<td>幂 (最高优先级)</td>
</tr>
<tr>
<td>* &#x2F; % &#x2F;&#x2F;</td>
<td>乘、除、取余数、取整除</td>
</tr>
<tr>
<td>+ -</td>
<td>加法、减法</td>
</tr>
<tr>
<td>&lt;&#x3D; &lt; &gt; &gt;&#x3D;</td>
<td>比较运算符</td>
</tr>
<tr>
<td>&#x3D;&#x3D; !&#x3D;</td>
<td>等于运算符</td>
</tr>
<tr>
<td>&#x3D; %&#x3D; &#x2F;&#x3D; &#x2F;&#x2F;&#x3D; -&#x3D; +&#x3D; *&#x3D; **&#x3D;</td>
<td>赋值运算符</td>
</tr>
<tr>
<td>not or and</td>
<td>逻辑运算符</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>python面对过程学习</category>
      </categories>
      <tags>
        <tag>python学习</tag>
      </tags>
  </entry>
  <entry>
    <title>14_eval函数</title>
    <url>/2022/03/29/python%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E5%AD%A6%E4%B9%A0/14_eval%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="eval-函数"><a href="#eval-函数" class="headerlink" title="eval 函数"></a><code>eval</code> 函数</h1><p><code>eval()</code> 函数十分强大 —— <strong>将字符串</strong> 当成 <strong>有效的表达式</strong> 来求值 并 <strong>返回计算结果</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基本的数学计算</span></span><br><span class="line">In [<span class="number">1</span>]: <span class="built_in">eval</span>(<span class="string">&quot;1 + 1&quot;</span>)</span><br><span class="line">Out[<span class="number">1</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串重复</span></span><br><span class="line">In [<span class="number">2</span>]: <span class="built_in">eval</span>(<span class="string">&quot;&#x27;*&#x27; * 10&quot;</span>)</span><br><span class="line">Out[<span class="number">2</span>]: <span class="string">&#x27;**********&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将字符串转换成列表</span></span><br><span class="line">In [<span class="number">3</span>]: <span class="built_in">type</span>(<span class="built_in">eval</span>(<span class="string">&quot;[1, 2, 3, 4, 5]&quot;</span>))</span><br><span class="line">Out[<span class="number">3</span>]: <span class="built_in">list</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将字符串转换成字典</span></span><br><span class="line">In [<span class="number">4</span>]: <span class="built_in">type</span>(<span class="built_in">eval</span>(<span class="string">&quot;&#123;&#x27;name&#x27;: &#x27;xiaoming&#x27;, &#x27;age&#x27;: 18&#125;&quot;</span>))</span><br><span class="line">Out[<span class="number">4</span>]: <span class="built_in">dict</span></span><br></pre></td></tr></table></figure>

<h2 id="案例-计算器"><a href="#案例-计算器" class="headerlink" title="案例 - 计算器"></a>案例 - 计算器</h2><p><strong>需求</strong></p>
<ol>
<li>提示用户输入一个 <strong>加减乘除混合运算</strong></li>
<li>返回计算结果</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">input_str = <span class="built_in">input</span>(<span class="string">&quot;请输入一个算术题：&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(input_str))</span><br></pre></td></tr></table></figure>

<h2 id="不要滥用-eval"><a href="#不要滥用-eval" class="headerlink" title="不要滥用 eval"></a>不要滥用 <code>eval</code></h2><blockquote>
<p>在开发时千万不要使用 <code>eval</code> 直接转换 <code>input</code> 的结果</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;ls&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>等价代码</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.system(<span class="string">&quot;终端命令&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>执行成功，返回 0</li>
<li>执行失败，返回错误信息</li>
</ul>
]]></content>
      <categories>
        <category>python面对对象学习</category>
      </categories>
      <tags>
        <tag>python学习</tag>
      </tags>
  </entry>
  <entry>
    <title>13_文件</title>
    <url>/2022/03/28/python%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E5%AD%A6%E4%B9%A0/13_%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>文件的概念</li>
<li>文件的基本操作</li>
<li>文件&#x2F;文件夹的常用操作</li>
<li>文本文件的编码方式</li>
</ul>
<h2 id="01-文件的概念"><a href="#01-文件的概念" class="headerlink" title="01. 文件的概念"></a>01. 文件的概念</h2><h3 id="1-1-文件的概念和作用"><a href="#1-1-文件的概念和作用" class="headerlink" title="1.1 文件的概念和作用"></a>1.1 文件的概念和作用</h3><ul>
<li>计算机的 <strong>文件</strong>，就是存储在某种 <strong>长期储存设备</strong> 上的一段 <strong>数据</strong></li>
<li>长期存储设备包括：硬盘、U 盘、移动硬盘、光盘…</li>
</ul>
<p><strong>文件的作用</strong></p>
<p>将数据长期保存下来，在需要的时候使用</p>
<table>
<thead>
<tr>
<th align="center">CPU</th>
<th align="center">内存</th>
<th align="center">硬盘</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://s2.loli.net/2022/03/20/mPfM1KdjHq7pIW5.jpg" alt="CPU"  /></td>
<td align="center"><img src="/13_%E6%96%87%E4%BB%B6.assets/Ib9nYEGt2CsUpJ8.png" alt="内存条"></td>
<td align="center"><img src="https://s2.loli.net/2022/03/20/YGQUEsSxRftKba5.jpg" alt="硬盘"></td>
</tr>
</tbody></table>
<h3 id="1-2-文件的存储方式"><a href="#1-2-文件的存储方式" class="headerlink" title="1.2 文件的存储方式"></a>1.2 文件的存储方式</h3><ul>
<li>在计算机中，文件是以 <strong>二进制</strong> 的方式保存在磁盘上的</li>
</ul>
<h4 id="文本文件和二进制文件"><a href="#文本文件和二进制文件" class="headerlink" title="文本文件和二进制文件"></a>文本文件和二进制文件</h4><ul>
<li>文本文件<ul>
<li>可以使用 <strong>文本编辑软件</strong> 查看</li>
<li>本质上还是二进制文件</li>
<li>例如：python 的源程序</li>
</ul>
</li>
<li>二进制文件<ul>
<li>保存的内容 不是给人直接阅读的，而是 <strong>提供给其他软件使用的</strong></li>
<li>例如：图片文件、音频文件、视频文件等等</li>
<li>二进制文件不能使用 <strong>文本编辑软件</strong> 查看</li>
</ul>
</li>
</ul>
<h2 id="02-文件的基本操作"><a href="#02-文件的基本操作" class="headerlink" title="02. 文件的基本操作"></a>02. 文件的基本操作</h2><h3 id="2-1-操作文件的套路"><a href="#2-1-操作文件的套路" class="headerlink" title="2.1 操作文件的套路"></a>2.1 操作文件的套路</h3><p>在 <strong>计算机</strong> 中要操作文件的套路非常固定，一共包含<strong>三个步骤</strong>：</p>
<ol>
<li>打开文件</li>
<li>读、写文件<ul>
<li><strong>读</strong> 将文件内容读入内存</li>
<li><strong>写</strong> 将内存内容写入文件</li>
</ul>
</li>
<li>关闭文件</li>
</ol>
<h3 id="2-2-操作文件的函数-x2F-方法"><a href="#2-2-操作文件的函数-x2F-方法" class="headerlink" title="2.2 操作文件的函数&#x2F;方法"></a>2.2 操作文件的函数&#x2F;方法</h3><ul>
<li>在 <code>Python</code> 中要操作文件需要记住 1 个函数和 3 个方法</li>
</ul>
<table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">函数&#x2F;方法</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">01</td>
<td align="left">open</td>
<td align="left">打开文件，并且返回文件操作对象</td>
</tr>
<tr>
<td align="left">02</td>
<td align="left">read</td>
<td align="left">将文件内容读取到内存</td>
</tr>
<tr>
<td align="left">03</td>
<td align="left">write</td>
<td align="left">将指定内容写入文件</td>
</tr>
<tr>
<td align="left">04</td>
<td align="left">close</td>
<td align="left">关闭文件</td>
</tr>
</tbody></table>
<ul>
<li><code>open</code> 函数负责打开文件，并且返回文件对象</li>
<li><code>read</code>&#x2F;<code>write</code>&#x2F;<code>close</code> 三个方法都需要通过 <strong>文件对象</strong> 来调用</li>
</ul>
<h3 id="2-3-read-方法-——-读取文件"><a href="#2-3-read-方法-——-读取文件" class="headerlink" title="2.3 read 方法 —— 读取文件"></a>2.3 read 方法 —— 读取文件</h3><ul>
<li>open函数的第一个参数是要打开的文件名（文件名区分大小写）<ul>
<li>如果文件 <strong>存在</strong>，返回 <strong>文件操作对象</strong></li>
<li>如果文件 <strong>不存在</strong>，会 <strong>抛出异常</strong></li>
</ul>
</li>
<li><code>read</code> 方法可以一次性 <strong>读入</strong> 并 <strong>返回</strong> 文件的 <strong>所有内容</strong></li>
<li>close方法负责关闭文件<ul>
<li>如果 <strong>忘记关闭文件</strong>，<strong>会造成系统资源消耗，而且会影响到后续对文件的访问</strong></li>
</ul>
</li>
<li><strong>注意</strong>：<code>read</code> 方法执行后，会把 <strong>文件指针</strong> 移动到 <strong>文件的末尾</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 打开 - 文件名需要注意大小写</span></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;README&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 读取</span></span><br><span class="line">text = file.read()</span><br><span class="line"><span class="built_in">print</span>(text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 关闭</span></span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure>

<p><strong>提示</strong></p>
<ul>
<li>在开发中，通常会先编写 <strong>打开</strong> 和 <strong>关闭</strong> 的代码，再编写中间针对文件的 <strong>读&#x2F;写</strong> 操作！</li>
</ul>
<h4 id="文件指针（知道）"><a href="#文件指针（知道）" class="headerlink" title="文件指针（知道）"></a>文件指针（知道）</h4><ul>
<li><strong>文件指针</strong> 标记 <strong>从哪个位置开始读取数据</strong></li>
<li><strong>第一次打开</strong> 文件时，通常 <strong>文件指针会指向文件的开始位置</strong></li>
<li>当执行了read方法后，文件指针会移动到读取内容的末尾<ul>
<li>默认情况下会移动到 <strong>文件末尾</strong></li>
</ul>
</li>
</ul>
<p><strong>思考</strong></p>
<ul>
<li>如果执行了一次 <code>read</code> 方法，读取了所有内容，那么再次调用 <code>read</code> 方法，还能够获得到内容吗？</li>
</ul>
<p><strong>答案</strong></p>
<ul>
<li>不能</li>
<li>第一次读取之后，文件指针移动到了文件末尾，再次调用不会读取到任何的内容</li>
</ul>
<h3 id="2-4-打开文件的方式"><a href="#2-4-打开文件的方式" class="headerlink" title="2.4 打开文件的方式"></a>2.4 打开文件的方式</h3><ul>
<li><code>open</code> 函数默认以 <strong>只读方式</strong> 打开文件，并且返回文件对象</li>
</ul>
<p>语法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;文件名&quot;</span>, <span class="string">&quot;访问方式&quot;</span>)</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">访问方式</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">r</td>
<td align="left">以<strong>只读</strong>方式打开文件。文件的指针将会放在文件的开头，这是<strong>默认模式</strong>。如果文件不存在，抛出异常</td>
</tr>
<tr>
<td align="center">w</td>
<td align="left">以<strong>只写</strong>方式打开文件。如果文件存在会被覆盖。如果文件不存在，创建新文件</td>
</tr>
<tr>
<td align="center">a</td>
<td align="left">以<strong>追加</strong>方式打开文件。如果该文件已存在，文件指针将会放在文件的结尾。如果文件不存在，创建新文件进行写入</td>
</tr>
<tr>
<td align="center">r+</td>
<td align="left">以<strong>读写</strong>方式打开文件。文件的指针将会放在文件的开头。如果文件不存在，抛出异常</td>
</tr>
<tr>
<td align="center">w+</td>
<td align="left">以<strong>读写</strong>方式打开文件。如果文件存在会被覆盖。如果文件不存在，创建新文件</td>
</tr>
<tr>
<td align="center">a+</td>
<td align="left">以<strong>读写</strong>方式打开文件。如果该文件已存在，文件指针将会放在文件的结尾。如果文件不存在，创建新文件进行写入</td>
</tr>
</tbody></table>
<p><strong>提示</strong></p>
<ul>
<li>频繁的移动文件指针，<strong>会影响文件的读写效率</strong>，开发中更多的时候会以 <strong>只读</strong>、<strong>只写</strong> 的方式来操作文件</li>
</ul>
<p><strong>写入文件示例</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;README&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line"></span><br><span class="line">f.write(<span class="string">&quot;hello python！\n&quot;</span>)</span><br><span class="line">f.write(<span class="string">&quot;今天天气真好&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>

<h3 id="2-5-按行读取文件内容"><a href="#2-5-按行读取文件内容" class="headerlink" title="2.5 按行读取文件内容"></a>2.5 按行读取文件内容</h3><ul>
<li><code>read</code> 方法默认会把文件的 <strong>所有内容</strong> <strong>一次性读取到内存</strong></li>
<li>如果文件太大，对内存的占用会非常严重</li>
</ul>
<h4 id="readline-方法"><a href="#readline-方法" class="headerlink" title="readline 方法"></a><code>readline</code> 方法</h4><ul>
<li><code>readline</code> 方法可以一次读取一行内容</li>
<li>方法执行后，会把 <strong>文件指针</strong> 移动到下一行，准备再次读取</li>
</ul>
<p><strong>读取大文件的正确姿势</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;README&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 读取一行内容</span></span><br><span class="line">    text = file.readline()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断是否读到内容</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> text:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 每读取一行的末尾已经有了一个 `\n`</span></span><br><span class="line">    <span class="built_in">print</span>(text, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure>

<h3 id="2-6-文件读写案例-——-复制文件"><a href="#2-6-文件读写案例-——-复制文件" class="headerlink" title="2.6 文件读写案例 —— 复制文件"></a>2.6 文件读写案例 —— 复制文件</h3><p><strong>目标</strong></p>
<p>用代码的方式，来实现文件复制过程</p>
<p><img src="https://s2.loli.net/2022/03/20/Nd5fMrwv9upXzjY.png" alt="025_复制文件"></p>
<h4 id="小文件复制"><a href="#小文件复制" class="headerlink" title="小文件复制"></a>小文件复制</h4><ul>
<li>打开一个已有文件，读取完整内容，并写入到另外一个文件</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 打开文件</span></span><br><span class="line">file_read = <span class="built_in">open</span>(<span class="string">&quot;README&quot;</span>)</span><br><span class="line">file_write = <span class="built_in">open</span>(<span class="string">&quot;README[复件]&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 读取并写入文件</span></span><br><span class="line">text = file_read.read()</span><br><span class="line">file_write.write(text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 关闭文件</span></span><br><span class="line">file_read.close()</span><br><span class="line">file_write.close()</span><br></pre></td></tr></table></figure>

<h4 id="大文件复制"><a href="#大文件复制" class="headerlink" title="大文件复制"></a>大文件复制</h4><ul>
<li>打开一个已有文件，逐行读取内容，并顺序写入到另外一个文件</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 打开文件</span></span><br><span class="line">file_read = <span class="built_in">open</span>(<span class="string">&quot;README&quot;</span>)</span><br><span class="line">file_write = <span class="built_in">open</span>(<span class="string">&quot;README[复件]&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 读取并写入文件</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 每次读取一行</span></span><br><span class="line">    text = file_read.readline()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断是否读取到内容</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> text:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    file_write.write(text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 关闭文件</span></span><br><span class="line">file_read.close()</span><br><span class="line">file_write.close()</span><br></pre></td></tr></table></figure>

<h2 id="03-文件-x2F-目录的常用管理操作"><a href="#03-文件-x2F-目录的常用管理操作" class="headerlink" title="03. 文件&#x2F;目录的常用管理操作"></a>03. 文件&#x2F;目录的常用管理操作</h2><ul>
<li>在终<strong>端&#x2F;文件浏览器</strong>、 中可以执行常规的<strong>文件&#x2F;目录</strong>管理操作，例如：<ul>
<li>创建、重命名、删除、改变路径、查看目录内容、……</li>
</ul>
</li>
<li>在 <code>Python</code> 中，如果希望通过程序实现上述功能，需要导入 <code>os</code> 模块</li>
</ul>
<h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">方法名</th>
<th align="left">说明</th>
<th align="left">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">01</td>
<td align="left">rename</td>
<td align="left">重命名文件</td>
<td align="left"><code>os.rename(源文件名, 目标文件名)</code></td>
</tr>
<tr>
<td align="left">02</td>
<td align="left">remove</td>
<td align="left">删除文件</td>
<td align="left"><code>os.remove(文件名)</code></td>
</tr>
</tbody></table>
<h3 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h3><table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">方法名</th>
<th align="left">说明</th>
<th align="left">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">01</td>
<td align="left">listdir</td>
<td align="left">目录列表</td>
<td align="left"><code>os.listdir(目录名)</code></td>
</tr>
<tr>
<td align="left">02</td>
<td align="left">mkdir</td>
<td align="left">创建目录</td>
<td align="left"><code>os.mkdir(目录名)</code></td>
</tr>
<tr>
<td align="left">03</td>
<td align="left">rmdir</td>
<td align="left">删除目录</td>
<td align="left"><code>os.rmdir(目录名)</code></td>
</tr>
<tr>
<td align="left">04</td>
<td align="left">getcwd</td>
<td align="left">获取当前目录</td>
<td align="left"><code>os.getcwd()</code></td>
</tr>
<tr>
<td align="left">05</td>
<td align="left">chdir</td>
<td align="left">修改工作目录</td>
<td align="left"><code>os.chdir(目标目录)</code></td>
</tr>
<tr>
<td align="left">06</td>
<td align="left">path.isdir</td>
<td align="left">判断是否是文件</td>
<td align="left"><code>os.path.isdir(文件路径)</code></td>
</tr>
</tbody></table>
<blockquote>
<p>提示：文件或者目录操作都支持 <strong>相对路径</strong> 和 <strong>绝对路径</strong></p>
</blockquote>
<h2 id="04-文本文件的编码格式（科普）"><a href="#04-文本文件的编码格式（科普）" class="headerlink" title="04. 文本文件的编码格式（科普）"></a>04. 文本文件的编码格式（科普）</h2><ul>
<li>文本文件存储的内容是基于 <strong>字符编码</strong> 的文件，常见的编码有 <code>ASCII</code> 编码，<code>UNICODE</code> 编码等</li>
</ul>
<blockquote>
<p>Python 2.x 默认使用 <code>ASCII</code> 编码格式<br>Python 3.x 默认使用 <code>UTF-8</code> 编码格式</p>
</blockquote>
<h3 id="4-1-ASCII-编码和-UNICODE-编码"><a href="#4-1-ASCII-编码和-UNICODE-编码" class="headerlink" title="4.1 ASCII 编码和 UNICODE 编码"></a>4.1 ASCII 编码和 UNICODE 编码</h3><h4 id="ASCII-编码"><a href="#ASCII-编码" class="headerlink" title="ASCII 编码"></a><code>ASCII</code> 编码</h4><ul>
<li>计算机中只有 <code>256</code> 个 <code>ASCII</code> 字符</li>
<li>一个ASCII在内存中占用1 个字节的空间<ul>
<li><code>8</code> 个 <code>0/1</code> 的排列组合方式一共有 <code>256</code> 种，也就是 <code>2 ** 8</code></li>
</ul>
</li>
</ul>
<p><img src="https://s2.loli.net/2022/03/20/zbBYtmPlOginUvV.jpg" alt="001_ASCII编码表1"></p>
<h4 id="UTF-8-编码格式"><a href="#UTF-8-编码格式" class="headerlink" title="UTF-8 编码格式"></a><code>UTF-8</code> 编码格式</h4><ul>
<li>计算机中使用 <strong>1~6 个字节</strong> 来表示一个 <code>UTF-8</code> 字符，涵盖了 <strong>地球上几乎所有地区的文字</strong></li>
<li>大多数汉字会使用 <strong>3 个字节</strong> 表示</li>
<li><code>UTF-8</code> 是 <code>UNICODE</code> 编码的一种编码格式</li>
</ul>
<h3 id="4-2-Ptyhon-2-x-中如何使用中文"><a href="#4-2-Ptyhon-2-x-中如何使用中文" class="headerlink" title="4.2 Ptyhon 2.x 中如何使用中文"></a>4.2 Ptyhon 2.x 中如何使用中文</h3><blockquote>
<p>Python 2.x 默认使用 <code>ASCII</code> 编码格式<br>Python 3.x 默认使用 <code>UTF-8</code> 编码格式</p>
</blockquote>
<ul>
<li>在 Python 2.x 文件的 <strong>第一行</strong> 增加以下代码，解释器会以 <code>utf-8</code> 编码来处理 python 文件</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># *-* coding:utf8 *-*</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>这方式是官方推荐使用的！</p>
</blockquote>
<ul>
<li>也可以使用</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf8</span></span><br></pre></td></tr></table></figure>

<h4 id="unicode-字符串"><a href="#unicode-字符串" class="headerlink" title="unicode 字符串"></a>unicode 字符串</h4><ul>
<li>在 <code>Python 2.x</code> 中，即使指定了文件使用 <code>UTF-8</code> 的编码格式，但是在遍历字符串时，仍然会 <strong>以字节为单位遍历</strong> 字符串</li>
<li>要能够 <strong>正确的遍历字符串</strong>，在定义字符串时，需要 <strong>在字符串的引号前</strong>，增加一个小写字母 <code>u</code>，告诉解释器这是一个 <code>unicode</code> 字符串（使用 <code>UTF-8</code> 编码格式的字符串）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># *-* coding:utf8 *-*</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在字符串前，增加一个 `u` 表示这个字符串是一个 utf8 字符串</span></span><br><span class="line">hello_str = <span class="string">u&quot;你好世界&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(hello_str)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> hello_str:</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python面对对象学习</category>
      </categories>
      <tags>
        <tag>python学习</tag>
      </tags>
  </entry>
  <entry>
    <title>12.函数基础</title>
    <url>/2021/12/23/python%E9%9D%A2%E5%AF%B9%E8%BF%87%E7%A8%8B%E5%AD%A6%E4%B9%A0/12.%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="函数基础"><a href="#函数基础" class="headerlink" title="函数基础"></a>函数基础</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>函数的快速体验</li>
<li>函数的基本使用</li>
<li>函数的参数</li>
<li>函数的返回值</li>
<li>函数的嵌套调用</li>
<li>在模块中定义函数</li>
</ul>
<h2 id="01-函数的快速体验"><a href="#01-函数的快速体验" class="headerlink" title="01. 函数的快速体验"></a>01. 函数的快速体验</h2><h3 id="1-1-快速体验"><a href="#1-1-快速体验" class="headerlink" title="1.1 快速体验"></a>1.1 快速体验</h3><ul>
<li>所谓<strong>函数</strong>，就是把 <strong>具有独立功能的代码块</strong> 组织为一个小模块，在需要的时候 <strong>调用</strong></li>
<li>函数的使用包含两个步骤：<ol>
<li>定义函数 —— <strong>封装</strong> 独立的功能</li>
<li>调用函数 —— 享受 <strong>封装</strong> 的成果</li>
</ol>
</li>
<li><strong>函数的作用</strong>，在开发程序时，使用函数可以提高编写的效率以及代码的 <strong>重用</strong></li>
</ul>
<p><strong>演练步骤</strong></p>
<ol>
<li>新建 <code>04_函数</code> 项目</li>
<li>复制之前完成的 <strong>乘法表</strong> 文件</li>
<li>修改文件，增加函数定义 <code>multiple_table():</code></li>
<li>新建另外一个文件，使用 <code>import</code> 导入并且调用函数</li>
</ol>
<h2 id="02-函数基本使用"><a href="#02-函数基本使用" class="headerlink" title="02. 函数基本使用"></a>02. 函数基本使用</h2><h3 id="2-1-函数的定义"><a href="#2-1-函数的定义" class="headerlink" title="2.1 函数的定义"></a>2.1 函数的定义</h3><p>定义函数的格式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>():</span><br><span class="line"></span><br><span class="line">    函数封装的代码</span><br><span class="line">    ……</span><br></pre></td></tr></table></figure>

<ol>
<li><code>def</code> 是英文 <code>define</code> 的缩写</li>
<li><strong>函数名称</strong> 应该能够表达 <strong>函数封装代码</strong> 的功能，方便后续的调用</li>
<li><strong>函数名称</strong> 的命名应该 <strong>符合</strong> <strong>标识符的命名规则</strong><ul>
<li>可以由 <strong>字母</strong>、<strong>下划线</strong> 和 <strong>数字</strong> 组成</li>
<li><strong>不能以数字开头</strong></li>
<li><strong>不能与关键字重名</strong></li>
</ul>
</li>
</ol>
<h3 id="2-2-函数调用"><a href="#2-2-函数调用" class="headerlink" title="2.2 函数调用"></a>2.2 函数调用</h3><p>调用函数很简单的，通过 <code>函数名()</code> 即可完成对函数的调用</p>
<h3 id="2-3-第一个函数演练"><a href="#2-3-第一个函数演练" class="headerlink" title="2.3 第一个函数演练"></a>2.3 第一个函数演练</h3><p><strong>需求</strong></p>
<ul>
<li><ol>
<li>编写一个打招呼 <code>say_hello</code> 的函数，封装三行打招呼的代码</li>
</ol>
</li>
<li><ol start="2">
<li>在函数下方调用打招呼的代码</li>
</ol>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;小明&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解释器知道这里定义了一个函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">say_hello</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello 1&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello 2&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello 3&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"><span class="comment"># 只有在调用函数时，之前定义的函数才会被执行</span></span><br><span class="line"><span class="comment"># 函数执行完成之后，会重新回到之前的程序中，继续执行后续的代码</span></span><br><span class="line">say_hello()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>用 <strong>单步执行 F8 和 F7</strong> 观察以下代码的执行过程</p>
</blockquote>
<ul>
<li>定义好函数之后，只表示这个函数封装了一段代码而已</li>
<li>如果不主动调用函数，函数是不会主动执行的</li>
</ul>
<h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><ul>
<li><p>能否将 <strong>函数调用</strong> 放在 <strong>函数定义</strong> 的上方？</p>
<ul>
<li>不能！</li>
<li>因为在 <strong>使用函数名</strong> 调用函数之前，必须要保证 <code>Python</code> 已经知道函数的存在</li>
<li>否则控制台会提示 <code>NameError: name &#39;say_hello&#39; is not defined</code> (<strong>名称错误：say_hello 这个名字没有被定义</strong>)</li>
</ul>
</li>
</ul>
<h3 id="2-4-PyCharm-的调试工具"><a href="#2-4-PyCharm-的调试工具" class="headerlink" title="2.4 PyCharm 的调试工具"></a>2.4 PyCharm 的调试工具</h3><ul>
<li><strong>F8 Step Over</strong> 可以单步执行代码，会把函数调用看作是一行代码直接执行</li>
<li><strong>F7 Step Into</strong> 可以单步执行代码，如果是函数，会进入函数内部</li>
</ul>
<h3 id="2-5-函数的文档注释"><a href="#2-5-函数的文档注释" class="headerlink" title="2.5 函数的文档注释"></a>2.5 函数的文档注释</h3><ul>
<li>在开发中，如果希望给函数添加注释，应该在 <strong>定义函数</strong> 的下方，使用 <strong>连续的三对引号</strong></li>
<li>在 <strong>连续的三对引号</strong> 之间编写对函数的说明文字</li>
<li>在 <strong>函数调用</strong> 位置，使用快捷键 <code>CTRL + Q</code> 可以查看函数的说明信息</li>
</ul>
<blockquote>
<p>注意：因为 <strong>函数体相对比较独立</strong>，<strong>函数定义的上方</strong>，应该和其他代码（包括注释）保留 <strong>两个空行</strong></p>
</blockquote>
<h2 id="03-函数的参数"><a href="#03-函数的参数" class="headerlink" title="03. 函数的参数"></a>03. 函数的参数</h2><p><strong>演练需求</strong></p>
<ol>
<li>开发一个 <code>sum_2_num</code> 的函数</li>
<li>函数能够实现 <strong>两个数字的求和</strong> 功能</li>
</ol>
<p>演练代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum_2_num</span>():</span><br><span class="line"></span><br><span class="line">    num1 = <span class="number">10</span></span><br><span class="line">    num2 = <span class="number">20</span></span><br><span class="line">    result = num1 + num2</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%d + %d = %d&quot;</span> % (num1, num2, result))</span><br><span class="line"></span><br><span class="line">sum_2_num()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>思考一下存在什么问题</strong></p>
<blockquote>
<p>函数只能处理 <strong>固定数值</strong> 的相加</p>
</blockquote>
<p><strong>如何解决？</strong></p>
<ul>
<li>如果能够把需要计算的数字，在调用函数时，传递到函数内部就好了！</li>
</ul>
<h3 id="3-1-函数参数的使用"><a href="#3-1-函数参数的使用" class="headerlink" title="3.1 函数参数的使用"></a>3.1 函数参数的使用</h3><ul>
<li>在函数名的后面的小括号内部填写 <strong>参数</strong></li>
<li>多个参数之间使用 <code>,</code> 分隔</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum_2_num</span>(<span class="params">num1, num2</span>):</span><br><span class="line"></span><br><span class="line">    result = num1 + num2</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%d + %d = %d&quot;</span> % (num1, num2, result))</span><br><span class="line"></span><br><span class="line">sum_2_num(<span class="number">50</span>, <span class="number">20</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-2-参数的作用"><a href="#3-2-参数的作用" class="headerlink" title="3.2 参数的作用"></a>3.2 参数的作用</h3><ul>
<li><strong>函数</strong>，把 <strong>具有独立功能的代码块</strong> 组织为一个小模块，在需要的时候 <strong>调用</strong></li>
<li><strong>函数的参数</strong>，增加函数的 <strong>通用性</strong>，针对 <strong>相同的数据处理逻辑</strong>，能够 <strong>适应更多的数据</strong><ol>
<li>在函数 <strong>内部</strong>，把参数当做 <strong>变量</strong> 使用，进行需要的数据处理</li>
<li>函数调用时，按照函数定义的<strong>参数顺序</strong>，把 <strong>希望在函数内部处理的数据</strong>，<strong>通过参数</strong> 传递</li>
</ol>
</li>
</ul>
<h3 id="3-3-形参和实参"><a href="#3-3-形参和实参" class="headerlink" title="3.3 形参和实参"></a>3.3 形参和实参</h3><ul>
<li><strong>形参</strong>：<strong>定义</strong> 函数时，小括号中的参数，是用来接收参数用的，在函数内部 <strong>作为变量使用</strong></li>
<li><strong>实参</strong>：<strong>调用</strong> 函数时，小括号中的参数，是用来把数据传递到 <strong>函数内部</strong> 用的</li>
</ul>
<h2 id="04-函数的返回值"><a href="#04-函数的返回值" class="headerlink" title="04. 函数的返回值"></a>04. 函数的返回值</h2><ul>
<li>在程序开发中，有时候，会希望 <strong>一个函数执行结束后，告诉调用者一个结果</strong>，以便调用者针对具体的结果做后续的处理</li>
<li><strong>返回值</strong> 是函数 <strong>完成工作</strong>后，<strong>最后</strong> 给调用者的 <strong>一个结果</strong></li>
<li>在函数中使用 <code>return</code> 关键字可以返回结果</li>
<li>调用函数一方，可以 <strong>使用变量</strong> 来 <strong>接收</strong> 函数的返回结果</li>
</ul>
<blockquote>
<p>注意：<code>return</code> 表示返回，后续的代码都不会被执行</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum_2_num</span>(<span class="params">num1, num2</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;对两个数字的求和&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数，并使用 result 变量接收计算结果</span></span><br><span class="line">result = sum_2_num(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;计算结果是 %d&quot;</span> % result)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​	<img src="https://s2.loli.net/2022/01/23/bfR7knFwGacjdpE.png" alt="image-20220123134919201.png"></p>
<h2 id="05-函数的嵌套调用"><a href="#05-函数的嵌套调用" class="headerlink" title="05. 函数的嵌套调用"></a>05. 函数的嵌套调用</h2><ul>
<li>一个函数里面 <strong>又调用</strong> 了 <strong>另外一个函数</strong>，这就是 <strong>函数嵌套调用</strong></li>
<li>如果函数 <code>test2</code> 中，调用了另外一个函数 <code>test1</code><ul>
<li>那么执行到调用 <code>test1</code> 函数时，会先把函数 <code>test1</code> 中的任务都执行完</li>
<li>才会回到 <code>test2</code> 中调用函数 <code>test1</code> 的位置，继续执行后续的代码</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test 1&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test2</span>():</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test 2&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    test1()</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">test2()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="函数嵌套的演练-——-打印分隔线"><a href="#函数嵌套的演练-——-打印分隔线" class="headerlink" title="函数嵌套的演练 —— 打印分隔线"></a>函数嵌套的演练 —— 打印分隔线</h3><blockquote>
<p>体会一下工作中 <strong>需求是多变</strong> 的</p>
</blockquote>
<p><strong>需求 1</strong></p>
<ul>
<li>定义一个 <code>print_line</code> 函数能够打印 <code>*</code> 组成的 <strong>一条分隔线</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_line</span>(<span class="params">char</span>):</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>需求 2</strong></p>
<ul>
<li>定义一个函数能够打印 <strong>由任意字符组成</strong> 的分隔线</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_line</span>(<span class="params">char</span>):</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(char * <span class="number">50</span>)</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<p><strong>需求 3</strong></p>
<ul>
<li>定义一个函数能够打印 <strong>任意重复次数</strong> 的分隔线</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_line</span>(<span class="params">char, times</span>):</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(char * times)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>需求 4</strong></p>
<ul>
<li>定义一个函数能够打印 <strong>5 行</strong> 的分隔线，分隔线要求符合<strong>需求 3</strong></li>
</ul>
<blockquote>
<p>提示：工作中针对需求的变化，应该冷静思考，<strong>不要轻易修改之前已经完成的，能够正常执行的函数</strong>！</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_line</span>(<span class="params">char, times</span>):</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(char * times)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_lines</span>(<span class="params">char, times</span>):</span><br><span class="line"></span><br><span class="line">    row = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> row &lt; <span class="number">5</span>:</span><br><span class="line">        print_line(char, times)</span><br><span class="line"></span><br><span class="line">        row += <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="06-使用模块中的函数"><a href="#06-使用模块中的函数" class="headerlink" title="06. 使用模块中的函数"></a>06. 使用模块中的函数</h2><blockquote>
<p><strong>模块是 Python 程序架构的一个核心概念</strong></p>
</blockquote>
<ul>
<li><strong>模块</strong> 就好比是 <strong>工具包</strong>，要想使用这个工具包中的工具，就需要 <strong>导入 import</strong> 这个模块</li>
<li>每一个以扩展名 <code>py</code> 结尾的 <code>Python</code> 源代码文件都是一个 <strong>模块</strong></li>
<li>在模块中定义的 <strong>全局变量</strong> 、 <strong>函数</strong> 都是模块能够提供给外界直接使用的工具</li>
</ul>
<h3 id="6-1-第一个模块体验"><a href="#6-1-第一个模块体验" class="headerlink" title="6.1 第一个模块体验"></a>6.1 第一个模块体验</h3><p><strong>步骤</strong></p>
<ul>
<li>新建 <code>hm_10_分隔线模块.py</code><ul>
<li>复制 <code>hm_09_打印多条分隔线.py</code> 中的内容，<strong>最后一行 <code>print</code> 代码除外</strong></li>
<li>增加一个字符串变量</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;黑马程序员&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>新建 <code>hm_10_体验模块.py</code> 文件，并且编写以下代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hm_10_分隔线模块</span><br><span class="line"></span><br><span class="line">hm_10_分隔线模块.print_line(<span class="string">&quot;-&quot;</span>, <span class="number">80</span>)</span><br><span class="line"><span class="built_in">print</span>(hm_10_分隔线模块.name)</span><br></pre></td></tr></table></figure>

<h4 id="体验小结"><a href="#体验小结" class="headerlink" title="体验小结"></a>体验小结</h4><ul>
<li>可以 <strong>在一个 Python 文件</strong> 中 <strong>定义 变量 或者 函数</strong></li>
<li>然后在 <strong>另外一个文件中</strong> 使用 <code>import</code> 导入这个模块</li>
<li>导入之后，就可以使用 <code>模块名.变量</code> &#x2F; <code>模块名.函数</code> 的方式，使用这个模块中定义的变量或者函数</li>
</ul>
<blockquote>
<p><strong>模块</strong>可以让 <strong>曾经编写过的代码</strong> 方便的被 <strong>复用</strong>！</p>
</blockquote>
<h3 id="6-2-模块名也是一个标识符"><a href="#6-2-模块名也是一个标识符" class="headerlink" title="6.2 模块名也是一个标识符"></a>6.2 模块名也是一个标识符</h3><ul>
<li>标示符可以由 <strong>字母</strong>、<strong>下划线</strong> 和 <strong>数字</strong> 组成</li>
<li><strong>不能以数字开头</strong></li>
<li><strong>不能与关键字重名</strong></li>
</ul>
<blockquote>
<p>注意：如果在给 Python 文件起名时，<strong>以数字开头</strong> 是无法在 <code>PyCharm</code> 中通过导入这个模块的</p>
</blockquote>
<h3 id="6-3-Pyc-文件（了解）"><a href="#6-3-Pyc-文件（了解）" class="headerlink" title="6.3 Pyc 文件（了解）"></a>6.3 Pyc 文件（了解）</h3><blockquote>
<p><code>C</code> 是 <code>compiled</code> <strong>编译过</strong> 的意思</p>
</blockquote>
<p><strong>操作步骤</strong></p>
<ol>
<li>浏览程序目录会发现一个 <code>__pycache__</code> 的目录</li>
<li>目录下会有一个 <code>hm_10_分隔线模块.cpython-35.pyc</code> 文件，<code>cpython-35</code> 表示 <code>Python</code> 解释器的版本</li>
<li>这个 <code>pyc</code> 文件是由 Python 解释器将 <strong>模块的源码</strong> 转换为 <strong>字节码</strong><ul>
<li><code>Python</code> 这样保存 <strong>字节码</strong> 是作为一种启动 <strong>速度的优化</strong></li>
</ul>
</li>
</ol>
<p><strong>字节码</strong></p>
<ul>
<li><p><code>Python</code> 在解释源程序时是分成两个步骤的</p>
<ol>
<li>首先处理源代码，<strong>编译</strong> 生成一个二进制 <strong>字节码</strong></li>
<li>再对 <strong>字节码</strong> 进行处理，才会生成 CPU 能够识别的 <strong>机器码</strong></li>
</ol>
</li>
<li><p>有了模块的字节码文件之后，下一次运行程序时，如果在 <strong>上次保存字节码之后</strong> 没有修改过源代码，Python 将会加载 .pyc 文件并跳过编译这个步骤</p>
</li>
<li><p>当 <code>Python</code> 重编译时，它会自动检查源文件和字节码文件的时间戳</p>
</li>
<li><p>如果你又修改了源代码，下次程序运行时，字节码将自动重新创建</p>
</li>
</ul>
<blockquote>
<p>提示：有关模块以及模块的其他导入方式，后续课程还会逐渐展开！</p>
<p><strong>模块是 Python 程序架构的一个核心概念</strong></p>
</blockquote>
]]></content>
      <categories>
        <category>python面对过程学习</category>
      </categories>
      <tags>
        <tag>python学习</tag>
      </tags>
  </entry>
  <entry>
    <title>11.循环</title>
    <url>/2021/12/23/python%E9%9D%A2%E5%AF%B9%E8%BF%87%E7%A8%8B%E5%AD%A6%E4%B9%A0/11.%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>程序的三大流程</li>
<li>while 循环基本使用</li>
<li>break 和 continue</li>
<li>while 循环嵌套</li>
</ul>
<h2 id="01-程序的三大流程"><a href="#01-程序的三大流程" class="headerlink" title="01. 程序的三大流程"></a>01. 程序的三大流程</h2><ul>
<li><p>在程序开发中，一共有三种流程方式：</p>
<ul>
<li><strong>顺序</strong> —— <strong>从上向下</strong>，顺序执行代码</li>
<li><strong>分支</strong> —— 根据条件判断，决定执行代码的 <strong>分支</strong></li>
<li><strong>循环</strong> —— 让 <strong>特定代码 重复</strong> 执行</li>
</ul>
<p>  <img src="https://gitee.com/lichaikui/picture/raw/master/tupian/001_%E7%A8%8B%E5%BA%8F%E4%B8%89%E5%A4%A7%E6%B5%81%E7%A8%8B.png" alt="001_程序三大流程"></p>
</li>
</ul>
<h2 id="02-while-循环基本使用"><a href="#02-while-循环基本使用" class="headerlink" title="02. while 循环基本使用"></a>02. <code>while</code> 循环基本使用</h2><ul>
<li><p>循环的作用就是让 <strong>指定的代码</strong> 重复的执行</p>
</li>
<li><p><code>while</code> 循环最常用的应用场景就是 <strong>让执行的代码</strong> 按照 <strong>指定的次数</strong> <strong>重复</strong> 执行</p>
</li>
<li><p>需求 —— 打印 5 遍 <code>Hello Python</code></p>
</li>
<li><p>思考 —— 如果要求打印 100 遍怎么办？</p>
</li>
</ul>
<h3 id="2-1-while-语句基本语法"><a href="#2-1-while-语句基本语法" class="headerlink" title="2.1 while 语句基本语法"></a>2.1 <code>while</code> 语句基本语法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">初始条件设置 —— 通常是重复执行的 计数器</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> 条件(判断 计数器 是否达到 目标次数):</span><br><span class="line">    条件满足时，做的事情<span class="number">1</span></span><br><span class="line">    条件满足时，做的事情<span class="number">2</span></span><br><span class="line">    条件满足时，做的事情<span class="number">3</span></span><br><span class="line">    ...(省略)...</span><br><span class="line">    </span><br><span class="line">    处理条件(计数器 + <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：</p>
<ul>
<li><code>while</code> 语句以及缩进部分是一个 <strong>完整的代码块</strong></li>
</ul>
<h4 id="第一个-while-循环"><a href="#第一个-while-循环" class="headerlink" title="第一个 while 循环"></a>第一个 while 循环</h4><p><strong>需求</strong></p>
<ul>
<li>打印 5 遍 Hello Python</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1. 定义重复次数计数器</span><br><span class="line">i = 1</span><br><span class="line"></span><br><span class="line"># 2. 使用 while 判断条件</span><br><span class="line">while i &lt;= 5:</span><br><span class="line">    # 要重复执行的代码</span><br><span class="line">    print(&quot;Hello Python&quot;)</span><br><span class="line"></span><br><span class="line">    # 处理计数器 i</span><br><span class="line">    i = i + 1</span><br><span class="line"></span><br><span class="line">print(&quot;循环结束后的 i = %d&quot; % i)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：循环结束后，之前定义的计数器条件的数值是依旧存在的</p>
</blockquote>
<h4 id="死循环"><a href="#死循环" class="headerlink" title="死循环"></a>死循环</h4><blockquote>
<p>由于程序员的原因，<strong>忘记</strong> 在循环内部 <strong>修改循环的判断条件</strong>，导致循环持续执行，程序无法终止！</p>
</blockquote>
<h3 id="2-2-赋值运算符"><a href="#2-2-赋值运算符" class="headerlink" title="2.2 赋值运算符"></a>2.2 赋值运算符</h3><ul>
<li>在 Python 中，使用 <code>=</code> 可以给变量赋值</li>
<li>在算术运算时，为了简化代码的编写，<code>Python</code> 还提供了一系列的 与 <strong>算术运算符</strong> 对应的 <strong>赋值运算符</strong></li>
<li>注意：<strong>赋值运算符中间不能使用空格</strong></li>
</ul>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>&#x3D;</td>
<td>简单的赋值运算符</td>
<td>c &#x3D; a + b 将 a + b 的运算结果赋值为 c</td>
</tr>
<tr>
<td>+&#x3D;</td>
<td>加法赋值运算符</td>
<td>c +&#x3D; a 等效于 c &#x3D; c + a</td>
</tr>
<tr>
<td>-&#x3D;</td>
<td>减法赋值运算符</td>
<td>c -&#x3D; a 等效于 c &#x3D; c - a</td>
</tr>
<tr>
<td>*&#x3D;</td>
<td>乘法赋值运算符</td>
<td>c *&#x3D; a 等效于 c &#x3D; c * a</td>
</tr>
<tr>
<td>&#x2F;&#x3D;</td>
<td>除法赋值运算符</td>
<td>c &#x2F;&#x3D; a 等效于 c &#x3D; c &#x2F; a</td>
</tr>
<tr>
<td>&#x2F;&#x2F;&#x3D;</td>
<td>取整除赋值运算符</td>
<td>c &#x2F;&#x2F;&#x3D; a 等效于 c &#x3D; c &#x2F;&#x2F; a</td>
</tr>
<tr>
<td>%&#x3D;</td>
<td>取 <strong>模</strong> (余数)赋值运算符</td>
<td>c %&#x3D; a 等效于 c &#x3D; c % a</td>
</tr>
<tr>
<td>**&#x3D;</td>
<td>幂赋值运算符</td>
<td>c **&#x3D; a 等效于 c &#x3D; c ** a</td>
</tr>
</tbody></table>
<h3 id="2-3-Python-中的计数方法"><a href="#2-3-Python-中的计数方法" class="headerlink" title="2.3 Python 中的计数方法"></a>2.3 Python 中的计数方法</h3><p>常见的计数方法有两种，可以分别称为：</p>
<ul>
<li><strong>自然计数法</strong>（从 <code>1</code> 开始）—— 更符合人类的习惯</li>
<li><strong>程序计数法</strong>（从 <code>0</code> 开始）—— 几乎所有的程序语言都选择从 0 开始计数</li>
</ul>
<p>因此，大家在编写程序时，应该尽量养成习惯：<strong>除非需求的特殊要求，否则 循环 的计数都从 0 开始</strong></p>
<h3 id="2-4-循环计算"><a href="#2-4-循环计算" class="headerlink" title="2.4 循环计算"></a>2.4 循环计算</h3><blockquote>
<p>在程序开发中，通常会遇到 <strong>利用循环</strong> <strong>重复计算</strong> 的需求</p>
</blockquote>
<p>遇到这种需求，可以：</p>
<ol>
<li>在 <code>while</code> 上方定义一个变量，用于 <strong>存放最终计算结果</strong></li>
<li>在循环体内部，每次循环都用 <strong>最新的计算结果</strong>，<strong>更新</strong> 之前定义的变量</li>
</ol>
<p><strong>需求</strong></p>
<ul>
<li>计算 0 ~ 100 之间所有数字的累计求和结果</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算 0 ~ 100 之间所有数字的累计求和结果</span></span><br><span class="line"><span class="comment"># 0. 定义最终结果的变量</span></span><br><span class="line">result = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 定义一个整数的变量记录循环的次数</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 开始循环</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">100</span>:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 每一次循环，都让 result 这个变量和 i 这个计数器相加</span></span><br><span class="line">    result += i</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理计数器</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;0~100之间的数字求和结果 = %d&quot;</span> % result)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="需求进阶"><a href="#需求进阶" class="headerlink" title="需求进阶"></a>需求进阶</h4><ul>
<li>计算 0 ~ 100 之间 所有 <strong>偶数</strong> 的累计求和结果</li>
</ul>
<p>开发步骤</p>
<ol>
<li>编写循环 <strong>确认</strong> <strong>要计算的数字</strong></li>
<li>添加 <strong>结果</strong> 变量，在循环内部 <strong>处理计算结果</strong></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 0. 最终结果</span></span><br><span class="line">result = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 计数器</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 开始循环</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">100</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断偶数</span></span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        result += i</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理计数器</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;0~100之间偶数求和结果 = %d&quot;</span> % result)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="03-break-和-continue"><a href="#03-break-和-continue" class="headerlink" title="03. break 和 continue"></a>03. break 和 continue</h2><blockquote>
<p><code>break</code> 和 <code>continue</code> 是专门在循环中使用的关键字</p>
</blockquote>
<ul>
<li><code>break</code> <strong>某一条件满足时</strong>，退出循环，不再执行后续重复的代码</li>
<li><code>continue</code> <strong>某一条件满足时</strong>，不执行后续重复的代码</li>
</ul>
<blockquote>
<p><code>break</code> 和 <code>continue</code> 只针对 <strong>当前所在循环</strong> 有效</p>
</blockquote>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/002_%E5%BE%AA%E7%8E%AF%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="002_循环流程图-w400"></p>
<h3 id="3-1-break"><a href="#3-1-break" class="headerlink" title="3.1 break"></a>3.1 break</h3><ul>
<li><strong>在循环过程中</strong>，如果 <strong>某一个条件满足后</strong>，<strong>不</strong> 再希望 <strong>循环继续执行</strong>，可以使用 <code>break</code> 退出循环</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># break 某一条件满足时，退出循环，不再执行后续重复的代码</span></span><br><span class="line">    <span class="comment"># i == 3</span></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;over&quot;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>break</code> 只针对当前所在循环有效</p>
</blockquote>
<h3 id="3-2-continue"><a href="#3-2-continue" class="headerlink" title="3.2 continue"></a>3.2 continue</h3><ul>
<li><strong>在循环过程中</strong>，如果 <strong>某一个条件满足后</strong>，<strong>不</strong> 希望 <strong>执行循环代码，但是又不希望退出循环</strong>，可以使用 <code>continue</code></li>
<li>也就是：在整个循环中，<strong>只有某些条件</strong>，不需要执行循环代码，而其他条件都需要执行</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 当 i == 7 时，不希望执行需要重复执行的代码</span></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">7</span>:</span><br><span class="line">        <span class="comment"># 在使用 continue 之前，同样应该修改计数器</span></span><br><span class="line">        <span class="comment"># 否则会出现死循环</span></span><br><span class="line">        i += <span class="number">1</span>   （ 更改此处 i += <span class="number">2</span> 则可跳过输出 <span class="number">8</span>   ==》跳过一段循环 ）</span><br><span class="line"></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重复执行的代码</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>需要注意：使用 <code>continue</code> 时，<strong>条件处理部分的代码，需要特别注意</strong>，不小心会出现 <strong>死循环</strong></li>
</ul>
<blockquote>
<p><code>continue</code> 只针对当前所在循环有效</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">非break = continue</span><br></pre></td></tr></table></figure>

<h2 id="04-while-循环嵌套"><a href="#04-while-循环嵌套" class="headerlink" title="04. while 循环嵌套"></a>04. <code>while</code> 循环嵌套</h2><h3 id="4-1-循环嵌套"><a href="#4-1-循环嵌套" class="headerlink" title="4.1 循环嵌套"></a>4.1 循环嵌套</h3><ul>
<li><code>while</code> 嵌套就是：<code>while</code> 里面还有 <code>while</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件 <span class="number">1</span>:</span><br><span class="line">    条件满足时，做的事情<span class="number">1</span></span><br><span class="line">    条件满足时，做的事情<span class="number">2</span></span><br><span class="line">    条件满足时，做的事情<span class="number">3</span></span><br><span class="line">    ...(省略)...</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> 条件 <span class="number">2</span>:</span><br><span class="line">        条件满足时，做的事情<span class="number">1</span></span><br><span class="line">        条件满足时，做的事情<span class="number">2</span></span><br><span class="line">        条件满足时，做的事情<span class="number">3</span></span><br><span class="line">        ...(省略)...</span><br><span class="line">    </span><br><span class="line">        处理条件 <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">    处理条件 <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="4-2-循环嵌套演练-——-九九乘法表"><a href="#4-2-循环嵌套演练-——-九九乘法表" class="headerlink" title="4.2 循环嵌套演练 —— 九九乘法表"></a>4.2 循环嵌套演练 —— 九九乘法表</h3><h4 id="第-1-步：用嵌套打印小星星"><a href="#第-1-步：用嵌套打印小星星" class="headerlink" title="第 1 步：用嵌套打印小星星"></a>第 1 步：用嵌套打印小星星</h4><p><strong>需求</strong></p>
<ul>
<li>在控制台连续输出五行 <code>*</code>，每一行星号的数量依次递增</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*</span><br><span class="line">**</span><br><span class="line">***</span><br><span class="line">****</span><br><span class="line">*****</span><br></pre></td></tr></table></figure>

<ul>
<li>使用字符串 * 打印</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 定义一个计数器变量，从数字1开始，循环会比较方便</span></span><br><span class="line">row = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> row &lt;= <span class="number">5</span>:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span> * row)</span><br><span class="line"></span><br><span class="line">    row += <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="第-2-步：使用循环嵌套打印小星星"><a href="#第-2-步：使用循环嵌套打印小星星" class="headerlink" title="第 2 步：使用循环嵌套打印小星星"></a>第 2 步：使用循环嵌套打印小星星</h4><p><strong>知识点</strong> 对 <code>print</code> 函数的使用做一个增强</p>
<ul>
<li><p>在默认情况下，<code>print</code> 函数输出内容之后，会自动在内容末尾增加换行</p>
</li>
<li><p>如果不希望末尾增加换行，可以在 <code>print</code> 函数输出内容的后面增加 <code>, end=&quot;&quot;</code></p>
</li>
<li><p>其中 <code>&quot;&quot;</code> 中间可以指定 <code>print</code> 函数输出内容之后，继续希望显示的内容</p>
</li>
<li><p>语法格式如下：</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 向控制台输出内容结束之后，不会换行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单纯的换行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>end=&quot;&quot;</code> 表示向控制台输出内容结束之后，不会换行</p>
</blockquote>
<p><strong>假设</strong> <code>Python</code> <strong>没有提供</strong> 字符串的 <code>*</code> 操作 <strong>拼接字符串</strong></p>
<p><strong>需求</strong></p>
<ul>
<li>在控制台连续输出五行 <code>*</code>，每一行星号的数量依次递增</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*</span><br><span class="line">**</span><br><span class="line">***</span><br><span class="line">****</span><br><span class="line">*****</span><br></pre></td></tr></table></figure>

<p><strong>开发步骤</strong></p>
<ul>
<li>1&gt; 完成 5 行内容的简单输出</li>
<li>2&gt; 分析每行内部的 <code>*</code> 应该如何处理？<ul>
<li>每行显示的星星和当前所在的行数是一致的</li>
<li>嵌套一个小的循环，专门处理每一行中 <code>列</code> 的星星显示</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">row = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> row &lt;= <span class="number">5</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 假设 python 没有提供字符串 * 操作</span></span><br><span class="line">    <span class="comment"># 在循环内部，再增加一个循环，实现每一行的 星星 打印</span></span><br><span class="line">    col = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> col &lt;= row:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        col += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 每一行星号输出完成后，再增加一个换行</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    row += <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="第-3-步：-九九乘法表"><a href="#第-3-步：-九九乘法表" class="headerlink" title="第 3 步： 九九乘法表"></a>第 3 步： 九九乘法表</h4><p><strong>需求</strong> 输出 九九乘法表，格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 * 1 = 1	</span><br><span class="line">1 * 2 = 2	2 * 2 = 4	</span><br><span class="line">1 * 3 = 3	2 * 3 = 6	3 * 3 = 9	</span><br><span class="line">1 * 4 = 4	2 * 4 = 8	3 * 4 = 12	4 * 4 = 16	</span><br><span class="line">1 * 5 = 5	2 * 5 = 10	3 * 5 = 15	4 * 5 = 20	5 * 5 = 25	</span><br><span class="line">1 * 6 = 6	2 * 6 = 12	3 * 6 = 18	4 * 6 = 24	5 * 6 = 30	6 * 6 = 36	</span><br><span class="line">1 * 7 = 7	2 * 7 = 14	3 * 7 = 21	4 * 7 = 28	5 * 7 = 35	6 * 7 = 42	7 * 7 = 49	</span><br><span class="line">1 * 8 = 8	2 * 8 = 16	3 * 8 = 24	4 * 8 = 32	5 * 8 = 40	6 * 8 = 48	7 * 8 = 56	8 * 8 = 64	</span><br><span class="line">1 * 9 = 9	2 * 9 = 18	3 * 9 = 27	4 * 9 = 36	5 * 9 = 45	6 * 9 = 54	7 * 9 = 63	8 * 9 = 72	9 * 9 = 81</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>开发步骤</strong></p>
<ul>
<li><ol>
<li>打印 9 行小星星</li>
</ol>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*</span><br><span class="line">**</span><br><span class="line">***</span><br><span class="line">****</span><br><span class="line">*****</span><br><span class="line">******</span><br><span class="line">*******</span><br><span class="line">********</span><br><span class="line">*********</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="2">
<li>将每一个 <code>*</code> 替换成对应的行与列相乘</li>
</ol>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义起始行</span></span><br><span class="line">row = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最大打印 9 行</span></span><br><span class="line"><span class="keyword">while</span> row &lt;= <span class="number">9</span>:</span><br><span class="line">    <span class="comment"># 定义起始列</span></span><br><span class="line">    col = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 最大打印 row 列</span></span><br><span class="line">    <span class="keyword">while</span> col &lt;= row:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># end = &quot;&quot;，表示输出结束后，不换行</span></span><br><span class="line">        <span class="comment"># &quot;\t&quot; 可以在控制台输出一个制表符，协助在输出文本时对齐</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%d * %d = %d&quot;</span> % (col, row, row * col), end=<span class="string">&quot;\t&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 列数 + 1</span></span><br><span class="line">        col += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 一行打印完成的换行</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 行数 + 1</span></span><br><span class="line">    row += <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>字符串中的转义字符</strong></p>
<ul>
<li><code>\t</code> 在控制台输出一个 <strong>制表符</strong>，协助在输出文本时 <strong>垂直方向</strong> 保持对齐</li>
<li><code>\n</code> 在控制台输出一个 <strong>换行符</strong></li>
</ul>
<blockquote>
<p><strong>制表符</strong> 的功能是在不使用表格的情况下在 <strong>垂直方向</strong> 按列对齐文本</p>
</blockquote>
<table>
<thead>
<tr>
<th>转义字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>\\</td>
<td>反斜杠符号</td>
</tr>
<tr>
<td>\‘</td>
<td>单引号</td>
</tr>
<tr>
<td>\“</td>
<td>双引号</td>
</tr>
<tr>
<td>\n</td>
<td>换行</td>
</tr>
<tr>
<td>\t</td>
<td>横向制表符</td>
</tr>
<tr>
<td>\r</td>
<td>回车</td>
</tr>
</tbody></table>
<p>​	<img src="https://gitee.com/lichaikui/picture/raw/master/tupian/image-20211231093938346.png" alt="image-20211231093938346"></p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/image-20211231094046832.png" alt="image-20211231094046832"></p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/image-20211231094945065.png" alt="image-20211231094945065"></p>
]]></content>
      <categories>
        <category>python面对过程学习</category>
      </categories>
      <tags>
        <tag>python学习</tag>
      </tags>
  </entry>
  <entry>
    <title>14.综合应用 —— 名片管理系统</title>
    <url>/2022/01/19/python%E9%9D%A2%E5%AF%B9%E8%BF%87%E7%A8%8B%E5%AD%A6%E4%B9%A0/14.%E7%BB%BC%E5%90%88%E5%BA%94%E7%94%A8%20%E2%80%94%E2%80%94%20%E5%90%8D%E7%89%87%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="综合应用-——-名片管理系统"><a href="#综合应用-——-名片管理系统" class="headerlink" title="综合应用 —— 名片管理系统"></a>综合应用 —— 名片管理系统</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>综合应用已经学习过的知识点：</p>
<ul>
<li><strong>变量</strong></li>
<li><strong>流程控制</strong></li>
<li><strong>函数</strong></li>
<li><strong>模块</strong></li>
</ul>
<p>开发 <strong>名片管理系统</strong></p>
<h2 id="系统需求"><a href="#系统需求" class="headerlink" title="系统需求"></a>系统需求</h2><ul>
<li><ol>
<li>程序启动，显示名片管理系统欢迎界面，并显示功能菜单</li>
</ol>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**************************************************</span><br><span class="line">欢迎使用【名片管理系统】V1.0</span><br><span class="line"></span><br><span class="line">1. 新建名片</span><br><span class="line">2. 显示全部</span><br><span class="line">3. 查询名片</span><br><span class="line"></span><br><span class="line">0. 退出系统</span><br><span class="line">**************************************************</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="2">
<li>用户用数字选择不同的功能</li>
</ol>
</li>
<li><ol start="3">
<li>根据功能选择，执行不同的功能</li>
</ol>
</li>
<li><ol start="4">
<li>用户名片需要记录用户的 <strong>姓名</strong>、<strong>电话</strong>、<strong>QQ</strong>、<strong>邮件</strong></li>
</ol>
</li>
<li><ol start="5">
<li>如果查询到指定的名片，用户可以选择 <strong>修改</strong> 或者 <strong>删除</strong> 名片</li>
</ol>
</li>
</ul>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>框架搭建</li>
<li>新增名片</li>
<li>显示所有名片</li>
<li>查询名片</li>
<li>查询成功后修改、删除名片</li>
<li>让 Python 程序能够直接运行</li>
</ol>
<h2 id="01-框架搭建"><a href="#01-框架搭建" class="headerlink" title="01. 框架搭建"></a>01. 框架搭建</h2><p><strong>目标</strong></p>
<ul>
<li>搭建名片管理系统 <strong>框架结构</strong><ol>
<li><strong>准备文件</strong>，确定文件名，保证能够 <strong>在需要的位置</strong> 编写代码</li>
<li>编写 <strong>主运行循环</strong>，实现基本的 <strong>用户输入和判断</strong></li>
</ol>
</li>
</ul>
<h3 id="1-1-文件准备"><a href="#1-1-文件准备" class="headerlink" title="1.1 文件准备"></a>1.1 文件准备</h3><ol>
<li>新建 <code>cards_main.py</code> 保存 <strong>主程序功能代码</strong><ul>
<li>程序的入口</li>
<li>每一次启动名片管理系统都通过 <code>main</code> 这个文件启动</li>
</ul>
</li>
<li>新建 <code>cards_tools.py</code> 保存 <strong>所有名片功能函数</strong><ul>
<li>将对名片的 <strong>新增</strong>、<strong>查询</strong>、<strong>修改</strong>、<strong>删除</strong> 等功能封装在不同的函数中</li>
</ul>
</li>
</ol>
<h3 id="1-2-编写主运行循环"><a href="#1-2-编写主运行循环" class="headerlink" title="1.2 编写主运行循环"></a>1.2 编写主运行循环</h3><ul>
<li>在 <code>cards_main</code> 中添加一个 <strong>无限循环</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># TODO(小明) 显示系统菜单</span></span><br><span class="line"></span><br><span class="line">    action = <span class="built_in">input</span>(<span class="string">&quot;请选择操作功能：&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;您选择的操作是：%s&quot;</span> % action)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 根据用户输入决定后续的操作</span></span><br><span class="line">    <span class="keyword">if</span> action <span class="keyword">in</span> [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>]:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">elif</span> action == <span class="string">&quot;0&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;欢迎再次使用【名片管理系统】&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;输入错误，请重新输入&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="字符串判断"><a href="#字符串判断" class="headerlink" title="字符串判断"></a>字符串判断</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> action <span class="keyword">in</span> [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>]:     <span class="comment"># 成员运算符</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> action == <span class="string">&quot;1&quot;</span> <span class="keyword">or</span> action == <span class="string">&quot;2&quot;</span> <span class="keyword">or</span> action == <span class="string">&quot;3&quot;</span>:</span><br></pre></td></tr></table></figure>

<ol>
<li><p>使用 <code>in</code> 针对 <strong>列表</strong> 判断，避免使用 <code>or</code> 拼接复杂的逻辑条件</p>
<p><img src="https://s2.loli.net/2022/01/16/jm1t3BW6Ff7Zo9M.png" alt="image-20220116141725432"></p>
</li>
<li><p>没有使用 <code>int</code> 转换用户输入，可以避免 <strong>一旦用户输入的不是数字</strong>，导致程序运行出错</p>
</li>
</ol>
<h4 id="pass"><a href="#pass" class="headerlink" title="pass"></a>pass</h4><ul>
<li><p>是为了保持程序结构的完整性</p>
</li>
<li><p>&#96;&#96;&#96;</p>
<h1 id="如果在开发程序时，不希望立刻编写分支内部的代码"><a href="#如果在开发程序时，不希望立刻编写分支内部的代码" class="headerlink" title="如果在开发程序时，不希望立刻编写分支内部的代码"></a>如果在开发程序时，不希望立刻编写分支内部的代码</h1><h1 id="可以使用-pass-关键字，表示一个占位符，能够保证程序的代码结构正确！"><a href="#可以使用-pass-关键字，表示一个占位符，能够保证程序的代码结构正确！" class="headerlink" title="可以使用 pass 关键字，表示一个占位符，能够保证程序的代码结构正确！"></a>可以使用 pass 关键字，表示一个占位符，能够保证程序的代码结构正确！</h1><h1 id="程序运行时，pass-关键字不会执行任何的操作！"><a href="#程序运行时，pass-关键字不会执行任何的操作！" class="headerlink" title="程序运行时，pass 关键字不会执行任何的操作！"></a>程序运行时，pass 关键字不会执行任何的操作！</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### 无限循环</span><br><span class="line"></span><br><span class="line">* 在开发软件时，如果 **不希望程序执行后** 立即退出</span><br><span class="line">* 可以在程序中增加一个 **无限循环**</span><br><span class="line">* **由用户来决定** 退出程序的时机</span><br><span class="line"></span><br><span class="line">#### TODO 注释</span><br><span class="line"></span><br><span class="line">* 在 `#` 后跟上 `TODO`，用于标记需要去做的工作</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"># TODO(作者/邮件) 显示系统菜单</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="1-3-在-cards-tools-中增加四个新函数"><a href="#1-3-在-cards-tools-中增加四个新函数" class="headerlink" title="1.3 在 cards_tools 中增加四个新函数"></a>1.3 在 <code>cards_tools</code> 中增加四个新函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">show_menu</span>():</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示菜单</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">new_card</span>():</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;新建名片</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;功能：新建名片&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_all</span>():</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示全部</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;功能：显示全部&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search_card</span>():</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;搜索名片</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;功能：搜索名片&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="1-4-导入模块"><a href="#1-4-导入模块" class="headerlink" title="1.4 导入模块"></a>1.4 导入模块</h3><ul>
<li>在 <code>cards_main.py</code> 中使用 <code>import</code> 导入 <code>cards_tools</code> 模块</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cards_tools</span><br></pre></td></tr></table></figure>

<ul>
<li>修改 <code>while</code> 循环的代码如下：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cards_tools</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">    cards_tools.show_menu()</span><br><span class="line"></span><br><span class="line">    action = <span class="built_in">input</span>(<span class="string">&quot;请选择操作功能：&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;您选择的操作是：%s&quot;</span> % action)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 根据用户输入决定后续的操作</span></span><br><span class="line">    <span class="keyword">if</span> action <span class="keyword">in</span> [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>]:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> action == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">            cards_tools.new_card()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> action == <span class="string">&quot;2&quot;</span>:</span><br><span class="line">            cards_tools.show_all()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> action == <span class="string">&quot;3&quot;</span>:</span><br><span class="line">            cards_tools.search_card()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> action == <span class="string">&quot;0&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;欢迎再次使用【名片管理系统】&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;输入错误，请重新输入：&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>至此：<code>cards_main</code> 中的所有代码全部开发完毕！</p>
</blockquote>
<h3 id="1-5-完成-show-menu-函数"><a href="#1-5-完成-show-menu-函数" class="headerlink" title="1.5 完成 show_menu 函数"></a>1.5 完成 <code>show_menu</code> 函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">show_menu</span>():</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示菜单</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;欢迎使用【菜单管理系统】V1.0&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;1. 新建名片&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;2. 显示全部&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;3. 查询名片&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;0. 退出系统&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="02-保存名片数据的结构"><a href="#02-保存名片数据的结构" class="headerlink" title="02. 保存名片数据的结构"></a>02. 保存名片数据的结构</h2><p><strong>程序就是用来处理数据的，而变量就是用来存储数据的</strong></p>
<ul>
<li>使用 <strong>字典</strong> 记录 <strong>每一张名片</strong> 的详细信息</li>
<li>使用 <strong>列表</strong> 统一记录所有的 <strong>名片字典</strong></li>
</ul>
<p><img src="https://s2.loli.net/2022/01/11/rjRLh6AVOHifevk.png" alt="001_名片管理系统全局列表-w500"></p>
<h3 id="定义名片列表变量"><a href="#定义名片列表变量" class="headerlink" title="定义名片列表变量"></a>定义名片列表变量</h3><ul>
<li>在 <code>cards_tools</code> 文件的顶部增加一个 <strong>列表变量</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 所有名片记录的列表</span></span><br><span class="line">card_list = []</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong></p>
<ol>
<li><strong>所有名片相关操作</strong>，都需要使用这个列表，所以应该 <strong>定义在程序的顶部</strong></li>
<li><strong>程序刚运行时，没有数据</strong>，所以是 <strong>空列表</strong></li>
</ol>
<h2 id="03-新增名片"><a href="#03-新增名片" class="headerlink" title="03. 新增名片"></a>03. 新增名片</h2><h3 id="3-1-功能分析"><a href="#3-1-功能分析" class="headerlink" title="3.1 功能分析"></a>3.1 功能分析</h3><ol>
<li>提示用户依次输入名片信息</li>
<li>将名片信息保存到一个字典</li>
<li>将字典添加到名片列表</li>
<li>提示名片添加完成</li>
</ol>
<h3 id="3-2-实现-new-card-方法"><a href="#3-2-实现-new-card-方法" class="headerlink" title="3.2 实现 new_card 方法"></a>3.2 实现 new_card 方法</h3><ul>
<li>根据步骤实现代码</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">new_card</span>():</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;新建名片</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;功能：新建名片&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 提示用户输入名片信息</span></span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&quot;请输入姓名：&quot;</span>)</span><br><span class="line">    phone = <span class="built_in">input</span>(<span class="string">&quot;请输入电话：&quot;</span>)</span><br><span class="line">    qq = <span class="built_in">input</span>(<span class="string">&quot;请输入 QQ 号码：&quot;</span>)</span><br><span class="line">    email = <span class="built_in">input</span>(<span class="string">&quot;请输入邮箱：&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 将用户信息保存到一个字典</span></span><br><span class="line">    card_dict = &#123;<span class="string">&quot;name&quot;</span>: name,</span><br><span class="line">                 <span class="string">&quot;phone&quot;</span>: phone,</span><br><span class="line">                 <span class="string">&quot;qq&quot;</span>: qq,</span><br><span class="line">                 <span class="string">&quot;email&quot;</span>: email&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 将用户字典添加到名片列表</span></span><br><span class="line">    card_list.append(card_dict)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(card_list)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 4. 提示添加成功信息</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;成功添加 %s 的名片&quot;</span> % card_dict[<span class="string">&quot;name&quot;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<h1 id="技巧：在-PyCharm-中，可以使用-SHIFT-F6-统一修改变量名"><a href="#技巧：在-PyCharm-中，可以使用-SHIFT-F6-统一修改变量名" class="headerlink" title="技巧：在 PyCharm 中，可以使用 SHIFT + F6 统一修改变量名"></a>技巧：在 <code>PyCharm</code> 中，可以使用 <code>SHIFT + F6</code> 统一修改变量名<img src="https://s2.loli.net/2022/01/17/rIlCog3X2U5ueFn.png" alt="image-20220117153300537"></h1></blockquote>
<h2 id="04-显示所有名片"><a href="#04-显示所有名片" class="headerlink" title="04. 显示所有名片"></a>04. 显示所有名片</h2><h3 id="4-1-功能分析"><a href="#4-1-功能分析" class="headerlink" title="4.1 功能分析"></a>4.1 功能分析</h3><ul>
<li>循环遍历名片列表，顺序显示每一个字典的信息</li>
</ul>
<h3 id="4-2-基础代码实现"><a href="#4-2-基础代码实现" class="headerlink" title="4.2 基础代码实现"></a>4.2 基础代码实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">show_all</span>():</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示全部</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;功能：显示全部&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> card_dict <span class="keyword">in</span> card_list:</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(card_dict)</span><br><span class="line">        </span><br></pre></td></tr></table></figure>

<ul>
<li>显示效果不好！</li>
</ul>
<h3 id="4-3-增加标题和使用-t-显示"><a href="#4-3-增加标题和使用-t-显示" class="headerlink" title="4.3 增加标题和使用 \t 显示"></a>4.3 增加标题和使用 <code>\t</code> 显示</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">show_all</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示全部</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;功能：显示全部&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印表头</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> [<span class="string">&quot;姓名&quot;</span>, <span class="string">&quot;电话&quot;</span>, <span class="string">&quot;QQ&quot;</span>, <span class="string">&quot;邮箱&quot;</span>]:</span><br><span class="line">        <span class="built_in">print</span>(name, end=<span class="string">&quot;\t\t&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印分隔线</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> card_dict <span class="keyword">in</span> card_list:</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s\t\t%s\t\t%s\t\t%s&quot;</span> % (card_dict[<span class="string">&quot;name&quot;</span>],</span><br><span class="line">                                        card_dict[<span class="string">&quot;phone&quot;</span>],</span><br><span class="line">                                        card_dict[<span class="string">&quot;qq&quot;</span>],</span><br><span class="line">                                        card_dict[<span class="string">&quot;email&quot;</span>]))</span><br></pre></td></tr></table></figure>

<h3 id="4-4-增加没有名片记录判断"><a href="#4-4-增加没有名片记录判断" class="headerlink" title="4.4 增加没有名片记录判断"></a>4.4 增加没有名片记录判断</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">show_all</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示全部</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;功能：显示全部&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 判断是否有名片记录</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(card_list) == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;提示：没有任何名片记录&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong></p>
<ul>
<li><p>在函数中使用 <code>return</code> 表示返回</p>
</li>
<li><p>如果在 <code>return</code> 后没有跟任何内容，只是表示该函数执行到此就不再执行后续的代码</p>
</li>
<li><pre><code># 如果 return 后面 没有任何的内容，表示会返回到调用函数的位置并不会返回任何的结果
# return 返回到调用函数的代码，去执行调用函数下方的代码
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 05. 查询名片</span><br><span class="line"></span><br><span class="line">### 5.1 功能分析</span><br><span class="line"></span><br><span class="line">1. 提示用户要搜索的姓名</span><br><span class="line">2. 根据用户输入的姓名遍历列表</span><br><span class="line">3. 搜索到指定的名片后，再执行后续的操作</span><br><span class="line"></span><br><span class="line">### 5.2 代码实现</span><br><span class="line"></span><br><span class="line">* 查询功能实现</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">def search_card():</span><br><span class="line"></span><br><span class="line">    &quot;&quot;&quot;搜索名片</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    print(&quot;-&quot; * 50)</span><br><span class="line">    print(&quot;功能：搜索名片&quot;)</span><br><span class="line"></span><br><span class="line">    # 1. 提示要搜索的姓名</span><br><span class="line">    find_name = input(&quot;请输入要搜索的姓名：&quot;)</span><br><span class="line"></span><br><span class="line">    # 2. 遍历字典</span><br><span class="line">    for card_dict in card_list:</span><br><span class="line"></span><br><span class="line">        if card_dict[&quot;name&quot;] == find_name:</span><br><span class="line"></span><br><span class="line">            print(&quot;姓名\t\t\t电话\t\t\tQQ\t\t\t邮箱&quot;)</span><br><span class="line">            print(&quot;-&quot; * 40)</span><br><span class="line">            </span><br><span class="line">            print(&quot;%s\t\t\t%s\t\t\t%s\t\t\t%s&quot; % (</span><br><span class="line">                card_dict[&quot;name&quot;],</span><br><span class="line">                card_dict[&quot;phone&quot;],</span><br><span class="line">                card_dict[&quot;qq&quot;],</span><br><span class="line">                card_dict[&quot;email&quot;]))</span><br><span class="line"></span><br><span class="line">            print(&quot;-&quot; * 40)</span><br><span class="line">            </span><br><span class="line">            # TODO(小明) 针对找到的字典进行后续操作：修改/删除</span><br><span class="line"></span><br><span class="line">            break</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;没有找到 %s&quot; % find_name)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</code></pre>
</li>
<li><p>增加名片操作函数：<strong>修改</strong>&#x2F;<strong>删除</strong>&#x2F;<strong>返回主菜单</strong></p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">deal_card</span>(<span class="params">find_dict</span>):</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;操作搜索到的名片字典</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param find_dict:找到的名片字典</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(find_dict)</span><br><span class="line"></span><br><span class="line">    action_str = <span class="built_in">input</span>(<span class="string">&quot;请选择要执行的操作 &quot;</span></span><br><span class="line">                       <span class="string">&quot;[1] 修改 [2] 删除 [0] 返回上级菜单&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> action == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;修改&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> action == <span class="string">&quot;2&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;删除&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="06-修改和删除"><a href="#06-修改和删除" class="headerlink" title="06. 修改和删除"></a>06. 修改和删除</h2><h3 id="6-1-查询成功后删除名片"><a href="#6-1-查询成功后删除名片" class="headerlink" title="6.1 查询成功后删除名片"></a>6.1 查询成功后删除名片</h3><ul>
<li>由于找到的字典记录已经在列表中保存</li>
<li>要删除名片记录，只需要把列表中对应的字典删除即可</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">elif</span> action == <span class="string">&quot;2&quot;</span>:</span><br><span class="line">    card_list.remove(find_dict)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;删除成功&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="6-2-修改名片"><a href="#6-2-修改名片" class="headerlink" title="6.2 修改名片"></a>6.2 修改名片</h3><ul>
<li>由于找到的字典记录已经在列表中保存</li>
<li>要修改名片记录，只需要把列表中对应的字典中每一个键值对的数据修改即可</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> action == <span class="string">&quot;1&quot;</span>:</span><br><span class="line"></span><br><span class="line">    find_dict[<span class="string">&quot;name&quot;</span>] = <span class="built_in">input</span>(<span class="string">&quot;请输入姓名：&quot;</span>)</span><br><span class="line">    find_dict[<span class="string">&quot;phone&quot;</span>] = <span class="built_in">input</span>(<span class="string">&quot;请输入电话：&quot;</span>)</span><br><span class="line">    find_dict[<span class="string">&quot;qq&quot;</span>] = <span class="built_in">input</span>(<span class="string">&quot;请输入QQ：&quot;</span>)</span><br><span class="line">    find_dict[<span class="string">&quot;email&quot;</span>] = <span class="built_in">input</span>(<span class="string">&quot;请输入邮件：&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%s 的名片修改成功&quot;</span> % find_dict[<span class="string">&quot;name&quot;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="修改名片细化"><a href="#修改名片细化" class="headerlink" title="修改名片细化"></a>修改名片细化</h4><ul>
<li><strong>如果用户在使用时，某些名片内容并不想修改</strong>，应该如何做呢？—— 既然系统提供的 <code>input</code> 函数不能满足需求，那么就新定义一个函数 <code>input_card_info</code> 对系统的 <code>input</code> 函数进行扩展</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">input_card_info</span>(<span class="params">dict_value, tip_message</span>):</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;输入名片信息</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param dict_value: 字典原有值</span></span><br><span class="line"><span class="string">    :param tip_message: 输入提示信息</span></span><br><span class="line"><span class="string">    :return: 如果输入，返回输入内容，否则返回字典原有值</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 1. 提示用户输入内容</span></span><br><span class="line">    result_str = <span class="built_in">input</span>(tip_message)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 针对用户的输入进行判断，如果用户输入了内容，直接返回结果</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(result_str) &gt; <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result_str</span><br><span class="line">    <span class="comment"># 3. 如果用户没有输入内容，返回 `字典中原有的值`</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dict_value</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="07-LINUX-上的-Shebang-符号"><a href="#07-LINUX-上的-Shebang-符号" class="headerlink" title="07. LINUX 上的 Shebang 符号(#!)"></a>07. LINUX 上的 <code>Shebang</code> 符号(<code>#!</code>)</h2><ul>
<li><code>#!</code>这个符号叫做 <code>Shebang</code> 或者 <code>Sha-bang</code></li>
<li><code>Shebang</code> 通常在 <code>Unix</code> 系统脚本的中 <strong>第一行开头</strong> 使用</li>
<li>指明 <strong>执行这个脚本文件</strong> 的 <strong>解释程序</strong></li>
</ul>
<h3 id="使用-Shebang-的步骤"><a href="#使用-Shebang-的步骤" class="headerlink" title="使用 Shebang 的步骤"></a>使用 Shebang 的步骤</h3><ul>
<li><ol>
<li>使用 <code>which</code> 查询 <code>python3</code> 解释器所在路径</li>
</ol>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">which</span> python3</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="2">
<li>修改要运行的 <strong>主 python 文件</strong>，在第一行增加以下内容</li>
</ol>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python3</span></span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="3">
<li>修改 <strong>主 python 文件</strong> 的文件权限，增加执行权限</li>
</ol>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">chmod</span> +x cards_main.py</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="4">
<li>在需要时执行程序即可</li>
</ol>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./cards_main.py</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>python面对过程学习</category>
      </categories>
      <tags>
        <tag>python学习</tag>
      </tags>
  </entry>
  <entry>
    <title>13.高级变量类型</title>
    <url>/2021/12/23/python%E9%9D%A2%E5%AF%B9%E8%BF%87%E7%A8%8B%E5%AD%A6%E4%B9%A0/13.%E9%AB%98%E7%BA%A7%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="高级变量类型"><a href="#高级变量类型" class="headerlink" title="高级变量类型"></a>高级变量类型</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>列表</li>
<li>元组</li>
<li>字典</li>
<li>字符串</li>
<li>公共方法</li>
<li>变量高级</li>
</ul>
<h3 id="知识点回顾"><a href="#知识点回顾" class="headerlink" title="知识点回顾"></a>知识点回顾</h3><ul>
<li><p>Python 中数据类型可以分为 <strong>数字型</strong> 和 <strong>非数字型</strong></p>
</li>
<li><p>数字型</p>
<ul>
<li>整型 (<code>int</code>)</li>
<li>浮点型（<code>float</code>）</li>
<li>布尔型（<code>bool</code>） <ul>
<li>真 <code>True</code> <code>非 0 数</code> —— <strong>非零即真</strong></li>
<li>假 <code>False</code> <code>0</code></li>
</ul>
</li>
<li>复数型 (<code>complex</code>)<ul>
<li>主要用于科学计算，例如：平面场问题、波动问题、电感电容等问题</li>
</ul>
</li>
</ul>
</li>
<li><p>非数字型</p>
<ul>
<li>字符串</li>
<li>列表</li>
<li>元组</li>
<li>字典</li>
</ul>
</li>
<li><p>在 <code>Python</code> 中，所有 <strong>非数字型变量</strong> 都支持以下特点：</p>
<ol>
<li>都是一个 <strong>序列</strong> <code>sequence</code>，也可以理解为 <strong>容器</strong></li>
<li><strong>取值</strong> <code>[]</code></li>
<li><strong>遍历</strong> <code>for in</code></li>
<li><strong>计算长度</strong>、<strong>最大&#x2F;最小值</strong>、<strong>比较</strong>、<strong>删除</strong></li>
<li><strong>链接</strong> <code>+</code> 和 <strong>重复</strong> <code>*</code></li>
<li><strong>切片</strong></li>
</ol>
</li>
</ul>
<h2 id="01-列表"><a href="#01-列表" class="headerlink" title="01. 列表"></a>01. 列表</h2><h3 id="1-1-列表的定义"><a href="#1-1-列表的定义" class="headerlink" title="1.1 列表的定义"></a>1.1 列表的定义</h3><ul>
<li><code>List</code>（列表） 是 <code>Python</code> 中使用 <strong>最频繁</strong> 的数据类型，在其他语言中通常叫做 <strong>数组</strong></li>
<li>专门用于存储 <strong>一串 信息</strong></li>
<li>列表用 <code>[]</code> 定义，<strong>数据</strong> 之间使用 <code>,</code> 分隔</li>
<li>列表的 <strong>索引</strong> 从 <code>0</code> 开始<ul>
<li><strong>索引</strong> 就是数据在 <strong>列表</strong> 中的位置编号，<strong>索引</strong> 又可以被称为 <strong>下标</strong></li>
</ul>
</li>
</ul>
<blockquote>
<p>注意：从列表中取值时，如果 <strong>超出索引范围</strong>，程序会报错</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;lisi&quot;</span>, <span class="string">&quot;wangwu&quot;</span>]</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian2/001_%E5%88%97%E8%A1%A8%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="001_列表示意图"></p>
<h3 id="1-2-列表常用操作"><a href="#1-2-列表常用操作" class="headerlink" title="1.2 列表常用操作"></a>1.2 列表常用操作</h3><ul>
<li>在 <code>ipython3</code> 中定义一个 <strong>列表</strong>，例如：<code>name_list = []</code></li>
<li>输入 <code>name_list.</code> 按下 <code>TAB</code> 键，<code>ipython</code> 会提示 <strong>列表</strong> 能够使用的 <strong>方法</strong> 如下：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [1]: name_list.</span><br><span class="line">name_list.append   name_list.count    name_list.insert   name_list.reverse</span><br><span class="line">name_list.clear    name_list.extend   name_list.pop      name_list.sort</span><br><span class="line">name_list.copy     name_list.index    name_list.remove </span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>序号</th>
<th>分类</th>
<th>关键字 &#x2F; 函数 &#x2F; 方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>增加</td>
<td>列表.insert(索引, 数据)</td>
<td>在指定位置插入数据</td>
</tr>
<tr>
<td></td>
<td></td>
<td>列表.append(数据)</td>
<td>在末尾追加数据</td>
</tr>
<tr>
<td></td>
<td></td>
<td>列表.extend(列表2)</td>
<td>将列表2 的数据追加到列表</td>
</tr>
<tr>
<td>2</td>
<td>修改</td>
<td>列表[索引] &#x3D; 数据</td>
<td>修改指定索引的数据</td>
</tr>
<tr>
<td>3</td>
<td>删除</td>
<td>del 列表[索引]</td>
<td>删除指定索引的数据</td>
</tr>
<tr>
<td></td>
<td></td>
<td>列表.remove[数据]</td>
<td>删除第一个出现的指定数据</td>
</tr>
<tr>
<td></td>
<td></td>
<td>列表.pop</td>
<td>删除末尾数据</td>
</tr>
<tr>
<td></td>
<td></td>
<td>列表.pop(索引)</td>
<td>删除指定索引数据</td>
</tr>
<tr>
<td></td>
<td></td>
<td>列表.clear</td>
<td>清空列表</td>
</tr>
<tr>
<td>4</td>
<td>统计</td>
<td>len(列表)</td>
<td>列表长度</td>
</tr>
<tr>
<td></td>
<td></td>
<td>列表.count(数据)</td>
<td>数据在列表中出现的次数</td>
</tr>
<tr>
<td>5</td>
<td>排序</td>
<td>列表.sort()</td>
<td>升序排序</td>
</tr>
<tr>
<td></td>
<td></td>
<td>列表.sort(reverse&#x3D;True)</td>
<td>降序排序</td>
</tr>
<tr>
<td></td>
<td></td>
<td>列表.reverse()</td>
<td>逆序、反转</td>
</tr>
</tbody></table>
<h4 id="del-关键字（科普）"><a href="#del-关键字（科普）" class="headerlink" title="del 关键字（科普）"></a>del 关键字（科普）</h4><ul>
<li>使用 <code>del</code> 关键字(<code>delete</code>) 同样可以删除列表中元素</li>
<li><code>del</code> 关键字本质上是用来 <strong>将一个变量从内存中删除的</strong></li>
<li>如果使用 <code>del</code> 关键字将变量从内存中删除，后续的代码就不能再使用这个变量了</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> name_list[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在日常开发中，要从列表删除数据，建议 <strong>使用列表提供的方法</strong></p>
</blockquote>
<h4 id="关键字、函数和方法（科普）"><a href="#关键字、函数和方法（科普）" class="headerlink" title="关键字、函数和方法（科普）"></a>关键字、函数和方法（科普）</h4><ul>
<li><strong>关键字</strong> 是 Python 内置的、具有特殊意义的标识符</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> keyword</span><br><span class="line">In [<span class="number">2</span>]: <span class="built_in">print</span>(keyword.kwlist)</span><br><span class="line">In [<span class="number">3</span>]: <span class="built_in">print</span>(<span class="built_in">len</span>(keyword.kwlist))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>关键字后面不需要使用括号</p>
</blockquote>
<ul>
<li><strong>函数</strong> 封装了独立功能，可以直接调用</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">函数名(参数)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>函数需要死记硬背</p>
</blockquote>
<ul>
<li><strong>方法</strong> 和函数类似，同样是封装了独立的功能</li>
<li><strong>方法</strong> 需要通过 <strong>对象</strong> 来调用，表示针对这个 <strong>对象</strong> 要做的操作</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">对象.方法名(参数)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在变量后面输入 <code>.</code>，然后选择针对这个变量要执行的操作，记忆起来比函数要简单很多</p>
</blockquote>
<h3 id="1-3-循环遍历"><a href="#1-3-循环遍历" class="headerlink" title="1.3 循环遍历"></a>1.3 循环遍历</h3><ul>
<li><p><strong>遍历</strong> 就是 <strong>从头到尾</strong> <strong>依次</strong> 从 <strong>列表</strong> 中获取数据</p>
<ul>
<li>在 <strong>循环体内部</strong> 针对 <strong>每一个元素</strong>，执行相同的操作</li>
</ul>
</li>
<li><p>在 <code>Python</code> 中为了提高列表的遍历效率，专门提供的 <strong>迭代 iteration 遍历</strong></p>
</li>
<li><p>使用 <code>for</code> 就能够实现迭代遍历</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># for 循环内部使用的变量 in 列表</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> name_list:</span><br><span class="line"></span><br><span class="line">    循环内部针对列表元素进行操作</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian2/002_forin%E5%BE%AA%E7%8E%AF%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="002_forin循环流程图-w420"></p>
<h3 id="1-4-应用场景"><a href="#1-4-应用场景" class="headerlink" title="1.4 应用场景"></a>1.4 <strong>应用场景</strong></h3><ul>
<li>尽管 <code>Python</code> 的 <strong>列表</strong> 中可以 <strong>存储不同类型的数据</strong></li>
<li>但是在开发中，更多的应用场景是<ol>
<li><strong>列表</strong> 存储相同类型的数据</li>
<li>通过 <strong>迭代遍历</strong>，在循环体内部，针对列表中的每一项元素，执行相同的操作</li>
</ol>
</li>
</ul>
<h2 id="02-元组"><a href="#02-元组" class="headerlink" title="02. 元组"></a>02. 元组</h2><h3 id="2-1-元组的定义"><a href="#2-1-元组的定义" class="headerlink" title="2.1 元组的定义"></a>2.1 元组的定义</h3><ul>
<li><code>Tuple</code>（元组）与列表类似，不同之处在于元组的 <strong>元素不能修改</strong><ul>
<li><strong>元组</strong> 表示多个元素组成的序列</li>
<li><strong>元组</strong> 在 <code>Python</code> 开发中，有特定的应用场景</li>
</ul>
</li>
<li>用于存储 <strong>一串 信息</strong>，<strong>数据</strong> 之间使用 <code>,</code> 分隔</li>
<li>元组用 <code>()</code> 定义</li>
<li>元组的 <strong>索引</strong> 从 <code>0</code> 开始<ul>
<li><strong>索引</strong> 就是数据在 <strong>元组</strong> 中的位置编号</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">info_tuple = (<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>, <span class="number">1.75</span>)</span><br></pre></td></tr></table></figure>

<h4 id="创建空元组"><a href="#创建空元组" class="headerlink" title="创建空元组"></a>创建空元组</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">info_tuple = ()</span><br></pre></td></tr></table></figure>

<h4 id="元组中-只包含一个元素-时，需要-在元素后面添加逗号"><a href="#元组中-只包含一个元素-时，需要-在元素后面添加逗号" class="headerlink" title="元组中 只包含一个元素 时，需要 在元素后面添加逗号"></a>元组中 <strong>只包含一个元素</strong> 时，需要 <strong>在元素后面添加逗号</strong></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">info_tuple = (<span class="number">50</span>, )</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian2/003_%E5%85%83%E7%BB%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="003_元组示意图-w500"></p>
<h3 id="2-2-元组常用操作"><a href="#2-2-元组常用操作" class="headerlink" title="2.2 元组常用操作"></a>2.2 元组常用操作</h3><ul>
<li>在 <code>ipython3</code> 中定义一个 <strong>元组</strong>，例如：<code>info = ()</code></li>
<li>输入 <code>info.</code> 按下 <code>TAB</code> 键，<code>ipython</code> 会提示 <strong>元组</strong> 能够使用的函数如下：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">info.count  info.index</span><br></pre></td></tr></table></figure>

<blockquote>
<p>有关 <strong>元组</strong> 的 <strong>常用操作</strong> 可以参照上图练习</p>
</blockquote>
<h3 id="2-3-循环遍历"><a href="#2-3-循环遍历" class="headerlink" title="2.3 循环遍历"></a>2.3 循环遍历</h3><ul>
<li><strong>取值</strong> 就是从 <strong>元组</strong> 中获取存储在指定位置的数据</li>
<li><strong>遍历</strong> 就是 <strong>从头到尾</strong> <strong>依次</strong> 从 <strong>元组</strong> 中获取数据</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># for 循环内部使用的变量 in 元组</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> info:</span><br><span class="line"></span><br><span class="line">    循环内部针对元组元素进行操作</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>在 <code>Python</code> 中，可以使用 <code>for</code> 循环遍历所有非数字型类型的变量：<strong>列表</strong>、<strong>元组</strong>、<strong>字典</strong> 以及 <strong>字符串</strong></li>
<li>提示：在实际开发中，除非 <strong>能够确认元组中的数据类型</strong>，否则针对元组的循环遍历需求并不是很多</li>
</ul>
</blockquote>
<h3 id="2-4-应用场景"><a href="#2-4-应用场景" class="headerlink" title="2.4 应用场景"></a>2.4 应用场景</h3><ul>
<li>尽管可以使用 <code>for in</code> 遍历 <strong>元组</strong></li>
<li>但是在开发中，更多的应用场景是：<ul>
<li><strong>函数的 参数 和 返回值</strong>，一个函数可以接收 <strong>任意多个参数</strong>，或者 <strong>一次返回多个数据</strong><ul>
<li>有关 <strong>函数的参数 和 返回值</strong>，在后续 <strong>函数高级</strong> 给大家介绍</li>
</ul>
</li>
<li><strong>格式字符串</strong>，格式化字符串后面的 <code>()</code> 本质上就是一个元组</li>
<li><strong>让列表不可以被修改</strong>，以保护数据安全</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">info = (<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%s 的年龄是 %d&quot;</span> % info)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="元组和列表之间的转换"><a href="#元组和列表之间的转换" class="headerlink" title="元组和列表之间的转换"></a>元组和列表之间的转换</h4><ul>
<li>使用 <code>list</code> 函数可以把元组转换成列表</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(元组) </span><br></pre></td></tr></table></figure>

<ul>
<li>使用 <code>tuple</code> 函数可以把列表转换成元组</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tuple</span>(列表)</span><br></pre></td></tr></table></figure>

<h2 id="03-字典"><a href="#03-字典" class="headerlink" title="03. 字典"></a>03. 字典</h2><h3 id="3-1-字典的定义"><a href="#3-1-字典的定义" class="headerlink" title="3.1 字典的定义"></a>3.1 字典的定义</h3><ul>
<li><code>dictionary</code>（字典） 是 <strong>除列表以外</strong> <code>Python</code> 之中 <strong>最灵活</strong> 的数据类型</li>
<li>字典同样可以用来 <strong>存储多个数据</strong><ul>
<li>通常用于存储 <strong>描述一个 <code>物体</code> 的相关信息</strong></li>
</ul>
</li>
<li>和列表的区别<ul>
<li><strong>列表</strong> 是 <strong>有序</strong> 的对象集合</li>
<li><strong>字典</strong> 是 <strong>无序</strong> 的对象集合</li>
</ul>
</li>
<li>字典用 <code>&#123;&#125;</code> 定义</li>
<li>字典使用 <strong>键值对</strong> 存储数据，键值对之间使用 <code>,</code> 分隔<ul>
<li><strong>键</strong> <code>key</code> 是索引</li>
<li><strong>值</strong> <code>value</code> 是数据</li>
<li><strong>键</strong> 和 <strong>值</strong> 之间使用 <code>:</code> 分隔</li>
<li><strong>键必须是唯一的</strong></li>
<li><strong>值</strong> 可以取任何数据类型，但 <strong>键</strong> 只能使用 <strong>字符串</strong>、<strong>数字</strong>或 <strong>元组</strong></li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">xiaoming = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;小明&quot;</span>,</span><br><span class="line">            <span class="string">&quot;age&quot;</span>: <span class="number">18</span>,</span><br><span class="line">            <span class="string">&quot;gender&quot;</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="string">&quot;height&quot;</span>: <span class="number">1.75</span>&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian2/002_%E5%AD%97%E5%85%B8%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="002_字典示意图"></p>
<h3 id="3-2-字典常用操作"><a href="#3-2-字典常用操作" class="headerlink" title="3.2 字典常用操作"></a>3.2 字典常用操作</h3><ul>
<li>在 <code>ipython3</code> 中定义一个 <strong>字典</strong>，例如：<code>xiaoming = &#123;&#125;</code></li>
<li>输入 <code>xiaoming.</code> 按下 <code>TAB</code> 键，<code>ipython</code> 会提示 <strong>字典</strong> 能够使用的函数如下：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [1]: xiaoming.</span><br><span class="line">xiaoming.clear       xiaoming.items       xiaoming.setdefault</span><br><span class="line">xiaoming.copy        xiaoming.keys        xiaoming.update</span><br><span class="line">xiaoming.fromkeys    xiaoming.pop         xiaoming.values</span><br><span class="line">xiaoming.get         xiaoming.popitem    </span><br></pre></td></tr></table></figure>

<blockquote>
<p>有关 <strong>字典</strong> 的 <strong>常用操作</strong> 可以参照上图练习</p>
</blockquote>
<h3 id="3-3-循环遍历"><a href="#3-3-循环遍历" class="headerlink" title="3.3 循环遍历"></a>3.3 循环遍历</h3><ul>
<li><strong>遍历</strong> 就是 <strong>依次</strong> 从 <strong>字典</strong> 中获取所有键值对</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># for 循环内部使用的 `key 的变量` in 字典</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> xiaoming:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%s: %s&quot;</span> % (k, xiaoming[k]))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：在实际开发中，由于字典中每一个键值对保存数据的类型是不同的，所以针对字典的循环遍历需求并不是很多</p>
</blockquote>
<h3 id="3-4-应用场景"><a href="#3-4-应用场景" class="headerlink" title="3.4 应用场景"></a>3.4 <strong>应用场景</strong></h3><ul>
<li>尽管可以使用 <code>for in</code> 遍历 <strong>字典</strong></li>
<li>但是在开发中，更多的应用场景是：<ul>
<li>使用 <strong>多个键值对</strong>，存储 <strong>描述一个 <code>物体</code> 的相关信息</strong> —— 描述更复杂的数据信息</li>
<li>将 <strong>多个字典</strong> 放在 <strong>一个列表</strong> 中，再进行遍历，在循环体内部针对每一个字典进行 <strong>相同的处理</strong></li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">card_list = [&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">              <span class="string">&quot;qq&quot;</span>: <span class="string">&quot;12345&quot;</span>,</span><br><span class="line">              <span class="string">&quot;phone&quot;</span>: <span class="string">&quot;110&quot;</span>&#125;,</span><br><span class="line">             &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;李四&quot;</span>,</span><br><span class="line">              <span class="string">&quot;qq&quot;</span>: <span class="string">&quot;54321&quot;</span>,</span><br><span class="line">              <span class="string">&quot;phone&quot;</span>: <span class="string">&quot;10086&quot;</span>&#125;</span><br><span class="line">             ]</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="04-字符串"><a href="#04-字符串" class="headerlink" title="04. 字符串"></a>04. 字符串</h2><h3 id="4-1-字符串的定义"><a href="#4-1-字符串的定义" class="headerlink" title="4.1 字符串的定义"></a>4.1 字符串的定义</h3><ul>
<li><strong>字符串</strong> 就是 <strong>一串字符</strong>，是编程语言中表示文本的数据类型</li>
<li>在 Python 中可以使用 <strong>一对双引号</strong> <code>&quot;</code> 或者 <strong>一对单引号</strong> <code>&#39;</code> 定义一个字符串<ul>
<li>虽然可以使用 <code>\&quot;</code> 或者 <code>\&#39;</code> 做字符串的转义，但是在实际开发中：<ul>
<li>如果字符串内部需要使用 <code>&quot;</code>，可以使用 <code>&#39;</code> 定义字符串</li>
<li>如果字符串内部需要使用 <code>&#39;</code>，可以使用 <code>&quot;</code> 定义字符串</li>
</ul>
</li>
</ul>
</li>
<li>可以使用 <strong>索引</strong> 获取一个字符串中 <strong>指定位置的字符</strong>，索引计数从 <strong>0</strong> 开始</li>
<li>也可以使用 <code>for</code> <strong>循环遍历</strong> 字符串中每一个字符</li>
</ul>
<blockquote>
<p>大多数编程语言都是用 <code>&quot;</code> 来定义字符串</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">string = <span class="string">&quot;Hello Python&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> string:</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian2/005_%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="005_字符串示意图-w500"></p>
<h3 id="4-2-字符串的常用操作"><a href="#4-2-字符串的常用操作" class="headerlink" title="4.2 字符串的常用操作"></a>4.2 字符串的常用操作</h3><ul>
<li>在 <code>ipython3</code> 中定义一个 <strong>字符串</strong>，例如：<code>hello_str = &quot;&quot;</code></li>
<li>输入 <code>hello_str.</code> 按下 <code>TAB</code> 键，<code>ipython</code> 会提示 <strong>字符串</strong> 能够使用的 <strong>方法</strong> 如下：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [1]: hello_str.</span><br><span class="line">hello_str.capitalize    hello_str.isidentifier  hello_str.rindex</span><br><span class="line">hello_str.casefold      hello_str.islower       hello_str.rjust</span><br><span class="line">hello_str.center        hello_str.isnumeric     hello_str.rpartition</span><br><span class="line">hello_str.count         hello_str.isprintable   hello_str.rsplit</span><br><span class="line">hello_str.encode        hello_str.isspace       hello_str.rstrip</span><br><span class="line">hello_str.endswith      hello_str.istitle       hello_str.split</span><br><span class="line">hello_str.expandtabs    hello_str.isupper       hello_str.splitlines</span><br><span class="line">hello_str.find          hello_str.join          hello_str.startswith</span><br><span class="line">hello_str.format        hello_str.ljust         hello_str.strip</span><br><span class="line">hello_str.format_map    hello_str.lower         hello_str.swapcase</span><br><span class="line">hello_str.index         hello_str.lstrip        hello_str.title</span><br><span class="line">hello_str.isalnum       hello_str.maketrans     hello_str.translate</span><br><span class="line">hello_str.isalpha       hello_str.partition     hello_str.upper</span><br><span class="line">hello_str.isdecimal     hello_str.replace       hello_str.zfill</span><br><span class="line">hello_str.isdigit       hello_str.rfind</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：正是因为 python 内置提供的方法足够多，才使得在开发时，能够针对字符串进行更加灵活的操作！应对更多的开发需求！</p>
</blockquote>
<h4 id="1-判断类型-9"><a href="#1-判断类型-9" class="headerlink" title="1) 判断类型 - 9"></a>1) 判断类型 - 9</h4><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>string.isspace()</td>
<td>如果 string 中只包含空格，则返回 True</td>
</tr>
<tr>
<td>string.isalnum()</td>
<td>如果 string 至少有一个字符并且所有字符都是字母或数字则返回 True</td>
</tr>
<tr>
<td>string.isalpha()</td>
<td>如果 string 至少有一个字符并且所有字符都是字母则返回 True</td>
</tr>
<tr>
<td>string.isdecimal()</td>
<td>如果 string 只包含数字则返回 True，<code>全角数字</code></td>
</tr>
<tr>
<td>string.isdigit()</td>
<td>如果 string 只包含数字则返回 True，<code>全角数字</code>、<code>⑴</code>、<code>\u00b2</code></td>
</tr>
<tr>
<td>string.isnumeric()</td>
<td>如果 string 只包含数字则返回 True，<code>全角数字</code>，<code>汉字数字</code></td>
</tr>
<tr>
<td>string.istitle()</td>
<td>如果 string 是标题化的(每个单词的首字母大写)则返回 True</td>
</tr>
<tr>
<td>string.islower()</td>
<td>如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True</td>
</tr>
<tr>
<td>string.isupper()</td>
<td>如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True</td>
</tr>
</tbody></table>
<h4 id="2-查找和替换-7"><a href="#2-查找和替换-7" class="headerlink" title="2) 查找和替换 - 7"></a>2) 查找和替换 - 7</h4><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>string.startswith(str)</td>
<td>检查字符串是否是以 str 开头，是则返回 True</td>
</tr>
<tr>
<td>string.endswith(str)</td>
<td>检查字符串是否是以 str 结束，是则返回 True</td>
</tr>
<tr>
<td>string.find(str, start&#x3D;0, end&#x3D;len(string))</td>
<td>检测 str 是否包含在 string 中，如果 start 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回 <code>-1</code></td>
</tr>
<tr>
<td>string.rfind(str, start&#x3D;0, end&#x3D;len(string))</td>
<td>类似于 find()，不过是从右边开始查找</td>
</tr>
<tr>
<td>string.index(str, start&#x3D;0, end&#x3D;len(string))</td>
<td>跟 find() 方法类似，不过如果 str 不在 string 会报错</td>
</tr>
<tr>
<td>string.rindex(str, start&#x3D;0, end&#x3D;len(string))</td>
<td>类似于 index()，不过是从右边开始</td>
</tr>
<tr>
<td>string.replace(old_str, new_str, num&#x3D;string.count(old))</td>
<td>把 string 中的 old_str 替换成 new_str，如果 num 指定，则替换不超过 num 次</td>
</tr>
</tbody></table>
<h4 id="3-大小写转换-5"><a href="#3-大小写转换-5" class="headerlink" title="3) 大小写转换 - 5"></a>3) 大小写转换 - 5</h4><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>string.capitalize()</td>
<td>把字符串的第一个字符大写</td>
</tr>
<tr>
<td>string.title()</td>
<td>把字符串的每个单词首字母大写</td>
</tr>
<tr>
<td>string.lower()</td>
<td>转换 string 中所有大写字符为小写</td>
</tr>
<tr>
<td>string.upper()</td>
<td>转换 string 中的小写字母为大写</td>
</tr>
<tr>
<td>string.swapcase()</td>
<td>翻转 string 中的大小写</td>
</tr>
</tbody></table>
<h4 id="4-文本对齐-3"><a href="#4-文本对齐-3" class="headerlink" title="4) 文本对齐 - 3"></a>4) 文本对齐 - 3</h4><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>string.ljust(width)</td>
<td>返回一个原字符串左对齐，并使用空格填充至长度 width 的新字符串</td>
</tr>
<tr>
<td>string.rjust(width)</td>
<td>返回一个原字符串右对齐，并使用空格填充至长度 width 的新字符串</td>
</tr>
<tr>
<td>string.center(width)</td>
<td>返回一个原字符串居中，并使用空格填充至长度 width 的新字符串</td>
</tr>
</tbody></table>
<h4 id="5-去除空白字符-3"><a href="#5-去除空白字符-3" class="headerlink" title="5) 去除空白字符 - 3"></a>5) 去除空白字符 - 3</h4><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>string.lstrip()</td>
<td>截掉 string 左边（开始）的空白字符</td>
</tr>
<tr>
<td>string.rstrip()</td>
<td>截掉 string 右边（末尾）的空白字符</td>
</tr>
<tr>
<td>string.strip()</td>
<td>截掉 string 左右两边的空白字符</td>
</tr>
</tbody></table>
<h4 id="6-拆分和连接-5"><a href="#6-拆分和连接-5" class="headerlink" title="6) 拆分和连接 - 5"></a>6) 拆分和连接 - 5</h4><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>string.partition(str)</td>
<td>把字符串 string 分成一个 3 元素的元组 (str前面, str, str后面)</td>
</tr>
<tr>
<td>string.rpartition(str)</td>
<td>类似于 partition() 方法，不过是从右边开始查找</td>
</tr>
<tr>
<td>string.split(str&#x3D;””, num)</td>
<td>以 str 为分隔符拆分 string，如果 num 有指定值，则仅分隔 num + 1 个子字符串，str 默认包含 ‘\r’, ‘\t’, ‘\n’ 和空格</td>
</tr>
<tr>
<td>string.splitlines()</td>
<td>按照行(‘\r’, ‘\n’, ‘\r\n’)分隔，返回一个包含各行作为元素的列表</td>
</tr>
<tr>
<td>string.join(seq)</td>
<td>以 string 作为分隔符，将 seq 中所有的元素（的字符串表示）合并为一个新的字符串</td>
</tr>
</tbody></table>
<h3 id="4-3-字符串的切片"><a href="#4-3-字符串的切片" class="headerlink" title="4.3 字符串的切片"></a>4.3 字符串的切片</h3><ul>
<li><strong>切片</strong> 方法适用于 <strong>字符串</strong>、<strong>列表</strong>、<strong>元组</strong><ul>
<li><strong>切片</strong> 使用 <strong>索引值</strong> 来限定范围，从一个大的 <strong>字符串</strong> 中 <strong>切出</strong> 小的 <strong>字符串</strong></li>
<li><strong>列表</strong> 和 <strong>元组</strong> 都是 <strong>有序</strong> 的集合，都能够 <strong>通过索引值</strong> 获取到对应的数据</li>
<li><strong>字典</strong> 是一个 <strong>无序</strong> 的集合，是使用 <strong>键值对</strong> 保存数据</li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian2/006_%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B4%A2%E5%BC%95%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="006_字符串索引示意图"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">字符串[开始索引:结束索引:步长]</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：</p>
<ol>
<li>指定的区间属于 <strong>左闭右开</strong> 型 <code>[开始索引,  结束索引)</code> &#x3D;&gt; <code>开始索引 &gt;= 范围 &lt; 结束索引</code><ul>
<li>从 <code>起始</code> 位开始，到 <strong><code>结束</code>位的前一位</strong> 结束（<strong>不包含结束位本身</strong>)</li>
</ul>
</li>
<li>从头开始，<strong>开始索引</strong> <strong>数字可以省略，冒号不能省略</strong></li>
<li>到末尾结束，<strong>结束索引</strong> <strong>数字可以省略，冒号不能省略</strong></li>
<li>步长默认为 <code>1</code>，如果连续切片，<strong>数字和冒号都可以省略</strong></li>
</ol>
<h4 id="索引的顺序和倒序"><a href="#索引的顺序和倒序" class="headerlink" title="索引的顺序和倒序"></a>索引的顺序和倒序</h4><ul>
<li>在 Python 中不仅支持 <strong>顺序索引</strong>，同时还支持 <strong>倒序索引</strong></li>
<li>所谓倒序索引就是 <strong>从右向左</strong> 计算索引<ul>
<li>最右边的索引值是 <strong>-1</strong>，依次递减</li>
</ul>
</li>
</ul>
<p><strong>演练需求</strong></p>
<ul>
<li><ol>
<li>截取从 2 ~ 5 位置 的字符串</li>
</ol>
</li>
<li><ol start="2">
<li>截取从 2 ~ <code>末尾</code> 的字符串</li>
</ol>
</li>
<li><ol start="3">
<li>截取从 <code>开始</code> ~ 5 位置 的字符串</li>
</ol>
</li>
<li><ol start="4">
<li>截取完整的字符串</li>
</ol>
</li>
<li><ol start="5">
<li>从开始位置，每隔一个字符截取字符串</li>
</ol>
</li>
<li><ol start="6">
<li>从索引 1 开始，每隔一个取一个</li>
</ol>
</li>
<li><ol start="7">
<li>截取从 2 ~ <code>末尾 - 1</code> 的字符串</li>
</ol>
</li>
<li><ol start="8">
<li>截取字符串末尾两个字符</li>
</ol>
</li>
<li><ol start="9">
<li>字符串的逆序（面试题）</li>
</ol>
</li>
</ul>
<p><strong>答案</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">num_str = &quot;0123456789&quot;</span><br><span class="line"></span><br><span class="line"># 1. 截取从 2 ~ 5 位置 的字符串</span><br><span class="line">print(num_str[2:6])</span><br><span class="line"></span><br><span class="line"># 2. 截取从 2 ~ `末尾` 的字符串</span><br><span class="line">print(num_str[2:])</span><br><span class="line"></span><br><span class="line"># 3. 截取从 `开始` ~ 5 位置 的字符串</span><br><span class="line">print(num_str[:6])</span><br><span class="line"></span><br><span class="line"># 4. 截取完整的字符串</span><br><span class="line">print(num_str[:])</span><br><span class="line"></span><br><span class="line"># 5. 从开始位置，每隔一个字符截取字符串</span><br><span class="line">print(num_str[::2])</span><br><span class="line"></span><br><span class="line"># 6. 从索引 1 开始，每隔一个取一个</span><br><span class="line">print(num_str[1::2])</span><br><span class="line"></span><br><span class="line"># 倒序切片</span><br><span class="line"># -1 表示倒数第一个字符</span><br><span class="line">print(num_str[-1])</span><br><span class="line"></span><br><span class="line"># 7. 截取从 2 ~ `末尾 - 1` 的字符串</span><br><span class="line">print(num_str[2:-1])</span><br><span class="line"></span><br><span class="line"># 8. 截取字符串末尾两个字符</span><br><span class="line">print(num_str[-2:])</span><br><span class="line"></span><br><span class="line"># 9. 字符串的逆序（面试题）</span><br><span class="line">print(num_str[::-1])</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="05-公共方法"><a href="#05-公共方法" class="headerlink" title="05. 公共方法"></a>05. 公共方法</h2><h3 id="5-1-Python-内置函数"><a href="#5-1-Python-内置函数" class="headerlink" title="5.1 Python 内置函数"></a>5.1 Python 内置函数</h3><p>Python 包含了以下内置函数：</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>len(item)</td>
<td>计算容器中元素个数</td>
<td></td>
</tr>
<tr>
<td>del(item)</td>
<td>删除变量</td>
<td>del 有两种方式</td>
</tr>
<tr>
<td>max(item)</td>
<td>返回容器中元素最大值</td>
<td>如果是字典，只针对 key 比较</td>
</tr>
<tr>
<td>min(item)</td>
<td>返回容器中元素最小值</td>
<td>如果是字典，只针对 key 比较</td>
</tr>
<tr>
<td>cmp(item1, item2)</td>
<td>比较两个值，-1 小于&#x2F;0 相等&#x2F;1 大于</td>
<td>Python 3.x 取消了 cmp 函数</td>
</tr>
</tbody></table>
<p><strong>注意</strong></p>
<ul>
<li><strong>字符串</strong> 比较符合以下规则： “0” &lt; “A” &lt; “a”</li>
</ul>
<h3 id="5-2-切片"><a href="#5-2-切片" class="headerlink" title="5.2 切片"></a>5.2 切片</h3><p>| 描述 | Python 表达式 | 结果 | 支持的数据类型 |<br>| :—: | — | — | — | — |<br>| 切片 | “0123456789”[::-2] | “97531” | 字符串、列表、元组 |</p>
<ul>
<li><strong>切片</strong> 使用 <strong>索引值</strong> 来限定范围，从一个大的 <strong>字符串</strong> 中 <strong>切出</strong> 小的 <strong>字符串</strong></li>
<li><strong>列表</strong> 和 <strong>元组</strong> 都是 <strong>有序</strong> 的集合，都能够 <strong>通过索引值</strong> 获取到对应的数据</li>
<li><strong>字典</strong> 是一个 <strong>无序</strong> 的集合，是使用 <strong>键值对</strong> 保存数据</li>
</ul>
<h3 id="5-3-运算符"><a href="#5-3-运算符" class="headerlink" title="5.3 运算符"></a>5.3 运算符</h3><table>
<thead>
<tr>
<th align="center">运算符</th>
<th>Python 表达式</th>
<th>结果</th>
<th>描述</th>
<th>支持的数据类型</th>
</tr>
</thead>
<tbody><tr>
<td align="center">+</td>
<td>[1, 2] + [3, 4]</td>
<td>[1, 2, 3, 4]</td>
<td>合并</td>
<td>字符串、列表、元组</td>
</tr>
<tr>
<td align="center">*</td>
<td>[“Hi!”] * 4</td>
<td>[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td>
<td>重复</td>
<td>字符串、列表、元组</td>
</tr>
<tr>
<td align="center">in</td>
<td>3 in (1, 2, 3)</td>
<td>True</td>
<td>元素是否存在</td>
<td>字符串、列表、元组、字典</td>
</tr>
<tr>
<td align="center">not in</td>
<td>4 not in (1, 2, 3)</td>
<td>True</td>
<td>元素是否不存在</td>
<td>字符串、列表、元组、字典</td>
</tr>
<tr>
<td align="center">&gt; &gt;&#x3D; &#x3D;&#x3D; &lt; &lt;&#x3D;</td>
<td>(1, 2, 3) &lt; (2, 2, 3)</td>
<td>True</td>
<td>元素比较</td>
<td>字符串、列表、元组</td>
</tr>
</tbody></table>
<p><strong>注意</strong></p>
<ul>
<li><code>in</code> 在对 <strong>字典</strong> 操作时，判断的是 <strong>字典的键</strong></li>
<li><code>in</code> 和 <code>not in</code> 被称为 <strong>成员运算符</strong></li>
</ul>
<h4 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h4><p>成员运算符用于 <strong>测试</strong> 序列中是否包含指定的 <strong>成员</strong></p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>in</td>
<td>如果在指定的序列中找到值返回 True，否则返回 False</td>
<td><code>3 in (1, 2, 3)</code> 返回 <code>True</code></td>
</tr>
<tr>
<td>not in</td>
<td>如果在指定的序列中没有找到值返回 True，否则返回 False</td>
<td><code>3 not in (1, 2, 3)</code> 返回 <code>False</code></td>
</tr>
</tbody></table>
<p>注意：在对 <strong>字典</strong> 操作时，判断的是 <strong>字典的键</strong></p>
<h3 id="5-4-完整的-for-循环语法"><a href="#5-4-完整的-for-循环语法" class="headerlink" title="5.4 完整的 for 循环语法"></a>5.4 完整的 for 循环语法</h3><ul>
<li>在 <code>Python</code> 中完整的 <code>for 循环</code> 的语法如下：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> 变量 <span class="keyword">in</span> 集合:</span><br><span class="line">    </span><br><span class="line">    循环体代码</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    没有通过 <span class="keyword">break</span> 退出循环，循环结束后，会执行的代码</span><br></pre></td></tr></table></figure>

<h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul>
<li>在 <strong>迭代遍历</strong> 嵌套的数据类型时，例如 <strong>一个列表包含了多个字典</strong></li>
<li>需求：要判断 某一个字典中 是否存在 指定的 值 <ul>
<li>如果 <strong>存在</strong>，提示并且退出循环</li>
<li>如果 <strong>不存在</strong>，在 <strong>循环整体结束</strong> 后，希望 <strong>得到一个统一的提示</strong></li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">students = [</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;阿土&quot;</span>,</span><br><span class="line">     <span class="string">&quot;age&quot;</span>: <span class="number">20</span>,</span><br><span class="line">     <span class="string">&quot;gender&quot;</span>: <span class="literal">True</span>,</span><br><span class="line">     <span class="string">&quot;height&quot;</span>: <span class="number">1.7</span>,</span><br><span class="line">     <span class="string">&quot;weight&quot;</span>: <span class="number">75.0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;小美&quot;</span>,</span><br><span class="line">     <span class="string">&quot;age&quot;</span>: <span class="number">19</span>,</span><br><span class="line">     <span class="string">&quot;gender&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">     <span class="string">&quot;height&quot;</span>: <span class="number">1.6</span>,</span><br><span class="line">     <span class="string">&quot;weight&quot;</span>: <span class="number">45.0</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">find_name = <span class="string">&quot;阿土&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> stu_dict <span class="keyword">in</span> students:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(stu_dict)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断当前遍历的字典中姓名是否为find_name</span></span><br><span class="line">    <span class="keyword">if</span> stu_dict[<span class="string">&quot;name&quot;</span>] == find_name:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;找到了&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果已经找到，直接退出循环，就不需要再对后续的数据进行比较</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;没有找到&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;循环结束&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>python面对过程学习</category>
      </categories>
      <tags>
        <tag>python学习</tag>
      </tags>
  </entry>
  <entry>
    <title>16.函数进阶</title>
    <url>/2022/01/14/python%E9%9D%A2%E5%AF%B9%E8%BF%87%E7%A8%8B%E5%AD%A6%E4%B9%A0/16.%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<h1 id="函数进阶"><a href="#函数进阶" class="headerlink" title="函数进阶"></a>函数进阶</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>函数参数和返回值的作用</li>
<li>函数的返回值 进阶</li>
<li>函数的参数 进阶</li>
<li>递归函数</li>
</ul>
<h2 id="01-函数参数和返回值的作用"><a href="#01-函数参数和返回值的作用" class="headerlink" title="01. 函数参数和返回值的作用"></a>01. 函数参数和返回值的作用</h2><p>函数根据 <strong>有没有参数</strong> 以及 <strong>有没有返回值</strong>，可以 <strong>相互组合</strong>，一共有 <strong>4 种</strong> 组合形式</p>
<ol>
<li>无参数，无返回值</li>
<li>无参数，有返回值</li>
<li>有参数，无返回值</li>
<li>有参数，有返回值</li>
</ol>
<p><img src="https://s2.loli.net/2022/01/11/VRvqFS4xZLK6byG.png" alt="001_函数参数和返回值.png"></p>
<blockquote>
<p>定义函数时，<strong>是否接收参数，或者是否返回结果</strong>，是根据 <strong>实际的功能需求</strong> 来决定的！</p>
</blockquote>
<ol>
<li>如果函数 <strong>内部处理的数据不确定</strong>，就可以将外界的数据以参数传递到函数内部</li>
<li>如果希望一个函数 <strong>执行完成后，向外界汇报执行结果</strong>，就可以增加函数的返回值</li>
</ol>
<h3 id="1-1-无参数，无返回值"><a href="#1-1-无参数，无返回值" class="headerlink" title="1.1 无参数，无返回值"></a>1.1 无参数，无返回值</h3><p>此类函数，不接收参数，也没有返回值，应用场景如下：</p>
<ol>
<li><strong>只是单纯地做一件事情</strong>，例如 <strong>显示菜单</strong></li>
<li>在函数内部 <strong>针对全局变量进行操作</strong>，例如：<strong>新建名片</strong>，最终结果 <strong>记录在全局变量</strong> 中</li>
</ol>
<blockquote>
<p>注意：</p>
</blockquote>
<ul>
<li>如果全局变量的数据类型是一个 <strong>可变类型</strong>，在函数内部可以使用 <strong>方法</strong> 修改全局变量的内容 —— <strong>变量的引用不会改变</strong></li>
<li>在函数内部，<strong>使用赋值语句</strong> 才会 <strong>修改变量的引用</strong></li>
</ul>
<h3 id="1-2-无参数，有返回值"><a href="#1-2-无参数，有返回值" class="headerlink" title="1.2 无参数，有返回值"></a>1.2 无参数，有返回值</h3><p>此类函数，不接收参数，但是有返回值，应用场景如下：</p>
<ul>
<li>采集数据，例如 <strong>温度计</strong>，返回结果就是当前的温度，而不需要传递任何的参数</li>
</ul>
<h3 id="1-3-有参数，无返回值"><a href="#1-3-有参数，无返回值" class="headerlink" title="1.3 有参数，无返回值"></a>1.3 有参数，无返回值</h3><p>此类函数，接收参数，没有返回值，应用场景如下：</p>
<ul>
<li>函数内部的代码保持不变，针对 <strong>不同的参数 处理 不同的数据</strong></li>
<li>例如 <strong>名片管理系统</strong> 针对 <strong>找到的名片</strong> 做 <strong>修改</strong>、<strong>删除</strong> 操作</li>
</ul>
<h3 id="1-4-有参数，有返回值"><a href="#1-4-有参数，有返回值" class="headerlink" title="1.4 有参数，有返回值"></a>1.4 有参数，有返回值</h3><p>此类函数，接收参数，同时有返回值，应用场景如下：</p>
<ul>
<li>函数内部的代码保持不变，针对 <strong>不同的参数 处理 不同的数据</strong>，并且 <strong>返回期望的处理结果</strong></li>
<li>例如 <strong>名片管理系统</strong> 使用 <strong>字典默认值</strong> 和 <strong>提示信息</strong> 提示用户输入内容<ul>
<li>如果输入，返回输入内容</li>
<li>如果没有输入，返回字典默认值</li>
</ul>
</li>
</ul>
<h2 id="02-函数的返回值-进阶"><a href="#02-函数的返回值-进阶" class="headerlink" title="02. 函数的返回值 进阶"></a>02. 函数的返回值 进阶</h2><ul>
<li>在程序开发中，有时候，会希望 <strong>一个函数执行结束后，告诉调用者一个结果</strong>，以便调用者针对具体的结果做后续的处理</li>
<li><strong>返回值</strong> 是函数 <strong>完成工作</strong>后，<strong>最后</strong> 给调用者的 <strong>一个结果</strong></li>
<li>在函数中使用 <code>return</code> 关键字可以返回结果</li>
<li>调用函数一方，可以 <strong>使用变量</strong> 来 <strong>接收</strong> 函数的返回结果</li>
</ul>
<blockquote>
<p>问题：一个函数执行后能否返回多个结果？</p>
</blockquote>
<h3 id="示例-——-温度和湿度测量"><a href="#示例-——-温度和湿度测量" class="headerlink" title="示例 —— 温度和湿度测量"></a>示例 —— 温度和湿度测量</h3><ul>
<li>假设要开发一个函数能够同时返回当前的温度和湿度</li>
<li><strong>先完成返回温度</strong>的功能如下：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">measure</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;返回当前的温度&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;开始测量...&quot;</span>)</span><br><span class="line">    temp = <span class="number">39</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测量结束...&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> temp</span><br><span class="line"></span><br><span class="line">result = measure()</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>

<ul>
<li>在利用 <strong>元组</strong> 在返回温度的同时，也能够返回 <strong>湿度</strong></li>
<li>改造如下：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">measure</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;返回当前的温度&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;开始测量...&quot;</span>)</span><br><span class="line">    temp = <span class="number">39</span></span><br><span class="line">    wetness = <span class="number">10</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测量结束...&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (temp, wetness)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：如果一个函数返回的是元组，括号可以省略</p>
</blockquote>
<p><strong>技巧</strong> </p>
<ul>
<li>在 <code>Python</code> 中，可以 <strong>将一个元组</strong> 使用 <strong>赋值语句</strong> 同时赋值给 <strong>多个变量</strong></li>
<li>注意：变量的数量需要和元组中的元素数量保持一致</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = temp, wetness = measure()</span><br><span class="line"><span class="comment"># 如果函数返回的类型是元组，同时希望单独的处理元组中的元素</span></span><br><span class="line"><span class="comment"># 可以使用多个变量，一次接收函数的返回结果</span></span><br><span class="line"><span class="comment"># 注意：使用多个变量接收结果时，变量的个数应该和元组中元素的个数保持一致</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/01/23/gvMYcNoFGHErOJI.png" alt="image-20220123145337189.png"></p>
<h3 id="面试题-——-交换两个数字"><a href="#面试题-——-交换两个数字" class="headerlink" title="面试题 —— 交换两个数字"></a>面试题 —— 交换两个数字</h3><p><strong>题目要求</strong></p>
<ol>
<li>有两个整数变量 <code>a = 6</code>, <code>b = 100</code></li>
<li>不使用其他变量，<strong>交换两个变量的值</strong></li>
</ol>
<h4 id="解法-1-——-使用其他变量"><a href="#解法-1-——-使用其他变量" class="headerlink" title="解法 1 —— 使用其他变量"></a>解法 1 —— 使用其他变量</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解法 1 - 使用临时变量</span></span><br><span class="line">c = b</span><br><span class="line">b = a</span><br><span class="line">a = c</span><br></pre></td></tr></table></figure>

<h4 id="解法-2-——-不使用临时变量"><a href="#解法-2-——-不使用临时变量" class="headerlink" title="解法 2 —— 不使用临时变量"></a>解法 2 —— 不使用临时变量</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解法 2 - 不使用临时变量</span></span><br><span class="line">a = a + b</span><br><span class="line">b = a - b</span><br><span class="line">a = a - b</span><br></pre></td></tr></table></figure>

<h4 id="解法-3-——-Python-专有，利用元组"><a href="#解法-3-——-Python-专有，利用元组" class="headerlink" title="解法 3 —— Python 专有，利用元组"></a>解法 3 —— Python 专有，利用元组</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a, b = b, a</span><br></pre></td></tr></table></figure>

<h2 id="03-函数的参数-进阶"><a href="#03-函数的参数-进阶" class="headerlink" title="03. 函数的参数 进阶"></a>03. 函数的参数 进阶</h2><h3 id="3-1-不可变和可变的参数"><a href="#3-1-不可变和可变的参数" class="headerlink" title="3.1. 不可变和可变的参数"></a>3.1. 不可变和可变的参数</h3><blockquote>
<p>问题 1：在函数内部，针对参数使用 <strong>赋值语句</strong>，会不会影响调用函数时传递的 <strong>实参变量</strong>？ —— 不会！</p>
</blockquote>
<ul>
<li>无论传递的参数是 <strong>可变</strong> 还是 <strong>不可变</strong> <ul>
<li>只要 <strong>针对参数</strong> 使用 <strong>赋值语句</strong>，会在 <strong>函数内部</strong> 修改 <strong>局部变量的引用</strong>，<strong>不会影响到 外部变量的引用</strong></li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">demo</span>(<span class="params">num, num_list</span>):</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;函数内部&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 赋值语句</span></span><br><span class="line">    num = <span class="number">200</span></span><br><span class="line">    num_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line">    <span class="built_in">print</span>(num_list)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;函数代码完成&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gl_num = <span class="number">99</span></span><br><span class="line">gl_list = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">demo(gl_num, gl_list)</span><br><span class="line"><span class="built_in">print</span>(gl_num)</span><br><span class="line"><span class="built_in">print</span>(gl_list)</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<blockquote>
<p>问题 2：如果传递的参数是 <strong>可变类型</strong>，在函数内部，使用 <strong>方法</strong> 修改了数据的内容，<strong>同样会影响到外部的数据</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mutable</span>(<span class="params">num_list</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># num_list = [1, 2, 3]</span></span><br><span class="line">    num_list.extend([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(num_list)</span><br><span class="line"></span><br><span class="line">gl_list = [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">mutable(gl_list)</span><br><span class="line"><span class="built_in">print</span>(gl_list)</span><br></pre></td></tr></table></figure>

<h4 id="面试题-——"><a href="#面试题-——" class="headerlink" title="面试题 —— +="></a>面试题 —— <code>+=</code></h4><ul>
<li>在 <code>python</code> 中，列表变量调用 <code>+=</code> 本质上是在执行列表变量的 <code>extend</code> 方法，不会修改变量的引用</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">demo</span>(<span class="params">num, num_list</span>):</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;函数内部代码&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># num = num + num</span></span><br><span class="line">    num += num</span><br><span class="line">    <span class="comment"># num_list.extend(num_list) 由于是调用方法，所以不会修改变量的引用</span></span><br><span class="line">    <span class="comment"># 函数执行结束后，外部数据同样会发生变化</span></span><br><span class="line">    num_list += num_list</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line">    <span class="built_in">print</span>(num_list)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;函数代码完成&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gl_num = <span class="number">9</span></span><br><span class="line">gl_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">demo(gl_num, gl_list)</span><br><span class="line"><span class="built_in">print</span>(gl_num)</span><br><span class="line"><span class="built_in">print</span>(gl_list)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-2-缺省参数"><a href="#3-2-缺省参数" class="headerlink" title="3.2 缺省参数"></a>3.2 缺省参数</h3><ul>
<li>定义函数时，可以给 <strong>某个参数</strong> 指定一个<strong>默认值</strong>，具有默认值的参数就叫做 <strong>缺省参数</strong></li>
<li>调用函数时，如果没有传入 <strong>缺省参数</strong> 的值，则在函数内部使用定义函数时指定的 <strong>参数默认值</strong></li>
<li>函数的缺省参数，<strong>将常见的值设置为参数的缺省值</strong>，从而 <strong>简化函数的调用</strong></li>
<li>例如：对列表排序的方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gl_num_list = [<span class="number">6</span>, <span class="number">3</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认就是升序排序，因为这种应用需求更多</span></span><br><span class="line">gl_num_list.sort()</span><br><span class="line"><span class="built_in">print</span>(gl_num_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只有当需要降序排序时，才需要传递 `reverse` 参数</span></span><br><span class="line">gl_num_list.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(gl_num_list)</span><br></pre></td></tr></table></figure>

<h4 id="指定函数的缺省参数"><a href="#指定函数的缺省参数" class="headerlink" title="指定函数的缺省参数"></a>指定函数的缺省参数</h4><ul>
<li>在参数后使用赋值语句，可以指定参数的缺省值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_info</span>(<span class="params">name, gender=<span class="literal">True</span></span>):</span><br><span class="line"></span><br><span class="line">    gender_text = <span class="string">&quot;男生&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> gender:</span><br><span class="line">        gender_text = <span class="string">&quot;女生&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%s 是 %s&quot;</span> % (name, gender_text))</span><br></pre></td></tr></table></figure>

<p><strong>提示</strong></p>
<ol>
<li>缺省参数，需要使用 <strong>最常见的值</strong> 作为默认值！</li>
<li>如果一个参数的值 <strong>不能确定</strong>，则不应该设置默认值，具体的数值在调用函数时，由外界传递！</li>
</ol>
<h4 id="缺省参数的注意事项"><a href="#缺省参数的注意事项" class="headerlink" title="缺省参数的注意事项"></a>缺省参数的注意事项</h4><h5 id="1-缺省参数的定义位置"><a href="#1-缺省参数的定义位置" class="headerlink" title="1) 缺省参数的定义位置"></a>1) 缺省参数的定义位置</h5><ul>
<li><strong>必须保证</strong> <strong>带有默认值的缺省参数</strong> <strong>在参数列表末尾</strong></li>
<li>所以，以下定义是错误的！</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_info</span>(<span class="params">name, gender=<span class="literal">True</span>, title</span>):</span><br></pre></td></tr></table></figure>

<h5 id="2-调用带有多个缺省参数的函数"><a href="#2-调用带有多个缺省参数的函数" class="headerlink" title="2) 调用带有多个缺省参数的函数"></a>2) 调用带有多个缺省参数的函数</h5><ul>
<li>在 <strong>调用函数时</strong>，如果有 <strong>多个缺省参数</strong>，<strong>需要指定参数名</strong>，这样解释器才能够知道参数的对应关系！</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_info</span>(<span class="params">name, title=<span class="string">&quot;&quot;</span>, gender=<span class="literal">True</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param title: 职位</span></span><br><span class="line"><span class="string">    :param name: 班上同学的姓名</span></span><br><span class="line"><span class="string">    :param gender: True 男生 False 女生</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    gender_text = <span class="string">&quot;男生&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> gender:</span><br><span class="line">        gender_text = <span class="string">&quot;女生&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%s%s 是 %s&quot;</span> % (title, name, gender_text))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提示：在指定缺省参数的默认值时，应该使用最常见的值作为默认值！</span></span><br><span class="line">print_info(<span class="string">&quot;小明&quot;</span>)</span><br><span class="line">print_info(<span class="string">&quot;老王&quot;</span>, title=<span class="string">&quot;班长&quot;</span>)</span><br><span class="line">print_info(<span class="string">&quot;小美&quot;</span>, gender=<span class="literal">False</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-3-多值参数（知道）"><a href="#3-3-多值参数（知道）" class="headerlink" title="3.3 多值参数（知道）"></a>3.3 多值参数（知道）</h3><h4 id="定义支持多值参数的函数"><a href="#定义支持多值参数的函数" class="headerlink" title="定义支持多值参数的函数"></a>定义支持多值参数的函数</h4><ul>
<li><p>有时可能需要 <strong>一个函数</strong> 能够处理的参数 <strong>个数</strong> 是不确定的，这个时候，就可以使用 <strong>多值参数</strong></p>
</li>
<li><p><code>python</code> 中有 <strong>两种</strong> 多值参数：</p>
<ul>
<li>参数名前增加 <strong>一个</strong> <code>*</code> 可以接收 <strong>元组</strong></li>
<li>参数名前增加 <strong>两个</strong> <code>*</code> 可以接收 <strong>字典</strong></li>
</ul>
</li>
<li><p>一般在给多值参数命名时，<strong>习惯</strong>使用以下两个名字</p>
<ul>
<li><code>*args</code> —— 存放 <strong>元组</strong> 参数，前面有一个 <code>*</code></li>
<li><code>**kwargs</code> —— 存放 <strong>字典</strong> 参数，前面有两个 <code>*</code></li>
</ul>
</li>
<li><p><code>args</code> 是 <code>arguments</code> 的缩写，有变量的含义</p>
</li>
<li><p><code>kw</code> 是 <code>keyword</code> 的缩写，<code>kwargs</code> 可以记忆 <strong>键值对参数</strong></p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">demo</span>(<span class="params">num, *args, **kwargs</span>):</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">demo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, name=<span class="string">&quot;小明&quot;</span>, age=<span class="number">18</span>, gender=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：<strong>多值参数</strong> 的应用会经常出现在网络上一些大牛开发的框架中，知道多值参数，<strong>有利于我们能够读懂大牛的代码</strong></p>
</blockquote>
<h4 id="多值参数案例-——-计算任意多个数字的和"><a href="#多值参数案例-——-计算任意多个数字的和" class="headerlink" title="多值参数案例 —— 计算任意多个数字的和"></a>多值参数案例 —— 计算任意多个数字的和</h4><p><strong>需求</strong></p>
<ol>
<li>定义一个函数 <code>sum_numbers</code>，可以接收的 <strong>任意多个整数</strong></li>
<li>功能要求：将传递的 <strong>所有数字累加</strong> 并且返回累加结果</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum_numbers</span>(<span class="params">*args</span>):</span><br><span class="line"></span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 遍历 args 元组顺序求和</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> args:</span><br><span class="line">        num += n</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sum_numbers(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure>

<h4 id="元组和字典的拆包（知道）"><a href="#元组和字典的拆包（知道）" class="headerlink" title="元组和字典的拆包（知道）"></a>元组和字典的拆包（知道）</h4><ul>
<li>在调用带有多值参数的函数时，如果希望：<ul>
<li>将一个 <strong>元组变量</strong>，直接传递给 <code>args</code></li>
<li>将一个 <strong>字典变量</strong>，直接传递给 <code>kwargs</code></li>
</ul>
</li>
<li>就可以使用 <strong>拆包</strong>，简化参数的传递，<strong>拆包</strong> 的方式是：<ul>
<li>在 <strong>元组变量前</strong>，增加 <strong>一个</strong> <code>*</code></li>
<li>在 <strong>字典变量前</strong>，增加 <strong>两个</strong> <code>*</code></li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">demo</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要将一个元组变量/字典变量传递给函数对应的参数</span></span><br><span class="line">gl_nums = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">gl_xiaoming = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;小明&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 会把 num_tuple 和 xiaoming 作为元组传递个 args</span></span><br><span class="line"><span class="comment"># demo(gl_nums, gl_xiaoming)</span></span><br><span class="line">demo(*gl_nums, **gl_xiaoming)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="04-函数的递归"><a href="#04-函数的递归" class="headerlink" title="04. 函数的递归"></a>04. 函数的递归</h2><blockquote>
<p>函数调用自身的 <strong>编程技巧</strong> 称为递归</p>
</blockquote>
<h3 id="4-1-递归函数的特点"><a href="#4-1-递归函数的特点" class="headerlink" title="4.1 递归函数的特点"></a>4.1 递归函数的特点</h3><p><strong>特点</strong></p>
<ul>
<li><strong>一个函数</strong> <strong>内部</strong> <strong>调用自己</strong><ul>
<li>函数内部可以调用其他函数，当然在函数内部也可以调用自己</li>
</ul>
</li>
</ul>
<p><strong>代码特点</strong></p>
<ol>
<li>函数内部的 <strong>代码</strong> 是相同的，只是针对 <strong>参数</strong> 不同，<strong>处理的结果不同</strong></li>
<li>当 <strong>参数满足一个条件</strong> 时，函数不再执行<ul>
<li><strong>这个非常重要</strong>，通常被称为递归的出口，否则 <strong>会出现死循环</strong>！</li>
</ul>
</li>
</ol>
<p>示例代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum_numbers</span>(<span class="params">num</span>):</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 递归的出口很重要，否则会出现死循环</span></span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    sum_numbers(num - <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">sum_numbers(<span class="number">3</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/01/11/osTxI1FaSPtYzQj.png" alt="002_递归调用示意图I.png"></p>
<h3 id="4-2-递归案例-——-计算数字累加"><a href="#4-2-递归案例-——-计算数字累加" class="headerlink" title="4.2 递归案例 —— 计算数字累加"></a>4.2 递归案例 —— 计算数字累加</h3><p><strong>需求</strong></p>
<ol>
<li>定义一个函数 <code>sum_numbers</code></li>
<li>能够接收一个 <code>num</code> 的整数参数</li>
<li>计算 1 + 2 + … num 的结果</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum_numbers</span>(<span class="params">num</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 假设 sum_numbers 能够完成 num - 1 的累加</span></span><br><span class="line">    temp = sum_numbers(num - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 函数内部的核心算法就是 两个数字的相加</span></span><br><span class="line">    <span class="keyword">return</span> num + temp</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sum_numbers(<span class="number">2</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/01/11/MRmJ6NDwcH5A9be.png" alt="002_递归调用示意图.png"></p>
<blockquote>
<p>提示：递归是一个 <strong>编程技巧</strong>，初次接触递归会感觉有些吃力！在处理 <strong>不确定的循环条件时</strong>，格外的有用，例如：<strong>遍历整个文件目录的结构</strong></p>
</blockquote>
]]></content>
      <categories>
        <category>python面对过程学习</category>
      </categories>
      <tags>
        <tag>python学习</tag>
      </tags>
  </entry>
  <entry>
    <title>15.变量进阶（理解）</title>
    <url>/2022/01/23/python%E9%9D%A2%E5%AF%B9%E8%BF%87%E7%A8%8B%E5%AD%A6%E4%B9%A0/15.%E5%8F%98%E9%87%8F%E8%BF%9B%E9%98%B6%EF%BC%88%E7%90%86%E8%A7%A3%EF%BC%89/</url>
    <content><![CDATA[<h1 id="变量进阶（理解）"><a href="#变量进阶（理解）" class="headerlink" title="变量进阶（理解）"></a>变量进阶（理解）</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>变量的引用</li>
<li>可变和不可变类型</li>
<li>局部变量和全局变量</li>
</ul>
<h2 id="01-变量的引用"><a href="#01-变量的引用" class="headerlink" title="01. 变量的引用"></a>01. 变量的引用</h2><blockquote>
<ul>
<li>变量 和 数据 都是保存在 <strong>内存</strong> 中的</li>
<li>在 <code>Python</code> 中 <strong>函数 的 参数传递</strong> 以及 <strong>返回值</strong> 都是靠 <strong>引用</strong> 传递的</li>
</ul>
</blockquote>
<h3 id="1-1-引用的概念"><a href="#1-1-引用的概念" class="headerlink" title="1.1 引用的概念"></a>1.1 引用的概念</h3><p>在 <code>Python</code> 中</p>
<ul>
<li><p><strong>变量</strong> 和 <strong>数据</strong> 是分开存储的</p>
</li>
<li><p><strong>数据</strong> 保存在内存中的一个位置</p>
</li>
<li><p><strong>变量</strong> 中保存着数据在内存中的地址</p>
</li>
<li><p><strong>变量</strong> 中 <strong>记录数据的地址</strong>，就叫做 <strong>引用</strong></p>
</li>
<li><p>使用 <code>id()</code> 函数可以查看变量中保存数据所在的 <strong>内存地址</strong></p>
<p><img src="https://s2.loli.net/2022/01/19/gGbKSqx1kinLpTt.png" alt="image-20220119015905442"></p>
</li>
</ul>
<blockquote>
<p>注意：如果变量已经被定义，当给一个变量赋值的时候，本质上是 <strong>修改了数据的引用</strong></p>
<ul>
<li><p>变量 <strong>不再</strong> 对之前的数据引用</p>
</li>
<li><p>变量 <strong>改为</strong> 对新赋值的数据引用</p>
<p><img src="https://s2.loli.net/2022/01/19/ilw6TyVbr5Y1SQH.png" alt="image-20220119020136505"></p>
</li>
</ul>
</blockquote>
<h3 id="1-2-变量引用-的示例"><a href="#1-2-变量引用-的示例" class="headerlink" title="1.2 变量引用 的示例"></a>1.2 <code>变量引用</code> 的示例</h3><p>在 <code>Python</code> 中，变量的名字类似于 <strong>便签纸</strong> 贴在 <strong>数据</strong> 上</p>
<ul>
<li>定义一个整数变量 <code>a</code>，并且赋值为 <code>1</code></li>
</ul>
<table>
<thead>
<tr>
<th align="center">代码</th>
<th align="center">图示</th>
</tr>
</thead>
<tbody><tr>
<td align="center">a &#x3D; 1</td>
<td align="center"><img src="https://s2.loli.net/2022/01/11/GbzaskfAQuqJ5Mn.png" alt="004_a1tag.png"></td>
</tr>
</tbody></table>
<ul>
<li>将变量 <code>a</code> 赋值为 <code>2</code></li>
</ul>
<table>
<thead>
<tr>
<th align="center">代码</th>
<th align="center">图示</th>
</tr>
</thead>
<tbody><tr>
<td align="center">a &#x3D; 2</td>
<td align="center"><img src="https://s2.loli.net/2022/01/11/gTGzus5DKSOcitq.png" alt="005_a2tag.png"><img src="https://s2.loli.net/2022/01/11/Ksq8hnMAcwHgyEN.png" alt="005_1.png"></td>
</tr>
</tbody></table>
<ul>
<li>定义一个整数变量 <code>b</code>，并且将变量 <code>a</code> 的值赋值给 <code>b</code></li>
</ul>
<table>
<thead>
<tr>
<th align="center">代码</th>
<th align="center">图示</th>
</tr>
</thead>
<tbody><tr>
<td align="center">b &#x3D; a</td>
<td align="center"><img src="https://s2.loli.net/2022/01/11/roB5ODQFpSXZlKR.png" alt="006_ab2tag.png"></td>
</tr>
</tbody></table>
<blockquote>
<p>变量 <code>b</code> 是第 2 个贴在数字 <code>2</code> 上的标签</p>
</blockquote>
<h3 id="1-3-函数的参数和返回值的传递"><a href="#1-3-函数的参数和返回值的传递" class="headerlink" title="1.3 函数的参数和返回值的传递"></a>1.3 函数的参数和返回值的传递</h3><p>在 <code>Python</code> 中，函数的 <strong>实参</strong>&#x2F;<strong>返回值</strong> 都是是靠 <strong>引用</strong> 来传递来的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">num</span>):</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%d 在函数内的内存地址是 %x&quot;</span> % (num, <span class="built_in">id</span>(num)))</span><br><span class="line"></span><br><span class="line">    result = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;返回值 %d 在内存中的地址是 %x&quot;</span> % (result, <span class="built_in">id</span>(result)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>  result</span><br><span class="line"></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;调用函数前 内存地址是 %x&quot;</span> % <span class="built_in">id</span>(a))</span><br><span class="line"></span><br><span class="line">r = test(a)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;调用函数后 实参内存地址是 %x&quot;</span> % <span class="built_in">id</span>(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;调用函数后 返回值内存地址是 %x&quot;</span> % <span class="built_in">id</span>(r))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="02-可变和不可变类型"><a href="#02-可变和不可变类型" class="headerlink" title="02. 可变和不可变类型"></a>02. 可变和不可变类型</h2><ul>
<li><strong>不可变类型</strong>，内存中的数据不允许被修改：<ul>
<li>数字类型 <code>int</code>, <code>bool</code>, <code>float</code>, <code>complex</code>, <code>long(2.x)</code></li>
<li>字符串 <code>str</code></li>
<li>元组 <code>tuple</code></li>
</ul>
</li>
<li><strong>可变类型</strong>，内存中的数据可以被修改：<ul>
<li>列表 <code>list</code></li>
<li>字典 <code>dict</code></li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">a = <span class="string">&quot;hello&quot;</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">a = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<blockquote>
<p><img src="https://s2.loli.net/2022/01/19/PidWkfpxQDVe7zw.png" alt="image-20220119151254042"></p>
<p><img src="https://s2.loli.net/2022/01/19/fUBFKcEYjdCwlb7.png" alt="image-20220119151448716">直接 “覆盖 ”不是修改内容 ，而是 在改变变量的引用地址</p>
<p>要通过   <strong>“变量 . 方法”</strong> 来修改 可变类型的内容</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">demo_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;定义列表后的内存地址 %d&quot;</span> % <span class="built_in">id</span>(demo_list))</span><br><span class="line"></span><br><span class="line">demo_list.append(<span class="number">999</span>)</span><br><span class="line">demo_list.pop(<span class="number">0</span>)</span><br><span class="line">demo_list.remove(<span class="number">2</span>)</span><br><span class="line">demo_list[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;修改数据后的内存地址 %d&quot;</span> % <span class="built_in">id</span>(demo_list))</span><br><span class="line"></span><br><span class="line">demo_dict = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;小明&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;定义字典后的内存地址 %d&quot;</span> % <span class="built_in">id</span>(demo_dict))</span><br><span class="line"></span><br><span class="line">demo_dict[<span class="string">&quot;age&quot;</span>] = <span class="number">18</span></span><br><span class="line">demo_dict.pop(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">demo_dict[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;老王&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;修改数据后的内存地址 %d&quot;</span> % <span class="built_in">id</span>(demo_dict))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：字典的 <code>key</code> <strong>只能使用不可变类型的数据</strong></p>
</blockquote>
<p><strong>注意</strong></p>
<ol>
<li><strong>可变类型</strong>的数据变化，是通过 <strong>方法</strong> 来实现的</li>
<li>如果给一个可变类型的变量，赋值了一个新的数据，<strong>引用会修改</strong><ul>
<li>变量 <strong>不再</strong> 对之前的数据引用</li>
<li>变量 <strong>改为</strong> 对新赋值的数据引用</li>
</ul>
</li>
</ol>
<h3 id="哈希-hash"><a href="#哈希-hash" class="headerlink" title="哈希 (hash)"></a>哈希 <code>(hash)</code></h3><ul>
<li><code>Python</code> 中内置有一个名字叫做 <code>hash(o)</code> 的函数<ul>
<li>接收一个 <strong>不可变类型</strong> 的数据作为 <strong>参数</strong></li>
<li><strong>返回</strong> 结果是一个 <strong>整数</strong></li>
</ul>
</li>
<li><code>哈希</code> 是一种 <strong>算法</strong>，其作用就是提取数据的 <strong>特征码（指纹）</strong><ul>
<li><strong>相同的内容</strong> 得到 <strong>相同的结果</strong></li>
<li><strong>不同的内容</strong> 得到 <strong>不同的结果</strong></li>
</ul>
</li>
<li>在 <code>Python</code> 中，设置字典的 <strong>键值对</strong> 时，会首先对 <code>key</code> 进行 <code>hash</code> 已决定如何在内存中保存字典的数据，以方便 <strong>后续</strong> 对字典的操作：<strong>增、删、改、查</strong><ul>
<li>键值对的 <code>key</code> 必须是不可变类型数据</li>
<li>键值对的 <code>value</code> 可以是任意类型的数据</li>
</ul>
</li>
</ul>
<h2 id="03-局部变量和全局变量"><a href="#03-局部变量和全局变量" class="headerlink" title="03. 局部变量和全局变量"></a>03. 局部变量和全局变量</h2><ul>
<li><strong>局部变量</strong> 是在 <strong>函数内部</strong> 定义的变量，<strong>只能在函数内部使用</strong></li>
<li><strong>全局变量</strong> 是在 <strong>函数外部定义</strong> 的变量（没有定义在某一个函数内），<strong>所有函数</strong> 内部 <strong>都可以使用这个变量</strong></li>
</ul>
<blockquote>
<p>提示：在其他的开发语言中，大多 <strong>不推荐使用全局变量</strong> —— 可变范围太大，导致程序不好维护！</p>
</blockquote>
<h3 id="3-1-局部变量"><a href="#3-1-局部变量" class="headerlink" title="3.1 局部变量"></a>3.1 局部变量</h3><ul>
<li><p><strong>局部变量</strong> 是在 <strong>函数内部</strong> 定义的变量，<strong>只能在函数内部使用</strong></p>
</li>
<li><p>函数执行结束后，<strong>函数内部的局部变量，会被系统回收</strong></p>
</li>
<li><p>不同的函数，可以定义相同的名字的局部变量，但是 <strong>彼此之间</strong> 不会产生影响</p>
<blockquote>
<p>定义局部变量代码执行之后 变量才会被定创建–—-出生<img src="https://s2.loli.net/2022/01/20/KivU4X7Pb1R3IFk.png" alt="image-20220120020203900"></p>
<p>函数结束执行之后 局部变量被系统回收  ——死亡</p>
<p><img src="https://s2.loli.net/2022/01/20/GXh9R3xM1N2e75l.png" alt="image-20220120020301492"></p>
</blockquote>
</li>
</ul>
<h4 id="局部变量的作用"><a href="#局部变量的作用" class="headerlink" title="局部变量的作用"></a>局部变量的作用</h4><ul>
<li>在函数内部使用，<strong>临时</strong> 保存 <strong>函数内部需要使用的数据</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">demo1</span>():</span><br><span class="line"></span><br><span class="line">    num = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"></span><br><span class="line">    num = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;修改后 %d&quot;</span> % num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo2</span>():</span><br><span class="line"></span><br><span class="line">    num = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"></span><br><span class="line">demo1()</span><br><span class="line">demo2()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;over&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="局部变量的生命周期"><a href="#局部变量的生命周期" class="headerlink" title="局部变量的生命周期"></a>局部变量的生命周期</h4><ul>
<li>所谓 <strong>生命周期</strong> 就是变量从 <strong>被创建</strong> 到 <strong>被系统回收</strong> 的过程</li>
<li><strong>局部变量</strong> 在 <strong>函数执行时</strong> 才会被创建</li>
<li><strong>函数执行结束后</strong> 局部变量 <strong>被系统回收</strong></li>
<li><strong>局部变量在生命周期</strong> 内，可以用来存储 <strong>函数内部临时使用到的数据</strong></li>
</ul>
<h3 id="3-2-全局变量"><a href="#3-2-全局变量" class="headerlink" title="3.2 全局变量"></a>3.2 全局变量</h3><ul>
<li><strong>全局变量</strong> 是在 <strong>函数外部定义</strong> 的变量，所有函数内部都可以使用这个变量</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个全局变量</span></span><br><span class="line">num = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo1</span>():</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo2</span>():</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"></span><br><span class="line">demo1()</span><br><span class="line">demo2()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;over&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：函数执行时，<strong>需要处理变量时</strong> 会：</p>
<ol>
<li><strong>首先</strong> 查找 <strong>函数内部</strong> 是否存在 <strong>指定名称 的局部变量</strong>，<strong>如果有，直接使用</strong></li>
<li>如果没有，查找 <strong>函数外部</strong> 是否存在 <strong>指定名称 的全局变量</strong>，<strong>如果有，直接使用</strong></li>
<li>如果还没有，程序报错！</li>
</ol>
<h4 id="1-函数不能直接修改-全局变量的引用"><a href="#1-函数不能直接修改-全局变量的引用" class="headerlink" title="1) 函数不能直接修改 全局变量的引用"></a>1) 函数不能直接修改 <code>全局变量的引用</code></h4><ul>
<li><strong>全局变量</strong> 是在 <strong>函数外部定义</strong> 的变量（没有定义在某一个函数内），<strong>所有函数</strong> 内部 <strong>都可以使用这个变量</strong></li>
</ul>
<blockquote>
<p>提示：在其他的开发语言中，大多 <strong>不推荐使用全局变量</strong> —— 可变范围太大，导致程序不好维护！</p>
</blockquote>
<ul>
<li>在函数内部，可以 <strong>通过全局变量的引用获取对应的数据</strong></li>
<li>但是，<strong>不允许直接修改全局变量的引用</strong> —— 使用赋值语句修改全局变量的值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo1</span>():</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;demo1&quot;</span> + <span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 只是定义了一个局部变量，不会修改到全局变量，只是变量名相同而已</span></span><br><span class="line">    num = <span class="number">100</span></span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo2</span>():</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;demo2&quot;</span> + <span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"></span><br><span class="line">demo1()</span><br><span class="line">demo2()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;over&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：只是在函数内部定义了一个局部变量而已，只是变量名相同 —— 在函数内部不能直接修改全局变量的值</p>
</blockquote>
<h4 id="2-在函数内部修改全局变量的值"><a href="#2-在函数内部修改全局变量的值" class="headerlink" title="2) 在函数内部修改全局变量的值"></a>2) 在函数内部修改全局变量的值</h4><ul>
<li>如果在函数中需要修改全局变量，需要使用 <code>global</code> 进行声明</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo1</span>():</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;demo1&quot;</span> + <span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># global 关键字，告诉 Python 解释器 num 是一个全局变量</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="comment"># 只是定义了一个局部变量，不会修改到全局变量，只是变量名相同而已</span></span><br><span class="line">    num = <span class="number">100</span></span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo2</span>():</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;demo2&quot;</span> + <span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"></span><br><span class="line">demo1()</span><br><span class="line">demo2()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;over&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-全局变量定义的位置"><a href="#3-全局变量定义的位置" class="headerlink" title="3) 全局变量定义的位置"></a>3) 全局变量定义的位置</h4><ul>
<li>为了保证所有的函数都能够正确使用到全局变量，应该 <strong>将全局变量定义在其他函数的上方</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%d&quot;</span> % a)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%d&quot;</span> % b)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%d&quot;</span> % c)</span><br><span class="line"></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line">demo()</span><br><span class="line">c = <span class="number">30</span></span><br><span class="line"><span class="comment"># 由于全局变量 c，是在调用函数之后，才定义的，在执行函数时，变量还没有定义，所以程序会报错！</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong></p>
<ul>
<li>由于全局变量 c，是在调用函数之后，才定义的，在执行函数时，变量还没有定义，所以程序会报错！</li>
</ul>
<p><strong>代码结构示意图如下</strong></p>
<p><img src="https://s2.loli.net/2022/01/11/JUnLEpOCzXg1lih.png" alt="001_代码结构示意图.png"></p>
<h4 id="4-全局变量命名的建议"><a href="#4-全局变量命名的建议" class="headerlink" title="4) 全局变量命名的建议"></a>4) 全局变量命名的建议</h4><ul>
<li>为了避免局部变量和全局变量出现混淆，在定义全局变量时，有些公司会有一些开发要求，例如：</li>
<li>全局变量名前应该增加 <code>g_</code> 或者 <code>gl_</code> 的前缀</li>
</ul>
<blockquote>
<p>提示：具体的要求格式，各公司要求可能会有些差异</p>
</blockquote>
<p><img src="https://s2.loli.net/2022/01/23/bSnFHy35xjCBlhQ.png" alt="image-20220123123135040"></p>
<h1 id="Shebang"><a href="#Shebang" class="headerlink" title="Shebang"></a><img src="https://img-blog.csdn.net/20171102205825965" alt="这里写图片描述" style="zoom:33%;" />Shebang</h1><p>这个符号的名称，叫做”Shebang”或者”Sha-bang”。长期以来，Shebang都没有正式的中文名称。Linux中国翻译组的GOLinux将其翻译为“释伴”，即“解释伴随行”的简称，同时又是Shebang的音译。本文将简单介绍一下Shebang这个符号。<br>1.词源与历史<br>  Shebang 的名字来自于 SHArp 和 bang，或 haSH bang 的缩写，指代 Shebang 中 #! 两个符号的典型 Unix 名称。 Unix 术语中，井号通常称为 sharp，hash 或 mesh；而叹号则常常称为 bang。也有看法认为，shebang 名字中的 sh 来自于默认shell Bourne shell 的名称，sh，因为常常使用 shebang 调用之。<br>  在2010年版的 Advanced bash scripting guide（revision 6.2)中，Shebang 被称为 “sha-bang”，同时提到”也写作 she-bang 或 sh-bang”，但该文件中没有提到 “shebang” 这一形式。</p>
<p>2.用法<br>  Shebang通常出现在类Unix系统的脚本中第一行，作为前两个字符。在Shebang之后，可以有一个或数个空白字符，后接解释器的绝对路径，用于指明执行这个脚本文件的解释器。在直接调用脚本时，系统的程序载入器会分析 Shebang 后的内容，将这些内容作为解释器指令，并调用该指令，将载有 Shebang 的文件路径作为该解释器的参数，执行脚本，从而使得脚本文件的调用方式与普通的可执行文件类似。例如，以指令#!&#x2F;bin&#x2F;sh开头的文件，在执行时会实际调用 &#x2F;bin&#x2F;sh 程序（通常是 Bourne shell 或兼容的 shell，例如 bash、dash 等）来执行。<br>  由于 # 符号在许多脚本语言中都是注释标识符，Shebang 的内容会被这些脚本解释器自动忽略。 在 # 字符不是注释标识符的语言中，例如 Scheme，解释器也可能忽略以 #! 开头的首行内容，以提供与 Shebang 的兼容性。</p>
<p>  Shebang的一些具体用法罗列如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、如果脚本文件中没有#!这一行，那么执行时会默认采用当前Shell去解释这个脚本(即：$SHELL环境变量）。</span><br><span class="line">2、如果#!之后的解释程序是一个可执行文件，那么执行这个脚本时，它就会把文件名及其参数一起作为参数传给那个解释程序去执行。</span><br><span class="line">3、如果#!指定的解释程序没有可执行权限，则会报错“bad interpreter: Permission</span><br><span class="line">denied”。如果#!指定的解释程序不是一个可执行文件，那么指定的解释程序会被忽略，转而交给当前的SHELL去执行这个脚本。</span><br><span class="line">4、如果#!指定的解释程序不存在，那么会报错“bad interpreter: No such file or directory”。注意：#!之后的解释程序，需要写其绝对路径（如：#!/bin/bash），它是不会自动到$PATH中寻找解释器的。</span><br><span class="line">5、当然，如果你使用类似于”bash test.sh”这样的命令来执行脚本，那么#!这一行将会被忽略掉，解释器当然是用命令行中显式指定的bash。</span><br><span class="line">6、脚本文件必须拥有可执行权限。</span><br></pre></td></tr></table></figure>

<p>  Shebang的好处在于，允许脚本和数据文件充当系统命令，无需在调用时由用户指定解释器，从而对用户和其它程序隐藏其实现细节。下面我们一起来看几个典型的例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. #!/bin/sh：使用 sh，即 Bourne shell 或其它兼容 shell 执行脚本</span><br><span class="line">2. #!/bin/csh：使用 csh，即 C shell 执行</span><br><span class="line">3. #!/usr/bin/perl -w：使用带警告的 Perl 执行</span><br><span class="line">4. #!/usr/bin/python -O：使用具有代码优化的 Python 执行</span><br><span class="line">5. #!/usr/bin/php：使用 PHP 的命令行解释器执行</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Shebang 行也可以包含需要传递到解释器的特定选项（如上述的 Perl 和 Python 例子）。</p>
<p>(2).使用 #!&#x2F;usr&#x2F;bin&#x2F;env 脚本解释器名称 是一种常见的在不同平台上都能正确找到解释器的办法。因为env一般固定在&#x2F;usr&#x2F;bin目录下，而其余解释器的安装位置就相对不那么固定。但是，用env时你应该注意这么一个事实：传递给解释器的argv和你想象得并不一样。下面这个就是不对的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env perl -w</span><br></pre></td></tr></table></figure>

<p>shell会提示：&#x2F;usr&#x2F;bin&#x2F;env: perl -w: No such file or directory。错误的根源就在于 perl -w 被当成了整体传递给env。</p>
<blockquote>
<p>最后，我们来总结一下Shebang的几点要求：</p>
<ol>
<li>#! 必须连接在一起</li>
<li>#! 一句必须在文件的最开始，第一行</li>
<li>开头的语句一般情况下会被当成注释而忽略，所以Shebang 对文件的内容是没有影响的	</li>
<li>#! 开头的一行会设置解释器运行环境</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>python面对过程学习</category>
      </categories>
      <tags>
        <tag>python学习</tag>
      </tags>
  </entry>
  <entry>
    <title>2.Python程序no.1</title>
    <url>/2021/12/22/python%E9%9D%A2%E5%AF%B9%E8%BF%87%E7%A8%8B%E5%AD%A6%E4%B9%A0/2.Python%E7%A8%8B%E5%BA%8Fno.1/</url>
    <content><![CDATA[<p><code>mkdir 创建目录</code> <code>touch创建文件</code></p>
<p>No.1 Python程序</p>
<p>1.1python源程序的基本概念</p>
<ol>
<li>python源程序是一个  特殊格式的文本文件，可以使用任意文本编辑软件做Python的开发</li>
<li>python程序的文件扩展名通常是  .py</li>
</ol>
<p>1.2演练步骤</p>
<ul>
<li>在桌面新建 认识python  目录</li>
<li>在 <code>认识python</code>目录下新建<code>01-HelloPython.py</code> 文件</li>
<li>使用gedit编辑<code>01-HelloPython.py</code> 并且输入以下内容</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(&quot;hello,python&quot;)</span><br><span class="line">print(&quot;hello,world&quot;)</span><br></pre></td></tr></table></figure>

<ul>
<li>在终端输入以下命令执行<code>01-HelloPython.py</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python 01-HelloPython.py</span><br></pre></td></tr></table></figure>

<blockquote>
<p>print是python中我们学习的第一个函数</p>
<p>print函数的作用，可以把””内部的内容，输出到屏幕上</p>
</blockquote>
<p>1.3演练扩展——认识错误（bug）</p>
<p>关于错误</p>
<ul>
<li>编写的程序不能正常执行，或者执行的结果不是期望的</li>
<li>所称bug是程序员在开发时非常常见的，初学者常见的错误原因包括：<ul>
<li>手误</li>
<li>对已经学习过的知识理解还存在不足</li>
<li>对语言还有需要学习和提升的内容</li>
</ul>
</li>
<li>在学习语言时，不经要学会语言的语法，而且还要学会如何认识错误和解决错误的方法</li>
</ul>
<p>第一个程序演练中的常见错误</p>
<ul>
<li><p>使用print(“Hello world”)</p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/image-20211209165337617.png" alt="image-20211209165337617"></p>
</li>
<li><p>将多条print写在一行</p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/image-20211209165436920.png" alt="image-20211209165436920">每行代码负责完成一个动作</p>
</li>
<li><p>缩进错误</p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/image-20211209165809159.png" alt="image-20211209165809159"></p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/image-20211209165728804.png" alt="image-20211209165728804"></p>
</li>
</ul>
<blockquote>
<ul>
<li>python是一个格式非常严格的程序设计语言</li>
<li>目前而言，每行代码前面不要增加空格</li>
</ul>
</blockquote>
<ul>
<li>python 2.×牧人不支持中文</li>
</ul>
<p>目前市场上有两个python的版本并存着，分别是python 2.×和python 3.×</p>
<ul>
<li>python 2.×的解释器器名称时python<ul>
<li>不支持中文</li>
<li><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/image-20211209170622255.png" alt="image-20211209170622255"></li>
</ul>
</li>
<li>python 3.×的解释器器名称时python3<ul>
<li>支持中文</li>
<li><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/image-20211209170649832.png" alt="image-20211209170649832"></li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/image-20211209170235446.png" alt="image-20211209170235446"></p>
<blockquote>
<p>ASCII字符只包含256个字符不支持中文</p>
</blockquote>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/image-20211209170716948.png" alt="image-20211209170716948"></p>
]]></content>
      <categories>
        <category>python面对过程学习</category>
      </categories>
      <tags>
        <tag>python学习</tag>
      </tags>
  </entry>
  <entry>
    <title>3.多文件项目的演练</title>
    <url>/2021/12/22/python%E9%9D%A2%E5%AF%B9%E8%BF%87%E7%A8%8B%E5%AD%A6%E4%B9%A0/3.%E5%A4%9A%E6%96%87%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%BC%94%E7%BB%83/</url>
    <content><![CDATA[<h1 id="多文件项目的演练"><a href="#多文件项目的演练" class="headerlink" title="多文件项目的演练"></a>多文件项目的演练</h1><ul>
<li>开发 <strong>项目</strong> 就是开发一个 <strong>专门解决一个复杂业务功能的软件</strong></li>
<li>通常每 <strong>一个项目</strong> 就具有一个 <strong>独立专属的目录</strong>，用于保存 <strong>所有和项目相关的文件</strong><ul>
<li>一个项目通常会包含 <strong>很多源文件</strong></li>
</ul>
</li>
</ul>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>在项目中添加多个文件，并且设置文件的执行</li>
</ul>
<h2 id="多文件项目演练"><a href="#多文件项目演练" class="headerlink" title="多文件项目演练"></a>多文件项目演练</h2><ol>
<li>在 <code>01_Python基础</code> 项目中新建一个 <code>hm_02_第2个Python程序.py</code> </li>
<li>在 <code>hm_02_第2个Python程序.py</code> 文件中添加一句 <code>print(&quot;hello&quot;)</code></li>
<li><strong>点击右键执行</strong> <code>hm_02_第2个Python程序.py</code></li>
</ol>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/001_%E8%AE%A9%E9%80%89%E4%B8%AD%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%8F%AF%E4%BB%A5%E6%89%A7%E8%A1%8C.png" alt="001_让选中的程序可以执行-w662"></p>
<h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><ul>
<li>在 <code>PyCharm</code> 中，要想让哪一个 <code>Python</code> 程序能够执行，必须首先通过 <strong>鼠标右键的方式执行</strong> 一下</li>
<li>对于初学者而言，在一个项目中设置多个程序可以执行，是非常方便的，可以方便对不同知识点的练习和测试</li>
<li>对于商业项目而言，通常在一个项目中，只有一个 <strong>可以直接执行的 Python 源程序</strong></li>
</ul>
]]></content>
      <categories>
        <category>python面对过程学习</category>
      </categories>
      <tags>
        <tag>python学习</tag>
      </tags>
  </entry>
  <entry>
    <title>5.算数运算符</title>
    <url>/2021/12/22/python%E9%9D%A2%E5%AF%B9%E8%BF%87%E7%A8%8B%E5%AD%A6%E4%B9%A0/5.%E7%AE%97%E6%95%B0%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<h1 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h1><p><strong>计算机</strong>，顾名思义就是负责进行 <strong>数学计算</strong> 并且 <strong>存储计算结果</strong> 的电子设备</p>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>算术运算符的基本使用</li>
</ul>
<h2 id="01-算数运算符"><a href="#01-算数运算符" class="headerlink" title="01. 算数运算符"></a>01. 算数运算符</h2><ul>
<li>算数运算符是 <strong>运算符的一种</strong></li>
<li>是完成基本的算术运算使用的符号，用来处理四则运算</li>
</ul>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">+</td>
<td align="center">加</td>
<td>10 + 20 &#x3D; 30</td>
</tr>
<tr>
<td align="center">-</td>
<td align="center">减</td>
<td>10 - 20 &#x3D; -10</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">乘</td>
<td>10 * 20 &#x3D; 200</td>
</tr>
<tr>
<td align="center">&#x2F;</td>
<td align="center">除</td>
<td>10 &#x2F; 20 &#x3D; 0.5</td>
</tr>
<tr>
<td align="center">&#x2F;&#x2F;</td>
<td align="center">取整除</td>
<td>返回除法的整数部分（商） 9 &#x2F;&#x2F; 2 输出结果 4</td>
</tr>
<tr>
<td align="center">%</td>
<td align="center">取余数</td>
<td>返回除法的余数 9 % 2 &#x3D; 1</td>
</tr>
<tr>
<td align="center">**</td>
<td align="center">幂</td>
<td>又称次方、乘方，2 ** 3 &#x3D; 8</td>
</tr>
</tbody></table>
<ul>
<li>在 Python 中 <code>*</code> 运算符还可以用于字符串，计算结果就是字符串重复指定次数的结果</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="string">&quot;-&quot;</span> * <span class="number">50</span></span><br><span class="line">Out[<span class="number">1</span>]: <span class="string">&#x27;----------------------------------------&#x27;</span> </span><br></pre></td></tr></table></figure>

<h2 id="02-算数运算符的优先级"><a href="#02-算数运算符的优先级" class="headerlink" title="02. 算数运算符的优先级"></a>02. 算数运算符的优先级</h2><ul>
<li><p>和数学中的运算符的优先级一致，在 Python 中进行数学计算时，同样也是：</p>
<ul>
<li><strong>先乘除后加减</strong></li>
<li>同级运算符是 <strong>从左至右</strong> 计算</li>
<li>可以使用 <code>()</code> 调整计算的优先级</li>
</ul>
</li>
<li><p>以下表格的算数优先级由高到最低顺序排列</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>**</td>
<td>幂 (最高优先级)</td>
</tr>
<tr>
<td>* &#x2F; % &#x2F;&#x2F;</td>
<td>乘、除、取余数、取整除</td>
</tr>
<tr>
<td>+ -</td>
<td>加法、减法</td>
</tr>
</tbody></table>
<ul>
<li>例如：<ul>
<li><code>2 + 3 * 5 = 17</code></li>
<li><code>(2 + 3) * 5 = 25</code></li>
<li><code>2 * 3 + 5 = 11</code></li>
<li><code>2 * (3 + 5) = 16</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>python面对过程学习</category>
      </categories>
      <tags>
        <tag>python学习</tag>
      </tags>
  </entry>
  <entry>
    <title>4.程序注释</title>
    <url>/2021/12/22/python%E9%9D%A2%E5%AF%B9%E8%BF%87%E7%A8%8B%E5%AD%A6%E4%B9%A0/4.%E7%A8%8B%E5%BA%8F%E6%B3%A8%E9%87%8A/</url>
    <content><![CDATA[<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>注释的作用 </p>
<blockquote>
<p>使用用自己熟悉的语言，在程序中对某些代码进行标注说明，增强程序的可读性</p>
</blockquote>
<h5 id="单行注释（行注释）"><a href="#单行注释（行注释）" class="headerlink" title="单行注释（行注释）"></a>单行注释（行注释）</h5><ul>
<li><p>以#开头，#右边的所有的东西都被当作说明文字，而不是真正要执行的程序，只起到辅助说明左右</p>
</li>
<li><p>例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 这是第一个当行注释</span><br><span class="line">print (&quot;hello,python&quot;)</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>pycharm会检查代码格式</p>
<p>若格式有误则会出现如下虚线<img src="https://gitee.com/lichaikui/picture/raw/master/tupian/image-20211209193021336.png" alt="image-20211209193021336"></p>
<p>python官方建议在<code>#</code>后面加  空格  会使代码格式更加整齐</p>
<p>一键在#后添加 空格 （重新格式化文件）：<img src="https://gitee.com/lichaikui/picture/raw/master/tupian/image-20211209194654148.png" alt="image-20211209194654148"></p>
</blockquote>
<p>python解释器认为 # 后 为说明性文字，会越过这一行代码直接开始下一行</p>
<p>在代码后面增加的当行注释</p>
<blockquote>
<p>代码很短，注释也很短</p>
</blockquote>
<ul>
<li><p>在程序开发时，同时可以使用#在代码的后面（旁边）增加说明性文字</p>
</li>
<li><p>注意 为保证代码可读性，<strong>注释和代码之间至少要有 两个空格</strong></p>
</li>
<li><p>例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(&quot;hello python&quot;)  # 输出 &#x27;hello python&#x27;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="多行注释（块注释）"><a href="#多行注释（块注释）" class="headerlink" title="多行注释（块注释）"></a>多行注释（块注释）</h5><ul>
<li><p>如果希望编写的 注释信息很多，一行无法显示 就可以使用多行注释</p>
</li>
<li><p>要在python程序中使用多行注释，可以用 一堆 连续的 三个 引号（单引号和双引号都可以）</p>
</li>
<li><p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">这是一个多行注释</span><br><span class="line">在多行注释之间，可以写很多很多内容......</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">print(&quot;hello python&quot;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  1. 输入用户年龄</span><br><span class="line">  2. 判断是否满 18 岁 （**&gt;=**）</span><br><span class="line">  3. 如果满 18 岁，允许进网吧嗨皮</span><br><span class="line">  4. 如果未满 18 岁，提示回家写作业</span><br><span class="line">  想要注释以上内容</span><br><span class="line">  全选  按 Ctrl+/     则会如此</span><br><span class="line">#1. 输入用户年龄</span><br><span class="line"># 2. 判断是否满 18 岁 （**&gt;=**）</span><br><span class="line"># 3. 如果满 18 岁，允许进网吧嗨皮</span><br><span class="line"># 4. 如果未满 18 岁，提示回家写作业</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="什么时候使用注释？"><a href="#什么时候使用注释？" class="headerlink" title="什么时候使用注释？"></a>什么时候使用注释？</h5><ol>
<li>一部了然的代码不需要添加注释</li>
<li><strong>对于复杂的操作</strong>，应该在操作开始前写上若干行注释</li>
<li>对于 <strong>不是一目了然的代码</strong>，应该在其行尾添加注释（为了提高可读性，注释应该只很少离开代码两个空格）</li>
<li>绝不要描述代码，假设阅读代码的人比你跟懂python，他只是不知道你的代码做什么</li>
</ol>
<blockquote>
<p>在一些正规的开发团队，通常会有  代码审核 的惯例，就是一个团队中彼此阅读对方的代码</p>
</blockquote>
<h5 id="关于代码规范"><a href="#关于代码规范" class="headerlink" title="关于代码规范"></a>关于代码规范</h5><ul>
<li>python官方提供一系列 PEP(python Enhancement Proposals)文档</li>
<li>其中第八章文档专门针对 <strong>python的代码格式</strong> 个除了建议，也就是俗称的PEP S</li>
<li>文档地址：<ul>
<li><a href="https://www.python.org/dev/peps/pep-0008/">https://www.python.org/dev/peps/pep-0008/</a></li>
<li>谷歌中对应中文文档<a href="https://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/">https://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/</a></li>
</ul>
</li>
</ul>
<h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><p>计算机，顾名思义就是负责进行数学计算 并且 储存计算结果 的电子设备</p>
<p>01.算数运算符</p>
<ul>
<li>算术运算符是 运算符的一种</li>
<li>是完成基本的算术运算的符号，用来处理四则运算</li>
</ul>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/image-20211209213434302.png" alt="image-20211209213434302"></p>
<ul>
<li>在python中 <code>*</code>运算符还可以用于字符串，计算接股票就是字符串重复指定次数的结果</li>
</ul>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/image-20211209215025187.png" alt="image-20211209215025187"></p>
<img src="https://gitee.com/lichaikui/picture/raw/master/tupian/image-20211209215048860.png" alt="image-20211209215048860" style="zoom:150%;" />

<h5 id="算数运算符的优先级"><a href="#算数运算符的优先级" class="headerlink" title="算数运算符的优先级"></a>算数运算符的优先级</h5><ul>
<li><p>和数学中的运算符的优先级一直，在python中进行数学计算时同样也是：</p>
<ol>
<li>先乘除后加减</li>
<li>统计运算符是 <strong>从左至右</strong> 计算</li>
<li>可以使用 <code>（）</code>调整计算的优先级</li>
</ol>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/image-20211209215635672.png" alt="image-20211209215635672"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>python面对过程学习</category>
      </categories>
      <tags>
        <tag>python学习</tag>
      </tags>
  </entry>
  <entry>
    <title>6.程序执行原理（科普）</title>
    <url>/2021/12/22/python%E9%9D%A2%E5%AF%B9%E8%BF%87%E7%A8%8B%E5%AD%A6%E4%B9%A0/6.%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%EF%BC%88%E7%A7%91%E6%99%AE%EF%BC%89/</url>
    <content><![CDATA[<h1 id="程序执行原理（科普）"><a href="#程序执行原理（科普）" class="headerlink" title="程序执行原理（科普）"></a>程序执行原理（科普）</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>计算机中的 <strong>三大件</strong></li>
<li>程序执行的原理</li>
<li>程序的作用</li>
</ul>
<h2 id="01-计算机中的三大件"><a href="#01-计算机中的三大件" class="headerlink" title="01. 计算机中的三大件"></a>01. 计算机中的三大件</h2><p>计算机中包含有较多的硬件，但是一个程序要运行，有 <strong>三个</strong> 核心的硬件，分别是：</p>
<ol>
<li><strong>CPU</strong> <ul>
<li>中央处理器，是一块超大规模的集成电路</li>
<li>负责 <strong>处理数据</strong>／<strong>计算</strong></li>
</ul>
</li>
<li><strong>内存</strong><ul>
<li><strong>临时</strong> 存储数据（断电之后，数据会消失）</li>
<li>速度快</li>
<li>空间小（单位价格高）</li>
</ul>
</li>
<li><strong>硬盘</strong> <ul>
<li><strong>永久</strong> 存储数据</li>
<li>速度慢</li>
<li>空间大（单位价格低）</li>
</ul>
</li>
</ol>
<table>
<thead>
<tr>
<th align="center">CPU</th>
<th align="center">内存</th>
<th align="center">硬盘</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/CPU.jpg" alt="CPU-w200"></td>
<td align="center"><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/%E5%86%85%E5%AD%98%E6%9D%A1.png" alt="内存条-w200"></td>
<td align="center"><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/%E7%A1%AC%E7%9B%98.jpg" alt="硬盘-w200"></td>
</tr>
</tbody></table>
<h3 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h3><ol>
<li>计算机中哪一个硬件设备负责执行程序？<ul>
<li><strong>CPU</strong></li>
</ul>
</li>
<li><strong>内存</strong> 的速度快还是 <strong>硬盘</strong> 的速度快？<ul>
<li><strong>内存</strong></li>
</ul>
</li>
<li>我们的程序是安装在内存中的，还是安装在硬盘中的？<ul>
<li>硬盘</li>
</ul>
</li>
<li><strong>我买了一个内存条，有 500G 的空间！！！</strong>，这句话对吗？<ul>
<li>不对，内存条通常只有 <code>4G</code> &#x2F; <code>8G</code> &#x2F; <code>16G</code> &#x2F; <code>32G</code></li>
</ul>
</li>
<li><strong>计算机关机之后，内存中的数据都会消失</strong>，这句话对吗？<ul>
<li>正确</li>
</ul>
</li>
</ol>
<h2 id="02-程序执行的原理"><a href="#02-程序执行的原理" class="headerlink" title="02. 程序执行的原理"></a>02. 程序执行的原理</h2><p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/001_%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="001_程序执行示意图-w"></p>
<ol>
<li>程序 <strong>运行之前</strong>，程序是 <strong>保存在硬盘</strong> 中的</li>
<li>当要运行一个程序时<ul>
<li>操作系统会首先让 <strong>CPU</strong> 把程序复制到 <strong>内存</strong> 中</li>
<li><strong>CPU</strong> 执行 <strong>内存</strong> 中的 <strong>程序代码</strong></li>
</ul>
</li>
</ol>
<blockquote>
<p><strong>程序要执行，首先要被加载到内存</strong></p>
</blockquote>
<h3 id="2-1-Python-程序执行原理"><a href="#2-1-Python-程序执行原理" class="headerlink" title="2.1 Python 程序执行原理"></a>2.1 Python 程序执行原理</h3><p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/003_Python%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="003_Python程序执行示意图"></p>
<ol>
<li>操作系统会首先让 <strong>CPU</strong> 把 <strong>Python 解释器</strong> 的程序复制到 <strong>内存</strong> 中</li>
<li><strong>Python 解释器</strong> 根据语法规则，<strong>从上向下</strong> 让 <strong>CPU</strong> 翻译 <strong>Python 程序中的代码</strong></li>
<li><strong>CPU</strong> 负责执行翻译完成的代码</li>
</ol>
<h4 id="Python-的解释器有多大？"><a href="#Python-的解释器有多大？" class="headerlink" title="Python 的解释器有多大？"></a>Python 的解释器有多大？</h4><ul>
<li>执行以下终端命令可以查看 Python 解释器的大小</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 确认解释器所在位置</span></span><br><span class="line">$ <span class="built_in">which</span> python</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 查看 python 文件大小(只是一个软链接)</span></span><br><span class="line">$ <span class="built_in">ls</span> -lh /usr/bin/python</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 查看具体文件大小</span></span><br><span class="line">$ <span class="built_in">ls</span> -lh /usr/bin/python2.7</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：建立 <strong>软链接</strong> 的目的，是为了方便使用者不用记住使用的解释器是 <strong>哪一个具体版本</strong></p>
</blockquote>
<h2 id="03-程序的作用"><a href="#03-程序的作用" class="headerlink" title="03. 程序的作用"></a>03. 程序的作用</h2><blockquote>
<p>程序就是 <strong>用来处理数据</strong> 的！</p>
</blockquote>
<ul>
<li><strong>新闻软件</strong> 提供的 <strong>新闻内容、评论……</strong> 是数据</li>
<li><strong>电商软件</strong> 提供的 <strong>商品信息、配送信息……</strong> 是数据</li>
<li><strong>运动类软件</strong> 提供的 <strong>运动数据……</strong> 是数据</li>
<li><strong>地图类软件</strong> 提供的 <strong>地图信息、定位信息、车辆信息……</strong> 是数据</li>
<li><strong>即时通讯软件</strong> 提供的 <strong>聊天信息、好友信息……</strong> 是数据</li>
<li>……</li>
</ul>
<h3 id="3-1-思考-QQ-程序的启动过程"><a href="#3-1-思考-QQ-程序的启动过程" class="headerlink" title="3.1 思考 QQ 程序的启动过程"></a>3.1 思考 QQ 程序的启动过程</h3><ol>
<li>QQ 在<strong>运行之前</strong>，是保存在 <strong>硬盘</strong> 中的</li>
<li><strong>运行之后</strong>，QQ 程序就会被加载到 <strong>内存</strong> 中了</li>
</ol>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/003_QQ%E7%99%BB%E9%99%86%E7%95%8C%E9%9D%A2.png" alt="003_QQ登陆界面-w248"></p>
<h3 id="3-2-思考-QQ-程序的-登录-过程"><a href="#3-2-思考-QQ-程序的-登录-过程" class="headerlink" title="3.2 思考 QQ 程序的 登录 过程"></a>3.2 思考 QQ 程序的 <strong>登录</strong> 过程</h3><ol>
<li>读取用户输入的 <strong>QQ 号码</strong></li>
<li>读取用户输入的 <strong>QQ 密码</strong></li>
<li>将 <strong>QQ 号码</strong> 和 <strong>QQ 密码</strong> 发送给腾讯的服务器，等待服务器确认用户信息</li>
</ol>
<h4 id="思考-1"><a href="#思考-1" class="headerlink" title="思考 1"></a>思考 1</h4><blockquote>
<p>在 QQ 这个程序将 <strong>QQ 号码</strong> 和 <strong>QQ 密码</strong> 发送给服务器之前，<strong>是否需要先存储一下 QQ 号码 和 密码?</strong></p>
</blockquote>
<p><strong>答案</strong></p>
<p>肯定需要！—— 否则 QQ 这个程序就不知道把什么内容发送给服务器了！</p>
<h4 id="思考-2"><a href="#思考-2" class="headerlink" title="思考 2"></a>思考 2</h4><blockquote>
<p>QQ 这个程序把 <strong>QQ 号码</strong> 和 <strong>QQ 密码</strong> 保存在哪里？</p>
</blockquote>
<p><strong>答案</strong></p>
<p>保存在 <strong>内存</strong> 中，因为 QQ 程序自己就在内存中</p>
<h4 id="思考-3"><a href="#思考-3" class="headerlink" title="思考 3"></a>思考 3</h4><blockquote>
<p>QQ 这个程序是怎么保存用户的 <strong>QQ 号码</strong> 和 <strong>QQ 密码</strong> 的？</p>
</blockquote>
<p><strong>答案</strong></p>
<ol>
<li>在内存中为 <strong>QQ 号码</strong> 和 <strong>QQ 密码</strong> 各自分配一块空间<ul>
<li>在 QQ 程序结束之前，这两块空间是由 QQ 程序负责管理的，其他任何程序都不允许使用</li>
<li>在 QQ 自己使用完成之前，这两块空间始终都只负责保存 <strong>QQ 号码</strong> 和 <strong>QQ 密码</strong></li>
</ul>
</li>
<li>使用一个 <strong>别名</strong> 标记 <strong>QQ 号码</strong> 和 <strong>QQ 密码</strong> 在内存中的位置</li>
</ol>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/004_QQ%E5%8F%B7%E7%A0%81%E5%92%8C%E5%AF%86%E7%A0%81%E5%86%85%E5%AD%98%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="004_QQ号码和密码内存示意图"></p>
<blockquote>
<ul>
<li>在程序内部，为 <strong>QQ 号码</strong> 和 <strong>QQ 密码</strong> 在内存中分配的空间就叫做 <strong>变量</strong></li>
<li><h1 id="程序就是用来处理数据的，而变量就是用来存储数据的"><a href="#程序就是用来处理数据的，而变量就是用来存储数据的" class="headerlink" title="程序就是用来处理数据的，而变量就是用来存储数据的"></a><strong>程序就是用来处理数据的，而变量就是用来存储数据的</strong></h1></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>python面对过程学习</category>
      </categories>
      <tags>
        <tag>python学习</tag>
      </tags>
  </entry>
  <entry>
    <title>7.变量的基本使用</title>
    <url>/2021/12/22/python%E9%9D%A2%E5%AF%B9%E8%BF%87%E7%A8%8B%E5%AD%A6%E4%B9%A0/7.%E5%8F%98%E9%87%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="变量的基本使用"><a href="#变量的基本使用" class="headerlink" title="变量的基本使用"></a>变量的基本使用</h1><blockquote>
<p><strong>程序就是用来处理数据的，而变量就是用来存储数据的</strong></p>
</blockquote>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>变量定义</li>
<li>变量的类型</li>
<li>变量的命名</li>
</ul>
<h2 id="01-变量定义"><a href="#01-变量定义" class="headerlink" title="01. 变量定义"></a>01. 变量定义</h2><ul>
<li>在 Python 中，每个变量 <strong>在使用前都必须赋值</strong>，变量 <strong>赋值以后</strong> 该变量 <strong>才会被创建</strong></li>
<li>等号（&#x3D;）用来给变量赋值<ul>
<li><code>=</code> 左边是一个变量名</li>
<li><code>=</code> 右边是存储在变量中的值</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">变量名 = 值</span><br></pre></td></tr></table></figure>

<blockquote>
<p>变量定义之后，后续就可以直接使用了</p>
</blockquote>
<h3 id="1-变量演练1-——-iPython"><a href="#1-变量演练1-——-iPython" class="headerlink" title="1) 变量演练1 —— iPython"></a>1) 变量演练1 —— iPython</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义 qq_number 的变量用来保存 qq 号码</span></span><br><span class="line">In [<span class="number">1</span>]: qq_number = <span class="string">&quot;1234567&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出 qq_number 中保存的内容</span></span><br><span class="line">In [<span class="number">2</span>]: qq_number</span><br><span class="line">Out[<span class="number">2</span>]: <span class="string">&#x27;1234567&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 qq_password 的变量用来保存 qq 密码</span></span><br><span class="line">In [<span class="number">3</span>]: qq_password = <span class="string">&quot;123&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出 qq_password 中保存的内容</span></span><br><span class="line">In [<span class="number">4</span>]: qq_password</span><br><span class="line">Out[<span class="number">4</span>]: <span class="string">&#x27;123&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用交互式方式，如果要查看变量内容，直接输入变量名即可，不需要使用 <code>print</code> 函数</p>
</blockquote>
<h3 id="2-变量演练-2-——-PyCharm"><a href="#2-变量演练-2-——-PyCharm" class="headerlink" title="2) 变量演练 2 —— PyCharm"></a>2) 变量演练 2 —— PyCharm</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义 qq 号码变量</span></span><br><span class="line">qq_number = <span class="string">&quot;1234567&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 qq 密码变量</span></span><br><span class="line">qq_password = <span class="string">&quot;123&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在程序中，如果要输出变量的内容，需要使用 print 函数</span></span><br><span class="line"><span class="built_in">print</span>(qq_number)</span><br><span class="line"><span class="built_in">print</span>(qq_password)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用解释器执行，如果要输出变量的内容，必须要要使用 <code>print</code> 函数</p>
</blockquote>
<h3 id="3-变量演练-3-——-超市买苹果"><a href="#3-变量演练-3-——-超市买苹果" class="headerlink" title="3) 变量演练 3 —— 超市买苹果"></a>3) 变量演练 3 —— 超市买苹果</h3><blockquote>
<ul>
<li>可以用 <strong>其他变量的计算结果</strong> 来定义变量</li>
<li>变量定义之后，后续就可以直接使用了</li>
</ul>
</blockquote>
<p><strong>需求</strong></p>
<ul>
<li>苹果的价格是 <strong>8.5 元&#x2F;斤</strong></li>
<li>买了 <strong>7.5 斤</strong> 苹果</li>
<li>计算付款金额</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义苹果价格变量</span></span><br><span class="line">price = <span class="number">8.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义购买重量</span></span><br><span class="line">weight = <span class="number">7.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算金额</span></span><br><span class="line">money = price * weight</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(money)</span><br></pre></td></tr></table></figure>

<h4 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h4><ul>
<li>如果 <strong>只要买苹果，就返 5 块钱</strong></li>
<li>请重新计算购买金额</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义苹果价格变量</span></span><br><span class="line">price = <span class="number">8.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义购买重量</span></span><br><span class="line">weight = <span class="number">7.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算金额</span></span><br><span class="line">money = price * weight</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只要买苹果就返 5 元</span></span><br><span class="line">money = money - <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(money)</span><br></pre></td></tr></table></figure>

<p><strong>提问</strong></p>
<ul>
<li>上述代码中，一共定义有几个变量？<ul>
<li>三个：<code>price</code>／<code>weight</code>／<code>money</code></li>
</ul>
</li>
<li><code>money = money - 5</code> 是在定义新的变量还是在使用变量？<ul>
<li>直接使用之前已经定义的变量</li>
<li>变量名 只有在 <strong>第一次出现</strong> 才是 <strong>定义变量</strong></li>
<li>变量名 再次出现，不是定义变量，而是直接使用之前定义过的变量</li>
</ul>
</li>
<li>在程序开发中，可以修改之前定义变量中保存的值吗？<ul>
<li>可以</li>
<li>变量中存储的值，就是可以 <strong>变</strong> 的</li>
</ul>
</li>
</ul>
<h2 id="02-变量的类型"><a href="#02-变量的类型" class="headerlink" title="02. 变量的类型"></a>02. 变量的类型</h2><ul>
<li>在内存中创建一个变量，会包括：<ol>
<li>变量的名称</li>
<li>变量保存的数据</li>
<li>变量存储数据的类型</li>
<li>变量的地址（标示）</li>
</ol>
</li>
</ul>
<h3 id="2-1-变量类型的演练-——-个人信息"><a href="#2-1-变量类型的演练-——-个人信息" class="headerlink" title="2.1 变量类型的演练 —— 个人信息"></a>2.1 变量类型的演练 —— 个人信息</h3><p><strong>需求</strong></p>
<ul>
<li>定义变量保存小明的个人信息</li>
<li>姓名：<strong>小明</strong></li>
<li>年龄：<strong>18</strong> 岁</li>
<li>性别：<strong>是</strong>男生</li>
<li>身高：<strong>1.75</strong> 米</li>
<li>体重：<strong>75.0</strong> 公斤</li>
</ul>
<blockquote>
<p>利用 <strong>单步调试</strong> 确认变量中保存数据的类型</p>
</blockquote>
<p><strong>提问</strong></p>
<ol>
<li>在演练中，一共有几种数据类型？<ul>
<li>4 种</li>
<li><code>str</code> —— 字符串</li>
<li><code>bool</code> —— 布尔（真假）</li>
<li><code>int</code> —— 整数</li>
<li><code>float</code> —— 浮点数（小数）</li>
</ul>
</li>
<li>在 <code>Python</code> 中定义变量时需要指定类型吗？<ul>
<li>不需要</li>
<li><code>Python</code> 可以根据 <code>=</code> 等号右侧的值，自动推导出变量中存储数据的类型</li>
</ul>
</li>
</ol>
<h3 id="2-2-变量的类型"><a href="#2-2-变量的类型" class="headerlink" title="2.2 变量的类型"></a>2.2 变量的类型</h3><ul>
<li>在 <code>Python</code> 中定义变量是 <strong>不需要指定类型</strong>（在其他很多高级语言中都需要）</li>
<li>数据类型可以分为 <strong>数字型</strong> 和 <strong>非数字型</strong></li>
<li>数字型<ul>
<li>整型 (<code>int</code>)             ————没有小数点</li>
<li>浮点型（<code>float</code>）————有小数点</li>
<li>布尔型（<code>bool</code>） <ul>
<li>真 <code>True</code> <code>非 0 数</code> —— <strong>非零即真</strong>（只要不是零的数字都会当成真）</li>
<li>假 <code>False</code> <code>0</code></li>
</ul>
</li>
<li>复数型 (<code>complex</code>)<ul>
<li>主要用于科学计算，例如：平面场问题、波动问题、电感电容等问题</li>
</ul>
</li>
</ul>
</li>
<li>非数字型<ul>
<li>字符串</li>
<li>列表</li>
<li>元组</li>
<li>字典</li>
</ul>
</li>
</ul>
<blockquote>
<p>提示：在 Python 2.x 中，<strong>整数</strong> 根据保存数值的长度还分为：</p>
<ul>
<li><p><code>int</code>（整数）</p>
</li>
<li><p><code>long</code>（长整数）</p>
<p>​	<img src="https://gitee.com/lichaikui/picture/raw/master/tupian/image-20211213203103271.png" alt="image-20211213203103271" style="zoom:33%;" /></p>
</li>
</ul>
</blockquote>
<ul>
<li>使用 <code>type</code> 函数可以查看一个变量的类型</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="built_in">type</span>(name)</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/image-20211213202532840.png" alt="image-20211213202532840"></p>
<h3 id="2-3-不同类型变量之间的计算"><a href="#2-3-不同类型变量之间的计算" class="headerlink" title="2.3 不同类型变量之间的计算"></a>2.3 不同类型变量之间的计算</h3><h4 id="1-数字型变量-之间可以直接计算"><a href="#1-数字型变量-之间可以直接计算" class="headerlink" title="1) 数字型变量 之间可以直接计算"></a>1) <strong>数字型变量</strong> 之间可以直接计算</h4><ul>
<li>在 Python 中，两个数字型变量是可以直接进行 算数运算的</li>
<li>如果变量是 <code>bool</code> 型，在计算时<ul>
<li><code>True</code> 对应的数字是 <code>1</code></li>
<li><code>False</code> 对应的数字是 <code>0</code></li>
</ul>
</li>
</ul>
<p><strong>演练步骤</strong></p>
<ol>
<li>定义整数 <code>i = 10</code></li>
<li>定义浮点数 <code>f = 10.5</code></li>
<li>定义布尔型 <code>b = True</code></li>
</ol>
<ul>
<li><p>在 iPython 中，使用上述三个变量相互进行算术运算</p>
<img src="https://gitee.com/lichaikui/picture/raw/master/tupian/image-20211213210024379.png" alt="image-20211213210024379" style="zoom: 50%;" /></li>
</ul>
<h4 id="2-字符串变量-之间使用-拼接字符串"><a href="#2-字符串变量-之间使用-拼接字符串" class="headerlink" title="2) 字符串变量 之间使用 + 拼接字符串"></a>2) <strong>字符串变量</strong> 之间使用 <code>+</code> 拼接字符串</h4><ul>
<li>在 Python 中，字符串之间可以使用 <code>+</code> 拼接生成新的字符串</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: first_name = <span class="string">&quot;三&quot;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: last_name = <span class="string">&quot;张&quot;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: first_name + last_name</span><br><span class="line">Out[<span class="number">3</span>]: <span class="string">&#x27;三张&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-字符串变量-可以和-整数-使用-重复拼接相同的字符串"><a href="#3-字符串变量-可以和-整数-使用-重复拼接相同的字符串" class="headerlink" title="3) 字符串变量 可以和 整数 使用 * 重复拼接相同的字符串"></a>3) <strong>字符串变量</strong> 可以和 <strong>整数</strong> 使用 <code>*</code> 重复拼接相同的字符串</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="string">&quot;-&quot;</span> * <span class="number">50</span></span><br><span class="line">Out[<span class="number">1</span>]: <span class="string">&#x27;--------------------------------------------------&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-数字型变量-和-字符串-之间-不能进行其他计算"><a href="#4-数字型变量-和-字符串-之间-不能进行其他计算" class="headerlink" title="4) 数字型变量 和 字符串 之间 不能进行其他计算"></a>4) <strong>数字型变量</strong> 和 <strong>字符串</strong> 之间 不能进行其他计算</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: first_name = <span class="string">&quot;zhang&quot;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: x = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: x + first_name</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError: unsupported operand <span class="built_in">type</span>(s) <span class="keyword">for</span> +: <span class="string">&#x27;int&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;str&#x27;</span></span><br><span class="line">类型错误：`+` 不支持的操作类型：`<span class="built_in">int</span>` 和 `<span class="built_in">str</span>`</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/image-20211213210752530.png" alt="image-20211213210752530"></p>
<h3 id="2-4-变量的输入"><a href="#2-4-变量的输入" class="headerlink" title="2.4 变量的输入"></a>2.4 变量的输入</h3><ul>
<li>所谓 <strong>输入</strong>，就是 <strong>用代码</strong> <strong>获取</strong> 用户通过 <strong>键盘</strong> 输入的信息</li>
<li>例如：去银行取钱，在 ATM 上输入密码</li>
<li>在 Python 中，如果要获取用 户在 <strong>键盘</strong> 上的输入信息，需要使用到 <code>input</code> 函数</li>
</ul>
<h4 id="1-关于函数"><a href="#1-关于函数" class="headerlink" title="1) 关于函数"></a>1) 关于函数</h4><ul>
<li>一个 <strong>提前准备好的功能</strong>(别人或者自己写的代码)，<strong>可以直接使用</strong>，而 <strong>不用关心内部的细节</strong></li>
<li>目前已经学习过的函数</li>
</ul>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>print(x)</td>
<td>将 x 输出到控制台</td>
</tr>
<tr>
<td>type(x)</td>
<td>查看 x 的变量类型</td>
</tr>
</tbody></table>
<h4 id="2-input-函数实现键盘输入"><a href="#2-input-函数实现键盘输入" class="headerlink" title="2) input 函数实现键盘输入"></a>2) input 函数实现键盘输入</h4><ul>
<li>在 Python 中可以使用 <code>input</code> 函数从键盘等待用户的输入</li>
<li><a href="">用户输入的 <strong>任何内容</strong> Python 都认为是一个 **字符串</a>**</li>
<li>语法如下：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">字符串变量 = <span class="built_in">input</span>(<span class="string">&quot;提示信息：&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/image-20211213212544830.png" alt="image-20211213212544830">                        </p>
<h4 id="3-类型转换函数"><a href="#3-类型转换函数" class="headerlink" title="3) 类型转换函数"></a>3) 类型转换函数</h4><table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>int(x)</td>
<td>将 x 转换为一个整数</td>
</tr>
<tr>
<td>float(x)</td>
<td>将 x 转换到一个浮点数</td>
</tr>
</tbody></table>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/image-20211213215004749.png" alt="image-20211213215004749"></p>
<h4 id="4-变量输入演练-——-超市买苹果增强版"><a href="#4-变量输入演练-——-超市买苹果增强版" class="headerlink" title="4) 变量输入演练 —— 超市买苹果增强版"></a>4) 变量输入演练 —— 超市买苹果增强版</h4><p><strong>需求</strong></p>
<ul>
<li><strong>收银员输入</strong> 苹果的价格，单位：<strong>元／斤</strong></li>
<li><strong>收银员输入</strong> 用户购买苹果的重量，单位：<strong>斤</strong></li>
<li>计算并且 <strong>输出</strong> 付款金额</li>
</ul>
<h5 id="演练方式-1"><a href="#演练方式-1" class="headerlink" title="演练方式 1"></a>演练方式 1</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 输入苹果单价</span></span><br><span class="line">price_str = <span class="built_in">input</span>(<span class="string">&quot;请输入苹果价格：&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 要求苹果重量</span></span><br><span class="line">weight_str = <span class="built_in">input</span>(<span class="string">&quot;请输入苹果重量：&quot;</span>)</span><br><span class="line"><span class="comment"># 字符串之间不能相乘</span></span><br><span class="line"><span class="comment"># 3. 计算金额</span></span><br><span class="line"><span class="comment"># 1&gt; 将苹果单价转换成小数</span></span><br><span class="line">price = <span class="built_in">float</span>(price_str)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2&gt; 将苹果重量转换成小数</span></span><br><span class="line">weight = <span class="built_in">float</span>(weight_str)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3&gt; 计算付款金额</span></span><br><span class="line">money = price * weight</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(money)</span><br></pre></td></tr></table></figure>

<p><strong>提问</strong></p>
<ol>
<li>演练中，针对 <strong>价格</strong> 定义了几个变量？<ul>
<li><strong>两个</strong></li>
<li><code>price_str</code> 记录用户输入的价格字符串</li>
<li><code>price</code> 记录转换后的价格数值</li>
</ul>
</li>
<li><strong>思考</strong> —— 如果开发中，需要用户通过控制台 输入 <strong>很多个 数字</strong>，针对每一个数字都要定义两个变量，<strong>方便吗</strong>？</li>
</ol>
<h5 id="演练方式-2-——-买苹果改进版"><a href="#演练方式-2-——-买苹果改进版" class="headerlink" title="演练方式 2 —— 买苹果改进版"></a>演练方式 2 —— 买苹果改进版</h5><ol>
<li><strong>定义</strong> 一个 <strong>浮点变量</strong> 接收用户输入的同时，就使用 <code>float</code> 函数进行转换</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">price = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入价格:&quot;</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li>改进后的好处：</li>
</ul>
<ol>
<li>节约空间，只需要为一个变量分配空间</li>
<li>起名字方便，不需要为中间变量起名字</li>
</ol>
<ul>
<li>改进后的“缺点”：</li>
</ul>
<ol>
<li>初学者需要知道，两个函数能够嵌套使用，稍微有一些难度</li>
</ol>
<p><strong>提示</strong></p>
<ul>
<li>如果输入的不是一个数字，程序执行时会出错，有关数据转换的高级话题，后续会讲！</li>
</ul>
<h3 id="2-5-变量的格式化输出"><a href="#2-5-变量的格式化输出" class="headerlink" title="2.5 变量的格式化输出"></a>2.5 变量的格式化输出</h3><blockquote>
<p>苹果单价 <code>9.00</code> 元／斤，购买了 <code>5.00</code> 斤，需要支付 <code>45.00</code> 元</p>
</blockquote>
<ul>
<li>在 Python 中可以使用 <code>print</code> 函数将信息输出到控制台</li>
<li>如果希望输出文字信息的同时，<strong>一起输出</strong> <strong>数据</strong>，就需要使用到 <strong>格式化操作符</strong></li>
<li><code>%</code> 被称为 <strong>格式化操作符</strong>，专门用于处理字符串中的格式<ul>
<li>包含 <code>%</code> 的字符串，被称为 <strong>格式化字符串</strong></li>
<li><code>%</code> 和不同的 <strong>字符</strong> 连用，<strong>不同类型的数据</strong> 需要使用 <strong>不同的格式化字符</strong></li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>格式化字符</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>%s</td>
<td>字符串</td>
</tr>
<tr>
<td>%d</td>
<td><a href="">有符号十进制整数，<code>%06d</code> 表示输出的整数显示位数，不足的地方使用 <code>0</code> 补全</a></td>
</tr>
<tr>
<td>%f</td>
<td><a href="">浮点数，<code>%.2f</code> 表示小数点后只显示两位</a></td>
</tr>
<tr>
<td>%%</td>
<td>输出 <code>%</code></td>
</tr>
</tbody></table>
<ul>
<li>语法格式如下：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;格式化字符串&quot;</span> % 变量<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;格式化字符串&quot;</span> % (变量<span class="number">1</span>, 变量<span class="number">2.</span>..))</span><br></pre></td></tr></table></figure>

<h4 id="格式化输出演练-——-基本练习"><a href="#格式化输出演练-——-基本练习" class="headerlink" title="格式化输出演练 —— 基本练习"></a>格式化输出演练 —— 基本练习</h4><p><strong>需求</strong></p>
<ol>
<li>定义字符串变量 <code>name</code>，输出 <strong>我的名字叫 小明，请多多关照！</strong></li>
<li>定义整数变量 <code>student_no</code>，输出 <strong>我的学号是 000001</strong></li>
<li>定义小数 <code>price</code>、<code>weight</code>、<code>money</code>，输出 <strong>苹果单价 9.00 元／斤，购买了 5.00 斤，需要支付 45.00 元</strong></li>
<li>定义一个小数 <code>scale</code>，输出 <strong>数据比例是 10.00%</strong></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我的名字叫 %s，请多多关照！&quot;</span> % name)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我的学号是 %06d&quot;</span> % student_no)</span><br><span class="line">	显示六位不够则用<span class="number">0</span>补位，超过六位无效</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;苹果单价 %.02f 元／斤，购买 %.02f 斤，需要支付 %.02f 元&quot;</span> % (price, weight, money))</span><br><span class="line">	显示两位小数</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数据比例是 %.02f%%&quot;</span> % (scale * <span class="number">100</span>))</span><br></pre></td></tr></table></figure>

<h4 id="课后练习-——-个人名片"><a href="#课后练习-——-个人名片" class="headerlink" title="课后练习 —— 个人名片"></a>课后练习 —— 个人名片</h4><p><strong>需求</strong></p>
<ul>
<li>在控制台依次提示用户输入：<strong>姓名</strong>、<strong>公司</strong>、<strong>职位</strong>、<strong>电话</strong>、<strong>邮箱</strong></li>
<li>按照以下格式输出：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**************************************************</span><br><span class="line">公司名称</span><br><span class="line"></span><br><span class="line">姓名 (职位)</span><br><span class="line"></span><br><span class="line">电话：电话</span><br><span class="line">邮箱：邮箱</span><br><span class="line">**************************************************</span><br></pre></td></tr></table></figure>

<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">在控制台依次提示用户输入：姓名、公司、职位、电话、电子邮箱</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">name = <span class="built_in">input</span>(<span class="string">&quot;请输入姓名：&quot;</span>)</span><br><span class="line">company = <span class="built_in">input</span>(<span class="string">&quot;请输入公司：&quot;</span>)</span><br><span class="line">title = <span class="built_in">input</span>(<span class="string">&quot;请输入职位：&quot;</span>)</span><br><span class="line">phone = <span class="built_in">input</span>(<span class="string">&quot;请输入电话：&quot;</span>)</span><br><span class="line">email = <span class="built_in">input</span>(<span class="string">&quot;请输入邮箱：&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*&quot;</span> * <span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(company)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%s (%s)&quot;</span> % (name, title))</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;电话：%s&quot;</span> % phone)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;邮箱：%s&quot;</span> % email)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>python面对过程学习</category>
      </categories>
      <tags>
        <tag>python学习</tag>
      </tags>
  </entry>
  <entry>
    <title>8.变量的命名</title>
    <url>/2021/12/23/python%E9%9D%A2%E5%AF%B9%E8%BF%87%E7%A8%8B%E5%AD%A6%E4%B9%A0/8.%E5%8F%98%E9%87%8F%E7%9A%84%E5%91%BD%E5%90%8D/</url>
    <content><![CDATA[<h1 id="变量的命名"><a href="#变量的命名" class="headerlink" title="变量的命名"></a>变量的命名</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>标识符和关键字</li>
<li>变量的命名规则</li>
</ul>
<h2 id="0-1-标识符和关键字"><a href="#0-1-标识符和关键字" class="headerlink" title="0.1 标识符和关键字"></a>0.1 标识符和关键字</h2><h3 id="1-1-标识符"><a href="#1-1-标识符" class="headerlink" title="1.1 标识符"></a>1.1 标识符</h3><blockquote>
<p>标示符就是程序员定义的 <strong>变量名</strong>、<strong>函数名</strong></p>
<p><strong>名字</strong> 需要有 <strong>见名知义</strong> 的效果，见下图：</p>
</blockquote>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/001_%E4%B8%AD%E5%9B%BD%E5%B1%B1%E4%B8%9C%E6%89%BE%E8%93%9D%E7%BF%94.jpg" alt="001_中国山东找蓝翔"></p>
<ul>
<li>标示符可以由 <strong>字母</strong>、<strong>下划线</strong> 和 <strong>数字</strong> 组成</li>
<li><strong>不能以数字开头</strong></li>
<li><strong>不能与关键字重名</strong></li>
</ul>
<p>思考：下面的标示符哪些是正确的，哪些不正确为什么？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fromNo12</span><br><span class="line">from#12      错误有#</span><br><span class="line">my_Boolean</span><br><span class="line">my-Boolean   错误有-</span><br><span class="line">Obj2</span><br><span class="line">2ndObj       错误是数字开头</span><br><span class="line">myInt</span><br><span class="line">My_tExt</span><br><span class="line">_test</span><br><span class="line">test!32      错误有！</span><br><span class="line">haha(da)tt   错误有（）</span><br><span class="line">jack_rose</span><br><span class="line">jack&amp;rose    错误有&amp;</span><br><span class="line">GUI</span><br><span class="line">G.U.I        错误有.</span><br></pre></td></tr></table></figure>

<h3 id="1-2-关键字"><a href="#1-2-关键字" class="headerlink" title="1.2 关键字"></a>1.2 关键字</h3><ul>
<li><strong>关键字</strong> 就是在 <code>Python</code> 内部已经使用的标识符</li>
<li><strong>关键字</strong> 具有特殊的功能和含义</li>
<li>开发者 <strong>不允许定义和关键字相同的名字的标示符</strong></li>
</ul>
<p>通过以下命令可以查看 <code>ipython</code> 中的关键字</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> keyword</span><br><span class="line">In [<span class="number">2</span>]: <span class="built_in">print</span>(keyword.kwlist)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：<strong>关键字的学习及使用</strong>，会在后面的课程中不断介绍</p>
<ul>
<li><p><code>import</code> <strong>关键字</strong> 可以导入一个 <strong>“工具包”</strong></p>
</li>
<li><p>在 <code>Python</code> 中不同的工具包，提供有不同的工具</p>
</li>
</ul>
</blockquote>
<h2 id="02-变量的命名规则"><a href="#02-变量的命名规则" class="headerlink" title="02. 变量的命名规则"></a>02. 变量的命名规则</h2><blockquote>
<p><strong>命名规则</strong> 可以被视为一种 <strong>惯例</strong>，并无绝对与强制<br>目的是为了 <strong>增加代码的识别和可读性</strong></p>
</blockquote>
<p><strong>注意</strong> <code>Python</code> 中的 <strong>标识符</strong> 是 <strong>区分大小写的</strong></p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/002_%E6%A0%87%E8%AF%86%E7%AC%A6%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F%E5%86%99.jpg" alt="002_标识符区分大小写"></p>
<ol>
<li>在定义变量时，为了保证代码格式，<code>=</code> 的左右应该各保留一个空格</li>
<li>在 <code>Python</code> 中，如果 <strong>变量名</strong> 需要由 <strong>二个</strong> 或 <strong>多个单词</strong> 组成时，可以按照以下方式命名<ol>
<li>每个单词都使用小写字母</li>
<li>单词与单词之间使用 <strong><code>_</code>下划线</strong> 连接</li>
</ol>
<ul>
<li>例如：<code>first_name</code>、<code>last_name</code>、<code>qq_number</code>、<code>qq_password</code></li>
</ul>
</li>
</ol>
<h3 id="驼峰命名法（其他语言常用到）"><a href="#驼峰命名法（其他语言常用到）" class="headerlink" title="驼峰命名法（其他语言常用到）"></a>驼峰命名法（其他语言常用到）</h3><ul>
<li>当 <strong>变量名</strong> 是由二个或多个单词组成时，还可以利用驼峰命名法来命名</li>
<li><strong>小驼峰式命名法</strong><ul>
<li>第一个单词以小写字母开始，后续单词的首字母大写</li>
<li>例如：<code>firstName</code>、<code>lastName</code></li>
</ul>
</li>
<li><strong>大驼峰式命名法</strong><ul>
<li>每一个单词的首字母都采用大写字母</li>
<li>例如：<code>FirstName</code>、<code>LastName</code>、<code>CamelCase</code></li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/003_%E9%A9%BC%E5%B3%B0%E5%91%BD%E5%90%8D%E6%B3%95.jpg" alt="003_驼峰命名法"></p>
]]></content>
      <categories>
        <category>python面对过程学习</category>
      </categories>
      <tags>
        <tag>python学习</tag>
      </tags>
  </entry>
  <entry>
    <title>9.判断（if）语句</title>
    <url>/2021/12/23/python%E9%9D%A2%E5%AF%B9%E8%BF%87%E7%A8%8B%E5%AD%A6%E4%B9%A0/9.%E5%88%A4%E6%96%AD%EF%BC%88if%EF%BC%89%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<h1 id="判断（if）语句"><a href="#判断（if）语句" class="headerlink" title="判断（if）语句"></a>判断（if）语句</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>开发中的应用场景</li>
<li>if 语句体验</li>
<li>if 语句进阶</li>
<li>综合应用</li>
</ul>
<h2 id="01-开发中的应用场景"><a href="#01-开发中的应用场景" class="headerlink" title="01. 开发中的应用场景"></a>01. 开发中的应用场景</h2><p>生活中的判断几乎是无所不在的，我们每天都在做各种各样的选择，如果这样？如果那样？……</p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/001_%E6%9C%AA%E6%88%90%E5%B9%B4%E4%BA%BA%E7%A6%81%E6%AD%A2%E5%85%A5%E5%86%85.jpg"></p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/image-20211216215930591.png" alt="image-20211216215930591"></p>
<h3 id="程序中的判断"><a href="#程序中的判断" class="headerlink" title="程序中的判断"></a>程序中的判断</h3><p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/003_%E5%88%A4%E6%96%AD%E7%A4%BA%E6%84%8F%E5%9B%BE.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 今天发工资:</span><br><span class="line"></span><br><span class="line">    先还信用卡的钱</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> 有剩余:</span><br><span class="line"></span><br><span class="line">        又可以happy了，O(∩_∩)O哈哈~</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">        噢，no。。。还的等<span class="number">30</span>天</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">    盼着发工资</span><br></pre></td></tr></table></figure>

<h3 id="判断的定义"><a href="#判断的定义" class="headerlink" title="判断的定义"></a>判断的定义</h3><ul>
<li>如果 <strong>条件满足</strong>，才能做某件事情，</li>
<li>如果 <strong>条件不满足</strong>，就做另外一件事情，或者什么也不做</li>
</ul>
<blockquote>
<p>正是因为有了判断，才使得程序世界丰富多彩，充满变化！</p>
<p><strong>判断语句</strong> 又被称为 “分支语句”，正是因为有了判断，才让程序有了很多的分支</p>
</blockquote>
<h2 id="02-if-语句体验"><a href="#02-if-语句体验" class="headerlink" title="02. if 语句体验"></a>02. if 语句体验</h2><h3 id="2-1-if-判断语句基本语法"><a href="#2-1-if-判断语句基本语法" class="headerlink" title="2.1 if 判断语句基本语法"></a>2.1 if 判断语句基本语法</h3><p>在 <code>Python</code> 中，<strong>if 语句</strong> 就是用来进行判断的，格式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 要判断的条件:</span><br><span class="line">    条件成立时，要做的事情</span><br><span class="line">    ……</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：代码的缩进为一个 <code>tab</code> 键，或者 <strong>4</strong> 个空格 —— <strong>建议使用空格</strong></p>
<ul>
<li>在 Python 开发中，Tab 和空格不要混用！</li>
</ul>
</blockquote>
<p><strong>我们可以把整个 if 语句看成一个完整的代码块</strong></p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/003_%E5%88%A4%E6%96%AD%E7%A4%BA%E6%84%8F%E5%9B%BE.png"></p>
<h3 id="2-2-判断语句演练-——-判断年龄"><a href="#2-2-判断语句演练-——-判断年龄" class="headerlink" title="2.2 判断语句演练 —— 判断年龄"></a>2.2 判断语句演练 —— 判断年龄</h3><p><strong>需求</strong></p>
<ol>
<li>定义一个整数变量记录年龄</li>
<li>判断是否满 18 岁 （**&gt;&#x3D;**）</li>
<li>如果满 18 岁，允许进网吧嗨皮</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 定义年龄变量</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 判断是否满 18 岁</span></span><br><span class="line"><span class="comment"># if 语句以及缩进部分的代码是一个完整的代码块</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;可以进网吧嗨皮……&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 思考！- 无论条件是否满足都会执行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;这句代码什么时候执行?&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：</p>
<ul>
<li><code>if</code> 语句以及缩进部分是一个 <strong>完整的代码块</strong></li>
</ul>
<h3 id="2-3-else-处理条件不满足的情况"><a href="#2-3-else-处理条件不满足的情况" class="headerlink" title="2.3 else 处理条件不满足的情况"></a>2.3 else 处理条件不满足的情况</h3><p><strong>思考</strong></p>
<p>在使用 <code>if</code> 判断时，只能做到满足条件时要做的事情。那如果需要在 <strong>不满足条件的时候</strong>，做某些事情，该如何做呢？</p>
<p><strong>答案</strong></p>
<p><code>else</code>，格式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 要判断的条件:</span><br><span class="line">    条件成立时，要做的事情</span><br><span class="line">    ……</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    条件不成立时，要做的事情</span><br><span class="line">    ……</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：</p>
<ul>
<li><code>if</code> 和 <code>else</code> 语句以及各自的缩进部分共同是一个 <strong>完整的代码块</strong></li>
</ul>
<h3 id="2-4-判断语句演练-——-判断年龄改进"><a href="#2-4-判断语句演练-——-判断年龄改进" class="headerlink" title="2.4 判断语句演练 —— 判断年龄改进"></a>2.4 判断语句演练 —— 判断年龄改进</h3><p><strong>需求</strong></p>
<ol>
<li>输入用户年龄</li>
<li>判断是否满 18 岁 （**&gt;&#x3D;**）</li>
<li>如果满 18 岁，允许进网吧嗨皮</li>
<li>如果未满 18 岁，提示回家写作业</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 输入用户年龄</span></span><br><span class="line">age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;今年多大了？&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 判断是否满 18 岁</span></span><br><span class="line"><span class="comment"># if 语句以及缩进部分的代码是一个完整的语法块</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;可以进网吧嗨皮……&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你还没长大，应该回家写作业！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 思考！- 无论条件是否满足都会执行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;这句代码什么时候执行?&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/20211216223139.png"></p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/note_tupian/img.png"></p>
<h2 id="03-逻辑运算"><a href="#03-逻辑运算" class="headerlink" title="03. 逻辑运算"></a>03. 逻辑运算</h2><ul>
<li>在程序开发中，通常 <strong>在判断条件时</strong>，会需要同时判断多个条件</li>
<li>只有多个条件都满足，才能够执行后续代码，这个时候需要使用到 <strong>逻辑运算符</strong></li>
<li><strong>逻辑运算符</strong> 可以把 <strong>多个条件</strong> 按照 <strong>逻辑</strong> 进行 <strong>连接</strong>，变成 <strong>更复杂的条件</strong></li>
<li>Python 中的 <strong>逻辑运算符</strong> 包括：<strong>与 and</strong>／<strong>或 or</strong>／<strong>非 not</strong> 三种</li>
</ul>
<h3 id="3-1-and"><a href="#3-1-and" class="headerlink" title="3.1 and"></a>3.1 <code>and</code></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">条件1 and 条件2</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>与</strong>／<strong>并且</strong></li>
<li>两个条件同时满足，返回 <code>True</code></li>
<li>只要有一个不满足，就返回 <code>False</code></li>
</ul>
<table>
<thead>
<tr>
<th align="center">条件 1</th>
<th align="center">条件 2</th>
<th align="center">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">成立</td>
<td align="center">成立</td>
<td align="center">成立</td>
</tr>
<tr>
<td align="center">成立</td>
<td align="center">不成立</td>
<td align="center">不成立</td>
</tr>
<tr>
<td align="center">不成立</td>
<td align="center">成立</td>
<td align="center">不成立</td>
</tr>
<tr>
<td align="center">不成立</td>
<td align="center">不成立</td>
<td align="center">不成立</td>
</tr>
</tbody></table>
<h3 id="3-2-or"><a href="#3-2-or" class="headerlink" title="3.2 or"></a>3.2 <code>or</code></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">条件1 or 条件2</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>或</strong>／<strong>或者</strong></li>
<li>两个条件只要有一个满足，返回 <code>True</code></li>
<li>两个条件都不满足，返回 <code>False</code></li>
</ul>
<table>
<thead>
<tr>
<th align="center">条件 1</th>
<th align="center">条件 2</th>
<th align="center">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">成立</td>
<td align="center">成立</td>
<td align="center">成立</td>
</tr>
<tr>
<td align="center">成立</td>
<td align="center">不成立</td>
<td align="center">成立</td>
</tr>
<tr>
<td align="center">不成立</td>
<td align="center">成立</td>
<td align="center">成立</td>
</tr>
<tr>
<td align="center">不成立</td>
<td align="center">不成立</td>
<td align="center">不成立</td>
</tr>
</tbody></table>
<h3 id="3-3-not"><a href="#3-3-not" class="headerlink" title="3.3 not"></a>3.3 <code>not</code></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">not 条件</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>非</strong>／<strong>不是</strong></li>
</ul>
<table>
<thead>
<tr>
<th align="center">条件</th>
<th align="center">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">成立</td>
<td align="center">不成立</td>
</tr>
<tr>
<td align="center">不成立</td>
<td align="center">成立</td>
</tr>
</tbody></table>
<h4 id="逻辑运算演练"><a href="#逻辑运算演练" class="headerlink" title="逻辑运算演练"></a>逻辑运算演练</h4><ol>
<li>练习1: 定义一个整数变量 <code>age</code>，编写代码判断年龄是否正确<ul>
<li>要求人的年龄在 0-120 之间</li>
</ul>
</li>
<li>练习2: 定义两个整数变量 <code>python_score</code>、<code>c_score</code>，编写代码判断成绩<ul>
<li>要求只要有一门成绩 &gt; 60 分就算合格</li>
</ul>
</li>
<li>练习3: 定义一个布尔型变量 <code>is_employee</code>，编写代码判断是否是本公司员工<ul>
<li>如果不是提示不允许入内</li>
</ul>
</li>
</ol>
<p>答案 1：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 练习1: 定义一个整数变量 age，编写代码判断年龄是否正确</span></span><br><span class="line">age = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要求人的年龄在 0-120 之间</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">0</span> <span class="keyword">and</span> age &lt;= <span class="number">120</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;年龄正确&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;年龄不正确&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>答案 2：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 练习2: 定义两个整数变量 python_score、c_score，编写代码判断成绩</span></span><br><span class="line">python_score = <span class="number">50</span></span><br><span class="line">c_score = <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要求只要有一门成绩 &gt; 60 分就算合格</span></span><br><span class="line"><span class="keyword">if</span> python_score &gt; <span class="number">60</span> <span class="keyword">or</span> c_score &gt; <span class="number">60</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;考试通过&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;再接再厉！&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>答案 3：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 练习3: 定义一个布尔型变量 `is_employee`，编写代码判断是否是本公司员工</span></span><br><span class="line">is_employee = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不是提示不允许入内</span></span><br><span class="line"><span class="comment"># 在开发中，通常希望某个条件不满足时，执行一些代码，可以使用 not</span></span><br><span class="line"><span class="comment"># 另外，如果需要拼接复杂的逻辑计算条件，同样也有可能使用到 not</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> is_employee:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;非公勿内&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="04-if-语句进阶"><a href="#04-if-语句进阶" class="headerlink" title="04. if 语句进阶"></a>04. if 语句进阶</h2><h3 id="4-1-elif"><a href="#4-1-elif" class="headerlink" title="4.1 elif"></a>4.1 <code>elif</code></h3><ul>
<li>在开发中，使用 <code>if</code> 可以 <strong>判断条件</strong></li>
<li>使用 <code>else</code> 可以处理 <strong>条件不成立</strong> 的情况</li>
<li>但是，如果希望 <strong>再增加一些条件</strong>，<strong>条件不同，需要执行的代码也不同</strong> 时，就可以使用 <code>elif</code> </li>
<li>语法格式如下：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>:</span><br><span class="line">    条件<span class="number">1</span>满足执行的代码</span><br><span class="line">    ……</span><br><span class="line"><span class="keyword">elif</span> 条件<span class="number">2</span>:</span><br><span class="line">    条件<span class="number">2</span>满足时，执行的代码</span><br><span class="line">    ……</span><br><span class="line"><span class="keyword">elif</span> 条件<span class="number">3</span>:</span><br><span class="line">    条件<span class="number">3</span>满足时，执行的代码</span><br><span class="line">    ……</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    以上条件都不满足时，执行的代码</span><br><span class="line">    ……</span><br></pre></td></tr></table></figure>

<ul>
<li>对比逻辑运算符的代码</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span> <span class="keyword">and</span> 条件<span class="number">2</span>:</span><br><span class="line">    条件<span class="number">1</span>满足 并且 条件<span class="number">2</span>满足 执行的代码</span><br><span class="line">    ……</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong></p>
<ol>
<li><code>elif</code> 和 <code>else</code> 都必须和 <code>if</code> 联合使用，而不能单独使用</li>
<li>可以将 <code>if</code>、<code>elif</code> 和 <code>else</code> 以及各自缩进的代码，看成一个 <strong>完整的代码块</strong></li>
</ol>
<h4 id="elif-演练-——-女友的节日"><a href="#elif-演练-——-女友的节日" class="headerlink" title="elif 演练 —— 女友的节日"></a>elif 演练 —— 女友的节日</h4><p><strong>需求</strong></p>
<ol>
<li>定义 <code>holiday_name</code> 字符串变量记录节日名称</li>
<li>如果是 <strong>情人节</strong> 应该 <strong>买玫瑰</strong>／<strong>看电影</strong></li>
<li>如果是 <strong>平安夜</strong> 应该 <strong>买苹果</strong>／<strong>吃大餐</strong></li>
<li>如果是 <strong>生日</strong> 应该 <strong>买蛋糕</strong></li>
<li>其他的日子每天都是节日啊……</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">holiday_name = &quot;平安夜&quot;</span><br><span class="line"></span><br><span class="line">if holiday_name == &quot;情人节&quot;:</span><br><span class="line">    print(&quot;买玫瑰&quot;)</span><br><span class="line">    print(&quot;看电影&quot;)</span><br><span class="line">elif holiday_name == &quot;平安夜&quot;:</span><br><span class="line">    print(&quot;买苹果&quot;)</span><br><span class="line">    print(&quot;吃大餐&quot;)</span><br><span class="line">elif holiday_name == &quot;生日&quot;:</span><br><span class="line">    print(&quot;买蛋糕&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;每天都是节日啊……&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4-2-if-的嵌套"><a href="#4-2-if-的嵌套" class="headerlink" title="4.2 if 的嵌套"></a>4.2 <code>if</code> 的嵌套</h3><p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/image-20211216215930591.png"></p>
<blockquote>
<p><strong>elif</strong> 的应用场景是：<strong>同时</strong> 判断 <strong>多个条件</strong>，所有的条件是 <strong>平级</strong> 的</p>
</blockquote>
<ul>
<li>在开发中，使用 <code>if</code> 进行条件判断，如果希望 <strong>在条件成立的执行语句中</strong> 再 <strong>增加条件判断</strong>，就可以使用 <strong>if 的嵌套</strong></li>
<li><strong>if 的嵌套</strong> 的应用场景就是：<strong>在之前条件满足的前提下，再增加额外的判断</strong></li>
<li><strong>if 的嵌套</strong> 的语法格式，<strong>除了缩进之外</strong> 和之前的没有区别</li>
<li>语法格式如下：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件 <span class="number">1</span>:</span><br><span class="line">    条件 <span class="number">1</span> 满足执行的代码</span><br><span class="line">    ……</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> 条件 <span class="number">1</span> 基础上的条件 <span class="number">2</span>:</span><br><span class="line">        条件 <span class="number">2</span> 满足时，执行的代码</span><br><span class="line">        ……    </span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 条件 2 不满足的处理</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        条件 <span class="number">2</span> 不满足时，执行的代码</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 条件 1 不满足的处理</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    条件<span class="number">1</span> 不满足时，执行的代码</span><br><span class="line">    ……</span><br></pre></td></tr></table></figure>

<h4 id="if-的嵌套-演练-——-火车站安检"><a href="#if-的嵌套-演练-——-火车站安检" class="headerlink" title="if 的嵌套 演练 —— 火车站安检"></a>if 的嵌套 演练 —— 火车站安检</h4><p><strong>需求</strong></p>
<ol>
<li>定义布尔型变量 <code>has_ticket</code> 表示是否有车票</li>
<li>定义整型变量 <code>knife_length</code> 表示刀的长度，单位：厘米</li>
<li>首先检查是否有车票，如果有，才允许进行 <strong>安检</strong></li>
<li>安检时，需要检查刀的长度，判断是否超过 20 厘米<ul>
<li>如果超过 20 厘米，提示刀的长度，不允许上车</li>
<li>如果不超过 20 厘米，安检通过</li>
</ul>
</li>
<li>如果没有车票，不允许进门</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义布尔型变量 has_ticket 表示是否有车票</span></span><br><span class="line">has_ticket = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义整数型变量 knife_length 表示刀的长度，单位：厘米</span></span><br><span class="line">knife_length = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先检查是否有车票，如果有，才允许进行 安检</span></span><br><span class="line"><span class="keyword">if</span> has_ticket:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;有车票，可以开始安检...&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 安检时，需要检查刀的长度，判断是否超过 20 厘米</span></span><br><span class="line">    <span class="comment"># 如果超过 20 厘米，提示刀的长度，不允许上车</span></span><br><span class="line">    <span class="keyword">if</span> knife_length &gt;= <span class="number">20</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;不允许携带 %d 厘米长的刀上车&quot;</span> % knife_length)</span><br><span class="line">    <span class="comment"># 如果不超过 20 厘米，安检通过</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;安检通过，祝您旅途愉快……&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果没有车票，不允许进门</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;大哥，您要先买票啊&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="05-综合应用-——-石头剪刀布"><a href="#05-综合应用-——-石头剪刀布" class="headerlink" title="05. 综合应用 —— 石头剪刀布"></a>05. 综合应用 —— 石头剪刀布</h2><p><strong>目标</strong></p>
<ol>
<li>强化 <strong>多个条件</strong> 的 <strong>逻辑运算</strong></li>
<li>体会 <code>import</code> 导入模块（“工具包”）的使用</li>
</ol>
<p><strong>需求</strong></p>
<ol>
<li>从控制台输入要出的拳 —— 石头（1）／剪刀（2）／布（3）</li>
<li>电脑 <strong>随机</strong> 出拳 —— 先假定电脑只会出石头，完成整体代码功能</li>
<li>比较胜负</li>
</ol>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">规则</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">石头 胜 剪刀</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">剪刀 胜 布</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">布 胜 石头</td>
</tr>
</tbody></table>
<h3 id="5-1-基础代码实现"><a href="#5-1-基础代码实现" class="headerlink" title="5.1 基础代码实现"></a>5.1 基础代码实现</h3><ul>
<li>先 <strong>假定电脑就只会出石头</strong>，完成整体代码功能</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从控制台输入要出的拳 —— 石头（1）／剪刀（2）／布（3）</span></span><br><span class="line">player = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请出拳 石头（1）／剪刀（2）／布（3）：&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 电脑 随机 出拳 - 假定电脑永远出石头</span></span><br><span class="line">computer = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较胜负</span></span><br><span class="line"><span class="comment"># 如果条件判断的内容太长，可以在最外侧的条件增加一对大括号</span></span><br><span class="line"><span class="keyword">if</span> (player == <span class="number">1</span> <span class="keyword">and</span> computer == <span class="number">2</span>) <span class="keyword">or</span> (player == <span class="number">2</span> <span class="keyword">and</span> computer == <span class="number">3</span>) <span class="keyword">or</span> (player == <span class="number">3</span> <span class="keyword">and</span> computer == <span class="number">1</span>):</span><br><span class="line"><span class="comment"># 再在每一个条件之间，使用回车，PyCharm 可以自动增加 8 个空格</span></span><br><span class="line"><span class="keyword">if</span> ((player == <span class="number">1</span> <span class="keyword">and</span> computer == <span class="number">2</span>) <span class="keyword">or</span></span><br><span class="line">        (player == <span class="number">2</span> <span class="keyword">and</span> computer == <span class="number">3</span>) <span class="keyword">or</span></span><br><span class="line">        (player == <span class="number">3</span> <span class="keyword">and</span> computer == <span class="number">1</span>)):</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;噢耶！！！电脑弱爆了！！！&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> player == computer:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;心有灵犀，再来一盘！&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;不行，我要和你决战到天亮！&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5-2-随机数的处理"><a href="#5-2-随机数的处理" class="headerlink" title="5.2 随机数的处理"></a>5.2 随机数的处理</h3><ul>
<li>在 <code>Python</code> 中，要使用随机数，首先需要导入 <strong>随机数</strong> 的 <strong>模块</strong> —— “工具包”</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure>

<ul>
<li><p>导入模块后，可以直接在 <strong>模块名称</strong> 后面敲一个 <code>.</code> 然后按 <code>Tab</code> 键，会提示该模块中包含的所有函数</p>
</li>
<li><p><code>random.randint(a, b)</code> ，返回 <code>[a, b]</code> 之间的整数，包含 <code>a</code> 和 <code>b</code></p>
</li>
<li><p>例如：</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">random.randint(<span class="number">12</span>, <span class="number">20</span>)  <span class="comment"># 生成的随机数n: 12 &lt;= n &lt;= 20   </span></span><br><span class="line">random.randint(<span class="number">20</span>, <span class="number">20</span>)  <span class="comment"># 结果永远是 20   </span></span><br><span class="line">random.randint(<span class="number">20</span>, <span class="number">10</span>)  <span class="comment"># 该语句是错误的，下限必须小于上限</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python面对过程学习</category>
      </categories>
      <tags>
        <tag>python学习</tag>
      </tags>
  </entry>
  <entry>
    <title>python</title>
    <url>/2023/03/03/%E6%BA%90%E7%A0%81/python%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<p><a href="https://gitee.com/lichaikui/dong">python源码</a></p>
<p>士兵突击源码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">row = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> row &lt;= <span class="number">3</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Gun</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, model</span>):</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 枪的型号</span></span><br><span class="line">            self.model = model</span><br><span class="line">            <span class="comment"># 子弹数量</span></span><br><span class="line">            self.bullet_count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">add_bullet</span>(<span class="params">self, count</span>):</span><br><span class="line">            self.bullet_count += count</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">shoot</span>(<span class="params">self, MS</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            @param MS: 单发：1 连发：任意数字</span></span><br><span class="line"><span class="string">            @return:</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span></span><br><span class="line">            <span class="comment"># 判断子弹数量</span></span><br><span class="line">            <span class="keyword">if</span> self.bullet_count &lt;= <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[%s] 滴~滴滴~  \n&quot;</span></span><br><span class="line">                      <span class="string">&quot;子弹剩余【0】 哔~&quot;</span> %</span><br><span class="line">                      self.model)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 发射子弹</span></span><br><span class="line">            <span class="keyword">if</span> MS == <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;【点射模式】&quot;</span>)</span><br><span class="line">                self.bullet_count -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 提示发射信息</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[%s]哒........\n              &quot;</span></span><br><span class="line">                      <span class="string">&quot;剩余子弹[%d]&quot;</span> %</span><br><span class="line">                      (self.model,</span><br><span class="line">                       self.bullet_count))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;【连发模式】&quot;</span>)</span><br><span class="line">                fire = random.randint(<span class="number">3</span>, <span class="number">100</span>)</span><br><span class="line">                self.bullet_count -= fire</span><br><span class="line">                <span class="comment"># 提示发射信息</span></span><br><span class="line">                <span class="keyword">if</span> fire == <span class="number">100</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;你打出了%d 颗子弹 超频发射&quot;</span> % fire)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[%s]哒.哒哒..哒哒哒.....\n              &quot;</span></span><br><span class="line">                      <span class="string">&quot;你打出了%d 颗子弹 剩余子弹[%d]&quot;</span> %</span><br><span class="line">                      (self.model,</span><br><span class="line">                       self.bullet_count,</span><br><span class="line">                       fire))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Soldier</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 跳转工具</span></span><br><span class="line">            self.ha = <span class="literal">None</span></span><br><span class="line">            self.ze = <span class="literal">None</span></span><br><span class="line">            <span class="comment"># 姓名</span></span><br><span class="line">            self.name = name</span><br><span class="line">            <span class="comment"># 枪</span></span><br><span class="line">            self.gun = <span class="literal">None</span>  <span class="comment"># None 因为新兵没有枪  ### 给对象增加属性</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;祝你 “游戏愉快” &quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">pong</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">import</span> random</span><br><span class="line"><span class="comment"># 判断是否有枪</span></span><br><span class="line">            <span class="comment"># 可以开发一下杀死敌人 捡到 不同的枪</span></span><br><span class="line">            <span class="keyword">if</span> self.gun <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[%s]还没有枪&quot;</span> % self.name)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;撤离&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否有敌人</span></span><br><span class="line">            <span class="keyword">if</span> di == <span class="string">&quot;n&quot;</span>:</span><br><span class="line">                d = random.randint(<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line">                <span class="keyword">if</span> d &lt;= <span class="number">3</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;【由于你的失误/大意，你被埋伏的的人杀死】&quot;</span>)</span><br><span class="line">                    self.ha = <span class="number">5</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">                qianjin = random.randint(<span class="number">200</span>, <span class="number">900</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;继续前进%d 米，你发现了异常&quot;</span> % qianjin)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">if</span> di == <span class="string">&quot;y&quot;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot; %s 锁定敌人.........&quot;</span> % self.name)</span><br><span class="line"><span class="comment"># 装填子弹</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;%d 剩余子弹&quot;</span> % self.gun.bullet_count)</span><br><span class="line">                danyao = <span class="built_in">input</span>(<span class="string">&quot;是否装填弹药,（y） (n):&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> danyao == <span class="string">&quot;y&quot;</span>:</span><br><span class="line">                    self.gun.bullet_count = <span class="number">100</span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;剩余子弹 %d&quot;</span> % self.gun.bullet_count)</span><br><span class="line">                <span class="keyword">elif</span> danyao == <span class="string">&quot;n&quot;</span>:</span><br><span class="line">                    kanming = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">while</span> kanming:</span><br><span class="line">                        <span class="keyword">import</span> random</span><br><span class="line">                        yunqi = <span class="number">1</span>          <span class="comment">###########random.randint(1, 2)</span></span><br><span class="line">                        <span class="keyword">if</span> yunqi == <span class="number">1</span>:</span><br><span class="line">                            <span class="built_in">print</span>(<span class="string">&quot;你很幸运，一段时间内，敌人没有发现你&quot;</span>)</span><br><span class="line">                            keyi = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;继续等待？（1） 退出游戏（2） 装填弹药（3）？：&quot;</span>))</span><br><span class="line">                            <span class="keyword">if</span> keyi == <span class="number">1</span>:</span><br><span class="line">                                b = random.randint(<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line">                                <span class="keyword">if</span> b &lt;= <span class="number">2</span>:</span><br><span class="line">                                    <span class="built_in">print</span>(<span class="string">&quot;怎么回事&quot;</span>)</span><br><span class="line">                                    <span class="built_in">print</span>(<span class="string">&quot;敌人往你的方向看了一眼\n&quot;</span></span><br><span class="line">                                          <span class="string">&quot;虚惊一场，敌人没有发现你&quot;</span>)</span><br><span class="line">                                <span class="keyword">else</span>:</span><br><span class="line">                                    <span class="built_in">print</span>(<span class="string">&quot;很不幸，你被敌人发现&quot;</span>)</span><br><span class="line">                                    c = random.randint(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">                                    <span class="keyword">if</span> c == <span class="number">1</span>:</span><br><span class="line">                                        <span class="built_in">print</span>(<span class="string">&quot;你被一枪爆头&quot;</span>)</span><br><span class="line">                                    <span class="keyword">if</span> c == <span class="number">2</span>:</span><br><span class="line">                                        <span class="built_in">print</span>(<span class="string">&quot;你被打成筛子&quot;</span>)</span><br><span class="line">                                    self.ha = <span class="number">5</span></span><br><span class="line">                                    <span class="keyword">return</span> self.ha</span><br><span class="line">                            <span class="keyword">elif</span> keyi == <span class="number">2</span>:</span><br><span class="line">                                <span class="built_in">print</span>(<span class="string">&quot;你退出了游戏&quot;</span>)</span><br><span class="line">                                self.ha = <span class="number">5</span></span><br><span class="line">                                <span class="keyword">return</span> self.ha</span><br><span class="line">                            <span class="keyword">elif</span> keyi == <span class="number">3</span>:</span><br><span class="line">                                self.gun.bullet_count = <span class="number">100</span></span><br><span class="line">                                <span class="built_in">print</span>(<span class="string">&quot;剩余子弹 %d&quot;</span> % self.gun.bullet_count)</span><br><span class="line">                                <span class="built_in">print</span>(<span class="string">&quot;准备开火&quot;</span>)</span><br><span class="line">                                self.gun.shoot(<span class="built_in">input</span>(<span class="string">&quot;选择射击模式【单发：1 连发：任意数字】：&quot;</span>))</span><br><span class="line">                                a = random.randint(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">                                <span class="keyword">if</span> a &gt;= <span class="number">3</span>:</span><br><span class="line">                                    <span class="built_in">print</span>(<span class="string">&quot;你杀死了敌人,奖励子弹一百（已装弹）&quot;</span>)</span><br><span class="line">                                    self.gun.bullet_count = <span class="number">100</span></span><br><span class="line">                                    qianijn = random.randint(<span class="number">200</span>, <span class="number">900</span>)</span><br><span class="line">                                    <span class="built_in">print</span>(<span class="string">&quot;继续前进%d 米，你发现了异常&quot;</span> % qianijn)</span><br><span class="line">                                    <span class="keyword">return</span></span><br><span class="line">                                <span class="keyword">else</span>:</span><br><span class="line">                                    <span class="built_in">print</span>(<span class="string">&quot;敌人发现了你,你被反杀&quot;</span>)</span><br><span class="line">                                    self.ha = <span class="number">5</span></span><br><span class="line">                                kanming = <span class="literal">False</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="built_in">print</span>(<span class="string">&quot;敌人发现了你&quot;</span>)</span><br><span class="line">                            <span class="built_in">print</span>(<span class="string">&quot;你被杀 Game over&quot;</span>)</span><br><span class="line">                            self.ha = <span class="number">5</span></span><br><span class="line">                            kanming = <span class="literal">False</span></span><br><span class="line">                    <span class="keyword">return</span> self.ha</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发射子弹</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;准备开火&quot;</span>)</span><br><span class="line"></span><br><span class="line">                self.gun.shoot(<span class="built_in">input</span>(<span class="string">&quot;选择射击模式【单发：1 连发：任意数字】：&quot;</span>))</span><br><span class="line">                a = random.randint(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">                <span class="keyword">if</span> a &gt;= <span class="number">3</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;你杀死了敌人,奖励子弹一百（已装弹）&quot;</span>)</span><br><span class="line">                    self.gun.bullet_count = <span class="number">100</span></span><br><span class="line">                    qianijn = random.randint(<span class="number">200</span>, <span class="number">900</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;继续前进%d 米，你发现了异常&quot;</span> % qianijn)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;敌人发现了你,你被反杀&quot;</span>)</span><br><span class="line">                    self.ha = <span class="number">5</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;【由于你的失误/大意，你被埋伏的的人杀死】&quot;</span>)</span><br><span class="line">                self.ha = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建 枪 对象</span></span><br><span class="line">    ak47 = Gun(<span class="string">&quot;AK-47&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建士兵</span></span><br><span class="line">    pishiduo = Soldier(<span class="string">&quot;屁事多&quot;</span>)</span><br><span class="line">    pishiduo.gun = ak47</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 场景需要</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;第【%s】关&quot;</span> % row)</span><br><span class="line"></span><br><span class="line">    di = <span class="built_in">input</span>(<span class="string">&quot;对讲机：【小兵】，小心埋伏，小心埋伏，over&quot;</span></span><br><span class="line">               <span class="string">&quot;\n请观察前方是否有敌人 有（y） 没有(n):&quot;</span>)</span><br><span class="line"></span><br><span class="line">    pishiduo.pong()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> pishiduo.ha == <span class="number">5</span>:</span><br><span class="line">        row = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关卡</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;~~~~~~~~~~~~~~&quot;</span>*<span class="number">50</span>)</span><br><span class="line">    row += <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> row == <span class="number">4</span>:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;对讲机： 支援已到达，可以撤退 over&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;恭喜你，【大兵】，你通关了&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;~&quot;</span>*<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; Game over&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; 游戏愉快&quot;</span>)</span><br><span class="line"><span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>源码</category>
      </categories>
  </entry>
  <entry>
    <title>matab</title>
    <url>/2023/03/03/%E6%BA%90%E7%A0%81/matlab%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<p><a href="https://gitee.com/lichaikui/matlab">matlab源码</a></p>
]]></content>
      <categories>
        <category>源码</category>
      </categories>
  </entry>
  <entry>
    <title>Excel</title>
    <url>/2022/01/25/%E8%BD%AF%E4%BB%B6/Excel/</url>
    <content><![CDATA[<h2 id="一、分-析-数-据-————（分析）"><a href="#一、分-析-数-据-————（分析）" class="headerlink" title="一、分 析 数 据  ————（分析）"></a>一、分 析 数 据  ————（分析）<img src="https://cdn.naixuejiaoyu.com/study/2021-11-06/hn4qxjn8qu68cxbk.gif" alt="img"></h2><p>掌握透视表-切片器-透视图，分析数据一目了然</p>
<h3 id="1-透视表"><a href="#1-透视表" class="headerlink" title="1.透视表"></a>1.透视表</h3><p><img src="https://s2.loli.net/2022/01/20/KbHyoI1BWjMntlp.png" alt="image-20220120220145131"></p>
<p><img src="https://cdn.naixuejiaoyu.com/study/2020-12-07/sbjqlo4vdz8342tf.gif" alt="img"></p>
<h3 id="2-切片器"><a href="#2-切片器" class="headerlink" title="2.切片器"></a>2.切片器</h3><p><img src="https://s2.loli.net/2022/01/20/AfdcqbBGZKwSJkm.png" alt="image-20220120220244788"></p>
<p><img src="https://cdn.naixuejiaoyu.com/study/2020-12-07/pqgkpwlmmj0cw4lj.png" alt="img"><img src="https://cdn.naixuejiaoyu.com/study/2020-12-07/20-2.png" alt="img"><img src="https://cdn.naixuejiaoyu.com/study/2020-12-07/j8kgt8dv11kac08n.png" alt="img"><img src="https://cdn.naixuejiaoyu.com/study/2020-12-07/tv69sn09w9nblrak.png" alt="img"></p>
<p><img src="https://cdn.naixuejiaoyu.com/study/2020-12-07/fusgqvxvn45b6tmw.png" alt="img"></p>
<h3 id="3-数据透视图"><a href="#3-数据透视图" class="headerlink" title="3.数据透视图"></a>3.数据透视图<img src="https://cdn.naixuejiaoyu.com/study/2020-12-07/q4r3vpw0wi98ji32.png" alt="img"></h3><p><img src="https://cdn.naixuejiaoyu.com/study/2020-12-07/5wzjbj4bhkve4csz.png" alt="img"><img src="https://cdn.naixuejiaoyu.com/study/2020-12-07/9i42f511x9uddl5o.png" alt="img"><img src="https://cdn.naixuejiaoyu.com/study/2020-12-07/njzt5mph1a4phpch.png" alt="img"></p>
<h2 id="二、多条件求和-——（统计）"><a href="#二、多条件求和-——（统计）" class="headerlink" title="二、多条件求和  ——（统计）"></a>二、多条件求和  ——（统计）<img src="https://cdn.naixuejiaoyu.com/study/2021-11-06/36olksj54ws9qe9f.gif" alt="img"></h2><p>利用函数实现多条件求和，维度再多也不用愁</p>
<h3 id="1-SUM"><a href="#1-SUM" class="headerlink" title="1.SUM"></a>1.SUM<img src="https://s2.loli.net/2022/01/20/vXfUx1HZ4DcYJp5.png" alt="image-20220120214947106"></h3><p><img src="https://cdn.naixuejiaoyu.com/study/2021-11-06/531i3bxygn6ov8nc.gif" alt="img"></p>
<h3 id="2-SUMIF"><a href="#2-SUMIF" class="headerlink" title="2.SUMIF"></a>2.SUMIF</h3><p><img src="https://s2.loli.net/2022/01/20/XbRt5ANDuTCjELz.png" alt="image-20220120215257717"></p>
<p><img src="https://cdn.naixuejiaoyu.com/study/2021-11-06/0s8sw43grdvv1buy.gif" alt="image-20220120215204061"></p>
<h3 id="3-SUMIFS"><a href="#3-SUMIFS" class="headerlink" title="3.SUMIFS"></a>3.SUMIFS</h3><p><img src="https://s2.loli.net/2022/01/20/L3g5iJkqTsoBYMm.png" alt="image-20220120215737014"></p>
<p><img src="https://cdn.naixuejiaoyu.com/study/2021-11-06/vw6cougjpjb301dc.gif" alt="SUMIFS"></p>
<h2 id="三、数据查询系统——（查找）"><a href="#三、数据查询系统——（查找）" class="headerlink" title="三、数据查询系统——（查找）"></a>三、数据查询系统——（查找）<img src="https://cdn.naixuejiaoyu.com/study/2021-11-06/wj4ogxs1gizwco48.gif" alt="img"></h2><p>通过VLOOKUP、数据验证、多表查询，构建了一个轻型数据查询系统</p>
<p><img src="https://cdn.naixuejiaoyu.com/study/2021-11-06/ptw70em59c62fj2m.png" alt="img"></p>
<h3 id="1-VLOOKUP"><a href="#1-VLOOKUP" class="headerlink" title="1.VLOOKUP"></a>1.VLOOKUP</h3><p><img src="https://s2.loli.net/2022/01/20/5kQXq9ewd7OUKFM.png" alt="image-20220120230345471.png"></p>
<h6 id="01-图形键入"><a href="#01-图形键入" class="headerlink" title="01.图形键入"></a>01.图形键入</h6><blockquote>
<p><img src="https://cdn.naixuejiaoyu.com/study/2021-11-06/vhsnthl7j65w1m1q.png" alt="img"><img src="https://cdn.naixuejiaoyu.com/study/2021-11-06/4ys3ptwc6ckbl4lv.png" alt="img"><img src="https://cdn.naixuejiaoyu.com/study/2021-11-06/jw4d38y9k48fpof7.png" alt="img"><img src="https://s2.loli.net/2022/01/20/BcSJZDsG1Rd9Q5t.png" alt="image-20220120221856362.png"></p>
<p><img src="https://cdn.naixuejiaoyu.com/study/2021-11-06/r34usfjzydf19g4x.gif" alt="img"></p>
</blockquote>
<p><img src="https://s2.loli.net/2022/01/20/lZoPHpsg7hQVnf2.png" alt="image-20220120222455467.png"></p>
<p><img src="https://s2.loli.net/2022/01/20/nmqYfjk97aN4J8O.png" alt="image-20220120224717938.png"></p>
<h6 id="02-公式键入："><a href="#02-公式键入：" class="headerlink" title="02.公式键入："></a>02.公式键入：</h6><blockquote>
<p><img src="https://cdn.naixuejiaoyu.com/study/2021-11-06/88ykvjh6rzte6ptd.gif" alt="img"></p>
</blockquote>
<h3 id="2-数据验证"><a href="#2-数据验证" class="headerlink" title="2.数据验证"></a>2.数据验证</h3><p><img src="https://cdn.naixuejiaoyu.com/study/2021-11-06/o1syb0rqbiladyjr.png" alt="img"></p>
<h6 id="01-将-“吴儿”-位置-变成下拉菜单状态"><a href="#01-将-“吴儿”-位置-变成下拉菜单状态" class="headerlink" title="01.将 “吴儿” 位置 变成下拉菜单状态"></a>01.将 “吴儿” 位置 变成下拉菜单状态</h6><p><img src="https://cdn.naixuejiaoyu.com/study/2021-11-06/66gbrrm46q55rwdu.png" alt="img"></p>
<h6 id="02-将-“吴儿”-改成-B3-名称所在位置"><a href="#02-将-“吴儿”-改成-B3-名称所在位置" class="headerlink" title="02.将  “吴儿” 改成  B3( 名称所在位置)"></a>02.将  “吴儿” 改成  B3( 名称所在位置)</h6><p><img src="https://s2.loli.net/2022/01/20/iX9AflWzPcCeuI4.png" alt="image-20220120231127098.png"></p>
]]></content>
      <tags>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>Ros</title>
    <url>/2022/01/26/%E8%BD%AF%E4%BB%B6/Ros/</url>
    <content><![CDATA[<h1 id="ROS的安装"><a href="#ROS的安装" class="headerlink" title="ROS的安装"></a>ROS的安装</h1><p>1.ubuntu18.04  安装ros melodic</p>
<p>2.ubuntu16  安装ros kinetic</p>
<ul>
<li>rosdep 不成功 可跳过</li>
</ul>
<p><a href="https://www.bilibili.com/video/BV1Ci4y1L7ZZ/">ros学习教程地址</a><img src="https://s2.loli.net/2022/01/24/oBNb1VaCRxhgvnE.png" alt="image-20220124213358659"></p>
<h1 id="ROS-功能"><a href="#ROS-功能" class="headerlink" title="ROS 功能"></a>ROS 功能</h1><h3 id="1-roscove节点式通信"><a href="#1-roscove节点式通信" class="headerlink" title="1.roscove节点式通信"></a>1.roscove节点式通信</h3><ul>
<li>topic（通话）通信：</li>
</ul>
<p>​				单向  可连续发送</p>
<ul>
<li><p>service（服务）通信：</p>
<p> 只有一次通信后 才可以建立通信通道</p>
</li>
</ul>
<p><img src="https://s2.loli.net/2022/01/24/RscgOPkZ5hUqYre.png" alt="image-20220124210343443.png"></p>
<p>模板 大概</p>
<ul>
<li><p>ros功能包：</p>
<p><img src="https://s2.loli.net/2022/01/24/3PfcIu2DLWCKd5h.png" alt="image-20220124210431270">	</p>
<ul>
<li>build 产生的可执行文件</li>
<li>devel 头文件、依赖的包</li>
<li>src 源文件</li>
</ul>
</li>
</ul>
<blockquote>
<p>用到了         回调函数<img src="https://s2.loli.net/2022/01/24/HRSywPmNupcdUEa.png" alt="image-20220124211509030.png"></p>
<p><img src="https://s2.loli.net/2022/01/24/N6tQ1zoTYdCH4ZD.png" alt="image-20220124210834225.png"></p>
</blockquote>
<ul>
<li><p><img src="https://s2.loli.net/2022/01/24/vMixcuUFY75I9Wq.png" alt="image-20220124210550748"></p>
<p>include——头文件				</p>
<p>src——源码      </p>
<p>CMakelists.txt——加载编译文件源码把药变异的内容交给编译器    </p>
<p>package.xml——ros功能包相关内容</p>
</li>
</ul>
<h3 id="2-物理仿生环境gazabo（可以想象成一个节点）"><a href="#2-物理仿生环境gazabo（可以想象成一个节点）" class="headerlink" title="2.物理仿生环境gazabo（可以想象成一个节点）"></a>2.物理仿生环境gazabo（可以想象成一个节点）</h3><p>​			模拟现实环境</p>
<h3 id="3-Rivice"><a href="#3-Rivice" class="headerlink" title="3.Rivice"></a>3.Rivice<img src="https://s2.loli.net/2022/01/24/FMzKlZNi8eCP4c3.png" alt="image-20220124205422280"></h3><p>根据需要开发可视化界面</p>
<h3 id="4-rqt工具箱"><a href="#4-rqt工具箱" class="headerlink" title="4.rqt工具箱"></a>4.rqt工具箱</h3><p><img src="https://s2.loli.net/2022/01/24/QR1e23P4ZDBsyvC.png" alt="image-20220124210135175"></p>
<h3 id="5-收发模板"><a href="#5-收发模板" class="headerlink" title="5.收发模板"></a>5.收发模板</h3><p>北大模板生成   包&#x2F;项目   —–用 <code>类</code> 的方法 实现  多个节点同时工作  （多收多发）</p>
]]></content>
      <categories>
        <category>Ros</category>
      </categories>
      <tags>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>pycharm安装及配置</title>
    <url>/2022/01/10/%E8%BD%AF%E4%BB%B6/pycharm%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>有两个版本：  professional专业版     Community 社区版</p>
<h2 id="ubuntu安装pycharm专业版"><a href="#ubuntu安装pycharm专业版" class="headerlink" title="ubuntu安装pycharm专业版"></a>ubuntu安装pycharm专业版</h2><h5 id="1-下载安装"><a href="#1-下载安装" class="headerlink" title="1.下载安装"></a>1.下载安装</h5><p>在官网下载安装包<a href="https://www.jetbrains.com/pycharm/download/#section=linux">https://www.jetbrains.com/pycharm/download/#section=linux</a></p>
<p>解压安装包</p>
<p><code>tar -zxvf pycharm-professional-2020.1.tar.gz</code> </p>
<p>新建目录 安放解压文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mkdir /opt/pycharm</span><br><span class="line">sudo mv pycharm-2020.1/ /opt/pycharm/</span><br><span class="line">cd /opt/pycharm/</span><br><span class="line">ls</span><br></pre></td></tr></table></figure>

<p>​		&#x2F;opt ：给主机额外安装软件所摆放的目录</p>
<p>​		显示</p>
<p>​			<img src="https://gitee.com/lichaikui/picture/raw/master/tupian/image-20211201120209272.png" alt="image-20211201120209272" style="zoom:50%;" /></p>
<p>​		则安装完毕</p>
<h5 id="2-启动和配置-Pycharm"><a href="#2-启动和配置-Pycharm" class="headerlink" title="2.启动和配置 Pycharm"></a>2.启动和配置 Pycharm</h5><h6 id="1）-启动Pycharm"><a href="#1）-启动Pycharm" class="headerlink" title="1）.启动Pycharm"></a>1）.启动Pycharm</h6><p><code>sh /opt/pycharm/pycharm-2020.1/bin/pycharm.sh</code></p>
<h6 id="2-稍后会弹出一个窗口，选择同意，然后Continue"><a href="#2-稍后会弹出一个窗口，选择同意，然后Continue" class="headerlink" title="2).稍后会弹出一个窗口，选择同意，然后Continue"></a>2).稍后会弹出一个窗口，选择同意，然后Continue</h6><p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/image-20211201120413238.png" alt="image-20211201120413238"></p>
<h6 id="3-、激活pycharm"><a href="#3-、激活pycharm" class="headerlink" title="3)、激活pycharm"></a>3)、激活pycharm</h6><p>​		选择中间的Activation code</p>
<pre><code>     将激活码粘进去，确定就好了
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">链接：https://pan.baidu.com/s/16kgyipATPndapfyCtCuOfg </span><br><span class="line">提取码：0000 </span><br><span class="line">--来自百度网盘超级会员V1的分享</span><br></pre></td></tr></table></figure>

<h6 id="4-选择可用命令行启动Pycharm"><a href="#4-选择可用命令行启动Pycharm" class="headerlink" title="4).选择可用命令行启动Pycharm"></a>4).选择可用命令行启动Pycharm</h6><p>也就是以后可以在终端中直接输入<code>pycharm</code>，回车后就启动 Pycharm</p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/4c8kcyeak6.jpeg" alt="4c8kcyeak6"></p>
<blockquote>
<p>5).可选择安装一些插件</p>
<p>这个看个人需要，我就没有选择；如果以后需要，也可以在IDE中安装的</p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/nni5dgndkt.jpeg" alt="nni5dgndkt"></p>
</blockquote>
<h6 id="6-我们先不用着急进入，可以在这里设置桌面图标，这方便我们打开Pycharm，比命令行好使"><a href="#6-我们先不用着急进入，可以在这里设置桌面图标，这方便我们打开Pycharm，比命令行好使" class="headerlink" title="6).我们先不用着急进入，可以在这里设置桌面图标，这方便我们打开Pycharm，比命令行好使"></a>6).我们先不用着急进入，可以在这里设置桌面图标，这方便我们打开Pycharm，比命令行好使</h6><p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/9699xy7hls.jpeg" alt="9699xy7hls"></p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/au3kv5zc34.jpeg" alt="au3kv5zc34"></p>
<blockquote>
<p>——若错过  则</p>
<p>在桌面上创建pycharm快捷方式</p>
<p><code>sudo gedit /usr/share/applications/pycharm.desktop</code></p>
<p>复制粘贴下面文字  若路径不同自主更改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Version=1.0</span><br><span class="line">Type=Application</span><br><span class="line">Name=Pycharm</span><br><span class="line">Icon=/opt/pycharm/pycharm-2021.2.3/bin/pycharm.png</span><br><span class="line">Exec=sh /opt/pycharm/pycharm-2021.2.3/bin/pycharm.sh</span><br><span class="line">MimeType=application/x-py;</span><br><span class="line">Name[en_US]=pycharm</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="——配置-Python-环境"><a href="#——配置-Python-环境" class="headerlink" title="——配置 Python 环境"></a>——<strong>配置 Python 环境</strong></h2><p>如果现在着急打开Pycharm新建工程的话，可能会创建失败，会报错， 比如“错误提示：ModuleNotFoundError: No module named ‘distutils.util’ ”，这明显是因为没有安装一些模块。我们先来安装一些常见的东东：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">erry@jerry-virtual-machine:~/Desktop$ sudo apt install python3-pip</span><br><span class="line">jerry@jerry-virtual-machine:~/Desktop$ sudo apt-get install python3-distutils</span><br></pre></td></tr></table></figure>

<h2 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a><strong>新建工程</strong></h2><p>配置完成，界面如下</p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/2376234-20210620110859249-2019280329.png" alt="img"></p>
<h6 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1.创建项目"></a>1.创建项目</h6><p>创建 Python 项目</p>
<p>这里选择New Project</p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/2376234-20210620110911415-539828827.png" alt="img"></p>
<ol start="2">
<li>设置项目名称和选择解释器（即python.exe）</li>
</ol>
<p>如果出现 No Python interpreter selected 表示 Python 的环境变量有问题。这里我们使用自己的解释器</p>
<p>注意：这里默认使用的 Python 的虚拟环境，如果你不使用虚拟环境，一定要修改。</p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/2376234-20210620110931357-1632831058.png" alt="img"></p>
<p> 3.选择系统解释器，找到你安装的 Python 目录，点击OK</p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/2376234-20210620110941531-837535357.png" alt="img"></p>
<p> 然后点击 Create 即可</p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/2376234-20210620111033910-693057323.png" alt="img"></p>
<p>4.那么现在项目就创建成功了，去掉 Show tips on startup，不用每次都打开欢迎界面，然后关闭即可。</p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/2376234-20210620111050806-9939775.png" alt="img"></p>
<p> 5.测试运行</p>
<p>Python 文件</p>
<p>刚才我们创建项目的时候，默认勾选了Create a main.py welcome script，PyCharm默认会帮我们创建main.py文件，键盘输入Shift+F10，即可运行</p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/2376234-20210620111101414-585434817.png" alt="img"></p>
<p> 输出结果</p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/2376234-20210620111109748-573228000.png" alt="img"></p>
<h2 id="优化-Pycharm"><a href="#优化-Pycharm" class="headerlink" title="优化 Pycharm"></a><strong>优化 Pycharm</strong></h2><h6 id="1-配置字体"><a href="#1-配置字体" class="headerlink" title="1.配置字体"></a>1.配置字体</h6><p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/jn02g6t2g9.jpeg" alt="jn02g6t2g9"></p>
<h6 id="2-安装插件"><a href="#2-安装插件" class="headerlink" title="2.安装插件"></a>2.安装插件</h6><p>我们在安装 Pycharm 时，有个界面是选择要安装的插件。其实，我们可以自已来安装，打开路径是：file —  settings —  plugings</p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/b3uzh3ilpg.jpeg" alt="b3uzh3ilpg">安装插件十分简单，如安装 statistic:	</p>
<p>​	<img src="https://gitee.com/lichaikui/picture/raw/master/tupian/o6ehl4o7xu.jpeg" alt="o6ehl4o7xu" style="zoom:80%;" /></p>
<p>合适的插件，会让 Pycharm 如虎添翼。关于插件的内容，这里就不具体展开了，只是罗列一些大神推荐的插件：</p>
<p>（1）statistic： 项目统计 </p>
<p>（2）Rainbow Brackets：让代码块之间很清晰的显示出各种颜色 </p>
<p>（3）.ignore：使用git的人知道，也就是.gitignore</p>
<p><strong><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/70-163842497552167.png" alt="这里写图片描述"></strong></p>
<h2 id="汉化pycharm"><a href="#汉化pycharm" class="headerlink" title="汉化pycharm"></a>汉化pycharm</h2><h6 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h6><p>打开pycharm<br>点击 Edit—&gt;&gt;&gt;Settings<img src="https://gitee.com/lichaikui/picture/raw/master/tupian/0726871d7ae4bcd7f7cff04dffed06a5.png" alt="0726871d7ae4bcd7f7cff04dffed06a5"></p>
<p>然后点击 Plugins—&gt;&gt;&gt;Marketplace<br>找到Chinese（simplified）Language，再点击Install<br><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/a96fae32e94d98dd260953c94319cd14.png" alt="a96fae32e94d98dd260953c94319cd14"></p>
<p>系统会提示重启，我们重启即可</p>
<h6 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h6><p>如果搜不到呢，像下面这样 Nothing，found，也没有关系，我们还有第二种方法，我们手动安装<img src="https://gitee.com/lichaikui/picture/raw/master/tupian/f85ee0a86fe240822151252065612818.png" alt="f85ee0a86fe240822151252065612818"></p>
<p>去这个PyCharm官方Marketplace，经验心得，pycharm搜不到的，你来这<br>PyCharm官方Marketplace链接：<a href="https://plugins.jetbrains.com/">https://plugins.jetbrains.com/</a>.</p>
<p>这个就是PyCharm中文语言包的直达链接<br>链接: Chinese (Simplified) Language Pack &#x2F; 中文语言包.</p>
<p>点击链接直达，如果此时你的pycharm没有打开，那么我们就点击Get，然后找到与你pycharm版本对应的语言包下载即可（一定要与自己的pycharm版本一致）<img src="https://gitee.com/lichaikui/picture/raw/master/tupian/90c79ea3b9970466dce119cacf300b92-163834415729243.png" alt="90c79ea3b9970466dce119cacf300b92"></p>
<p>如果此时你pycharm正在打开，那么可能就是这样，不用你自己选择版本，会直接自动匹配与你pycharm版本一致的中文语言包</p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/e7731bee9af4e3eb14952cd944c870f0.png" alt="e7731bee9af4e3eb14952cd944c870f0"></p>
<p>我们直接暴力点击 Install 即可</p>
<h1 id="widows安装pycharm"><a href="#widows安装pycharm" class="headerlink" title="widows安装pycharm"></a>widows安装pycharm</h1><p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/feb86f41cddb277e4a38d1525ae055c.png" alt="feb86f41cddb277e4a38d1525ae055c"></p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/d8fd0dfe1a1acbad45022a9f041fa58.png" alt="d8fd0dfe1a1acbad45022a9f041fa58"></p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/70-163842497552165.png" alt="img"></p>
<p>安装成功后我们打开使用一下：</p>
<p>选择第二个</p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/70-163842497552166.png" alt="img"></p>
<h1 id="激活pycharm"><a href="#激活pycharm" class="headerlink" title="激活pycharm"></a>激活pycharm</h1><p>1.修改hosts文件：</p>
<ul>
<li><p>在系统C盘中找到   <strong>hosts文件</strong>  </p>
</li>
<li><p>一般   windwos系统hosts文件 路径为：<strong>C:\Windows\System32\drivers\etc</strong></p>
</li>
<li><p>将hosts文件   <strong>复制   到另一个地方</strong>， 不要直接修改    添加下面一行到hosts文件，目的是屏蔽掉Pycharm对激活码的验证：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0.0.0.0 account. jetbrains. com</span><br></pre></td></tr></table></figure></li>
</ul>
<p>​			    将这一行<strong>复制到该文件的最下面一行</strong>即可，保存，然后将修改后的文件复				制粘贴<strong>替换原hosts文件</strong>。 覆盖原来的即可</p>
<ul>
<li><p>打开PyCharm，选择 Activate code（用激活码激活）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">链接：https://pan.baidu.com/s/16kgyipATPndapfyCtCuOfg </span><br><span class="line">提取码：0000 </span><br><span class="line">--来自百度网盘超级会员V1的分享</span><br></pre></td></tr></table></figure>
</li>
<li><p>在复制下载激活码，填入激活码框 点击 OK 进行认证</p>
</li>
</ul>
<p>2.看下一篇</p>
]]></content>
      <categories>
        <category>pycharm</category>
      </categories>
      <tags>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>pycharm激活及使用</title>
    <url>/2022/01/10/%E8%BD%AF%E4%BB%B6/pycharm%E6%BF%80%E6%B4%BB%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="pycharm修改hosts文件"><a href="#pycharm修改hosts文件" class="headerlink" title="pycharm修改hosts文件"></a><a href="https://www.cnblogs.com/wanglinjie/p/9112947.html">pycharm修改hosts文件</a></h1><p>为了让pycharm所属的公司不那么容易验证你的jetbrains账户</p>
<ul>
<li><strong>pycharm及安装激活文档</strong></li>
</ul>
<p><strong>链接: <a href="https://pan.baidu.com/s/1eseogsifJ-xQPfbDrqbOOQ">https://pan.baidu.com/s/1eseogsifJ-xQPfbDrqbOOQ</a> 密码: 3a76</strong></p>
<ul>
<li><strong>在Ubuntu下，1.sudo gedit &#x2F;etc&#x2F;hosts</strong></li>
</ul>
<p><strong>2.最后一行</strong>添加 <strong>0.0.0.0 account.jetbrains.com</strong> </p>
<p><strong>3.从</strong> <strong><a href="http://idea.lanyus.com/">http://idea.lanyus.com/</a></strong> 中获取激活码</p>
<ul>
<li><strong>sublime</strong></li>
</ul>
<p><strong>链接: <a href="https://pan.baidu.com/s/1eseogsifJ-xQPfbDrqbOOQ">https://pan.baidu.com/s/1eseogsifJ-xQPfbDrqbOOQ</a> 密码: 3a76</strong></p>
<p><a href="https://blog.csdn.net/weixin_41085315/article/details/79917280">(1条消息) pycharm 修改hosts 文件依然需要激活码_庞各庄学霸的博客-CSDN博客_pycharm修改hosts文件</a></p>
<hr>
<h1 id="方法一：（没成功过）"><a href="#方法一：（没成功过）" class="headerlink" title="方法一：（没成功过）"></a>方法一：（没成功过）</h1><ul>
<li>修改完配置文件之后重启pycharm，点击菜单栏中的 “Help” -&gt; “Register …”，选择最后一种<strong>License server</strong>激活方式，地址填入：<code>http://jetbrains-license-server</code> （应该会自动填上），或者点击按钮：”Discover Server”来自动填充地址，完成激活</li>
</ul>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/20211219143433.png"></p>
<hr>
<h1 id="方法二：-重置体验"><a href="#方法二：-重置体验" class="headerlink" title="方法二：[重置体验]"></a>方法二：[重置体验]</h1><h2 id="PyCharm2021-2-3专业版破解"><a href="#PyCharm2021-2-3专业版破解" class="headerlink" title="PyCharm2021.2.3专业版破解"></a>PyCharm2021.2.3专业版破解</h2><ul>
<li>如果服务器激活方式无法激活，还可以选择<strong>Activation code</strong>方式激活</li>
</ul>
<p>​					<img src="https://gitee.com/lichaikui/picture/raw/master/tupian/20211219143456.png"></p>
<ul>
<li><p>那么问题来了，激活码有时间限制，如何搞一个破解版</p>
<p>这里，我推荐给大家一种最靠谱的pycharm破解方案：<strong>激活码</strong>+<strong>无限重置插件</strong>。为啥是最靠谱的呢？如果激活码失效，那么无限重置插件便会每天会自动重置试用时间30天，是不是特别爽！</p>
<p>关于激活码，大家可以通过下方链接去领取：<a href="http://idea.javatiku.cn/">领取免费pycharm注册码</a></p>
<p>接下来，咱们主要说说这个无限重置插件的厉害之处。</p>
<p>咱们都知道，Pycharm有一个很良心的地方，就是它<strong>允许你试用30天</strong>（你如果去反编译源码，就会发现这个数字是写死在代码里的），以此来评估你是否真的需要Pycharm这款工具。</p>
<p>因此，便有这么一款插件，可以让你<strong>无限免费试用</strong>下去。</p>
</li>
</ul>
<h3 id="教程演示"><a href="#教程演示" class="headerlink" title="教程演示"></a>教程演示</h3><p>本文我主要使用windows系统来演示，同样该教程也适用于其它系统，如果你使用的其它系统也可以进行参考。</p>
<blockquote>
<h3 id="重要提示"><a href="#重要提示" class="headerlink" title="重要提示"></a>重要提示</h3><p>情况1.如果你是刚刚下载的 Pycharm 或者 之前的正版激活码失效了，那么直接点击 <strong>试用</strong> 即可！</p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/20211219143526.png"></p>
<p>情况2.如果你的Pycharm已经过了30天试用期，一般情况下会打不开。这时，你可以通过 <strong>重装软件</strong> 这个万能的方法来解决这个问题，但这种方案会影响其它配置；或者你可以使用 <strong>重置脚本</strong> 进行重置，它的原理是删除Pycharm试用的相关目录（其他配置不受影响）。</p>
<p>这个重置脚本，已经在上方下载的文件压缩包里为大家准备好了。</p>
<p><img src="http://img.javatiku.cn/zd/20210425175040.png" alt="Pycharm重置脚本"></p>
<p>大家也可以直接去看相应的源码，很安全！如下图所示：</p>
<p><img src="http://img.javatiku.cn/zd/20210425175145.png" alt="Pycharm重置脚本源码"></p>
</blockquote>
<h4 id="1-安装Pycharm补丁"><a href="#1-安装Pycharm补丁" class="headerlink" title="1.安装Pycharm补丁"></a>1.安装Pycharm补丁</h4><ul>
<li><p>链接：<a href="https://pan.baidu.com/s/1Q-z0Ct69sRsIFxfIWQY-4g">https://pan.baidu.com/s/1Q-z0Ct69sRsIFxfIWQY-4g</a><br>提取码：0000<br>–来自百度网盘超级会员V1的分享</p>
</li>
<li><p>扫描下方公众号二维码，回复关键字： <strong>pycharm</strong> , 便能获取最新的网盘下载链接~</p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/20211219143555.png"></p>
</li>
</ul>
<p>​			</p>
<p>将我们的最新的 PyCharm 补丁拖拽到 PyCharm 界面中，就会自动进行安装</p>
<p>​			<strong>注意：请不要解压 ide-eval-resetter-xxx.zip 补丁包！</strong> </p>
<p>​			<img src="https://gitee.com/lichaikui/picture/raw/master/tupian/20211219143619.png"></p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/20211219143640.png"></p>
<h4 id="2-PyCharm补丁设置"><a href="#2-PyCharm补丁设置" class="headerlink" title="2.PyCharm补丁设置"></a>2.PyCharm补丁设置</h4><p>重启 PyCharm 之后，我们点击最上面工具栏的 <code>Help</code> ，再点击最下面的 <code>Eval Reset</code>，进入我们刚才安装的插件的主页面</p>
<p>​	<img src="http://img.javatiku.cn/20210725183422.png" alt="img"></p>
<p>​	<img src="https://gitee.com/lichaikui/picture/raw/master/tupian/20211219143701.png"></p>
<blockquote>
<p>这里，我需要说明一下该补丁主界面包含了那些信息，2个按钮，1个勾选项，具体说明：</p>
<p><code>Reload</code>：用来刷新界面上的显示信息。</p>
<p><code>Reset</code>：点击会询问是否重置试用30天并重启IDE。选择<code>Yes</code>则执行重置操作并重启IDE生效，选择<code>No</code>则什么也不做。（此为手动重置方式）</p>
<p><code>Auto reset before per restart</code>：如果勾选了，则自勾选后每次重启&#x2F;退出IDE时会自动重置试用信息，你无需做额外的事情。（此为自动重置方式）</p>
</blockquote>
<p>然后点击 <code>Reset</code>，会有个弹窗，我们直接点击 <code>Yes</code> 重启 PyCharm。</p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/20211219143717.png"></p>
<p>重启 PyCharm 之后，我们再次点击最上面工具栏的 <code>Help</code> 中的 <code>Register...</code>，会显示你并没有登录自己的账户，但是 PyCharm 依旧处于试用状态！</p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/20211219143731.png"></p>
<p>OK，你的 PyCharm 永久试用已经搞定了</p>
<h4 id="3-说明"><a href="#3-说明" class="headerlink" title="3.说明"></a>3.说明</h4><ul>
<li><p>1、重置30天试用期需要重启Pycharm生效！</p>
</li>
<li><p>2、如果长达25天不曾有任何重置动作，IDE会有通知询问你是否进行重置。</p>
</li>
<li><p>3、如果勾选：Auto reset before per restart ，重置是静默无感知的，无需再管，一劳永逸。</p>
</li>
<li><p>4、插件中心的所有付费插件的试用信息也会一并重置。</p>
<p><strong>请不要不要升级Pycharm!!! 因为可能导致Pycharm需要重新激活，且可能发生新版本激活不成功的情况 ！！！</strong></p>
</li>
</ul>
<blockquote>
<p>有的网友补的坑大家可以参考下:(详见评论)</p>
<p>@beyond_LH： 我是先尝试修改hosts文件然后用激活码激活结果没有反应（并没有提示激活码无效），然后尝试了第二种方法还是没有反应，这时我把hosts文件恢复至最初状态，于是就成功了，激活到2020.11.。。很神奇。。</p>
<p>@代安：我在这里说明一下，我遇到的坑，也是显示 key is invalid.下面介绍解决方法： 1.千万记得修改hosts 文件，且该文件的图标左下角不能有一把小锁。这个是 key is invalid的原因之一 2.文件路径和版本不匹配，不然重新点击pycharm时，打不开的。 3.在网上找注册码，用过的不要在用了。</p>
<p>据评论有的朋友用上面的激活不了，大家注意，一定要先修改hosts文件，不然就会无效，这里我搜集了一些有用的，可以直接copy</p>
</blockquote>
<p><a href="http://www.javatiku.cn/pycharm/87.html">http://www.javatiku.cn/pycharm/87.html</a></p>
<blockquote>
<p>PyCharm2021.1.3专业版破解<a href="http://www.javatiku.cn/pycharm/66.html">Pycharm破解教程_Pycharm注册码，可无限重置激活至2100年（亲测有效） (javatiku.cn)</a></p>
</blockquote>
<hr>
<h2 id="PyCharm2021-3专业版"><a href="#PyCharm2021-3专业版" class="headerlink" title="PyCharm2021.3专业版"></a>PyCharm2021.3专业版</h2><h2 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h2><p><a href="https://www.javatiku.cn/pycharm/735.html">https://www.javatiku.cn/pycharm/735.html</a></p>
<hr>
<h1 id="方法三：-修改激活验证"><a href="#方法三：-修改激活验证" class="headerlink" title="方法三：[修改激活验证]"></a>方法三：[修改激活验证]</h1><h2 id="PyCharm2020专业版破解"><a href="#PyCharm2020专业版破解" class="headerlink" title="PyCharm2020专业版破解"></a>PyCharm2020专业版破解</h2><h3 id="教程演示-1"><a href="#教程演示-1" class="headerlink" title="教程演示"></a>教程演示</h3><h4 id="激活前准备工作"><a href="#激活前准备工作" class="headerlink" title="激活前准备工作"></a>激活前准备工作</h4><ul>
<li>配置文件修改已经不在bin目录下直接修改，而是通过pycharm修改</li>
<li>如果输入code一直弹出来，请去hosts里移除jetbrains相关的项目</li>
</ul>
<p>下载pycharm2020版</p>
<p><a href="https://pan.baidu.com/s/1n0u62qj_2ff-GIgnRGoQjw">https://pan.baidu.com/s/1n0u62qj_2ff-GIgnRGoQjw</a></p>
<h4 id="1-下载新版破解补丁"><a href="#1-下载新版破解补丁" class="headerlink" title="1.下载新版破解补丁"></a>1.下载新版破解补丁</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">链接：https://pan.baidu.com/s/1b8vNakGVGssAuqhBMyuMcg </span><br><span class="line">提取码：0000 </span><br><span class="line">--来自百度网盘超级会员V1的分享</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/20211219143751.png"></p>
<hr>
<h4 id="2-进入项目界面"><a href="#2-进入项目界面" class="headerlink" title="2.进入项目界面"></a>2.进入项目界面</h4><p>如果你之前已经使用有效期激活过可跳过此步骤，如果你是刚下载的pycharm，则需要点击激活窗口的“Evaluate for free”免费试用，然后再创建一个空项目，这样就可以进入到pycharm的工作页面</p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/20211219143808.png"></p>
<h4 id="3-将jetbrains-agent拖拽到软件界面里，然后进行下一步"><a href="#3-将jetbrains-agent拖拽到软件界面里，然后进行下一步" class="headerlink" title="3.将jetbrains-agent拖拽到软件界面里，然后进行下一步"></a>3.将jetbrains-agent拖拽到软件界面里，然后进行下一步<img src="https://gitee.com/lichaikui/picture/raw/master/tupian/20211219143832.png"></h4><p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/20211219143852.png"></p>
<h4 id="4-点击“为PyCharm安装”，然后进行下一步"><a href="#4-点击“为PyCharm安装”，然后进行下一步" class="headerlink" title="4.点击“为PyCharm安装”，然后进行下一步"></a>4.点击“为PyCharm安装”，然后进行下一步<img src="https://gitee.com/lichaikui/picture/raw/master/tupian/20211219143911.png"></h4><p>点击“是”，然后进行下一步</p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/20211219143926.png"></p>
<h4 id="5-查看有效期"><a href="#5-查看有效期" class="headerlink" title="5.查看有效期"></a>5.查看有效期</h4><p>当你激活完毕后，PyCharm右下角会有个Registration小长条提示框，大致的内容为：You copy is Licensed to XXX意思就会告诉你：兄弟，你已经激活成功了，激活码的许可来源是：XXX。</p>
<p>查看有效期的步骤为点击：Help-&gt;About这里可以看到你的pycharm的版本号、许可来源、有效期、以及一些环境</p>
<p>服务器激活是没有期限的，即为<strong>永久有效</strong></p>
<p><a href="https://mp.weixin.qq.com/s/swmKZReUGaZKSiglxgn9YA">https://mp.weixin.qq.com/s/swmKZReUGaZKSiglxgn9YA</a></p>
<hr>
<h1 id="方法四：-自搭"><a href="#方法四：-自搭" class="headerlink" title="方法四：[自搭]"></a>方法四：[自搭]</h1><h2 id="PyCharm2021-2-3专业版破解-1"><a href="#PyCharm2021-2-3专业版破解-1" class="headerlink" title="PyCharm2021.2.3专业版破解"></a>PyCharm2021.2.3专业版破解</h2><h3 id="教程演示-2"><a href="#教程演示-2" class="headerlink" title="教程演示"></a>教程演示</h3><h4 id="卸载旧版本-PyCharm"><a href="#卸载旧版本-PyCharm" class="headerlink" title="卸载旧版本 PyCharm"></a>卸载旧版本 PyCharm</h4><p>首先我们要将电脑上旧版本的 PyCharm 卸载干净，如果你的电脑之前并没有安装 PyCharm 就可以跳过这一步。</p>
<p><strong>Ps：一定要按照下图所示勾选，确保完全卸载干净。</strong></p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/20211219143945.png"></p>
<h4 id="下载最新版-PyCharm"><a href="#下载最新版-PyCharm" class="headerlink" title="下载最新版 PyCharm"></a>下载最新版 PyCharm</h4><p>然后我们再从 PyCharm 官网下载最新 2021.2.3 版本的PyCharm，点击跳转<a href="https://www.jetbrains.com/pycharm/download/">官网下载 </a>。</p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/20211219144001.png"></p>
<h4 id="安装最新版-PyCharm"><a href="#安装最新版-PyCharm" class="headerlink" title="安装最新版 PyCharm"></a>安装最新版 PyCharm</h4><p>双击打开我们刚才下载好的 PyCharm 安装包，默认安装位置是<code>C:\Program Files\JetBrains\PyCharm 2021.2.3</code> ，我这里直接是安装在默认位置。</p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/20211219144015.png"></p>
<p>然后一路 <code>Next</code> ，最后点击 <code>Install</code> 安装就可以了。</p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/20211219144030.png"></p>
<p>等到安装完成之后，记得如下图所示勾选 <code>Run PyCharm</code> ，然后点击 <code>Finish</code> 运行你的 PyCharm。</p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/20211219144046.png"></p>
<h4 id="激活步骤"><a href="#激活步骤" class="headerlink" title="激活步骤"></a>激活步骤</h4><p>如果你还是老版本的 PyCharm，打开之后可以直接试用30天，勾选 <code>Evaluate for free</code>, 再点击 <code>Evaluate</code> 就可以了。</p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/20211219144100.png"></p>
<p>如果弹出来的界面不让你使用30天，，那么你可以执行<code>reset_script</code> 文件夹中的重置脚本来重置你的 PyCharm，这样就有30天试用了。</p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/20211219144114.png"></p>
<p><strong>最新 2021.2.3 版的 PyCharm</strong> 直接更改了试用策略，需要我们注册了官方账号之后才能试用30天。</p>
<p><strong>Ps：如果你点击注册 JetBrains 账号无法打开网页，那应该是你之前修改了 hosts 文件，还原就可以。</strong></p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/20211219144132.png"></p>
<p>注册并且登录之后，我们就可以试用30天 PyCharm 了。</p>
<h5 id=""><a href="#" class="headerlink" title=""></a><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/20211219144210.png"></h5><p>1、首先将我们的激活补丁 <code>FineAgent.jar</code> 放在电脑的D盘根目录下面，并不是一定要放在D盘，大家根据自己的实际情况放在 E盘、F盘都是可以的。</p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/20211219144227.png"></p>
<h5 id="补丁获取"><a href="#补丁获取" class="headerlink" title="补丁获取"></a>补丁获取</h5><p>该破解方法需要用到的文件都准备好了，通过下方的网盘链接下载就行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">链接：https://pan.baidu.com/s/1Yex-Z0xpilh_m9AHF3Y44Q </span><br><span class="line">提取码：0000 </span><br><span class="line">--来自百度网盘超级会员V1的分享</span><br></pre></td></tr></table></figure>

<p>压缩包目录结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FineAgent.zip</span><br><span class="line">|---激活码</span><br><span class="line">|---FineAgent.jar</span><br><span class="line">reset_script.zip</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/20211219144241.png"></p>
<p>2、进入 PyCharm 之后，我们先创建一个新的项目，最简单的 Java 项目就行。</p>
<p>然后点击上方菜单栏的 <code>Helo</code> –&gt; <code>Edit Custom VM Option</code>s ，修改 PyCharm 的 <code>PyCharm.vmoptions</code> 配置文件。</p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/20211219144301.png"></p>
<p>因为我是将激活补丁放在了D盘下面，所以在配置文件下面加上这个引用，大家根据自己的补丁路径来写。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 我这边将补丁放置在了D盘根目录下，小伙伴们可以根据自己实际的位置进行修改</span><br><span class="line">-javaagent:d:/FineAgent.jar</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/20211219144318.png"></p>
<p><a href="">vmoptions找不到？<br>打开IDEA，菜单:Help -&gt; Edit Custom Properties，进入修改</a></p>
<p><strong>3、然后我们重启 PyCharm，一定要重启，不然不会生效。</strong></p>
<p>4、打开我们补丁文件夹里的 <code>ActivationCode.txt</code> 文件，并且复制里面的激活码。</p>
<p>5、再打开 PyCharm，点击 <code>Activate IntelliJ PyCharm</code> –&gt; <code>Activation code</code> ，然后粘贴我们刚才复制的激活码，再点击 <code>Activate</code> 激活就可以了。</p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/20211219144404.png"></p>
<p>然后你就可以看到已经激活成功啦，成功激活至2099年！</p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/20211219144417.png"></p>
<p>[^<a href="http://www.javatiku.cn/pycharm/291.html]">http://www.javatiku.cn/pycharm/291.html]</a>: </p>
<h2 id="PyCharm2018专业版破解"><a href="#PyCharm2018专业版破解" class="headerlink" title="PyCharm2018专业版破解"></a>PyCharm2018专业版破解</h2><p>1.下载并安装PyCharm</p>
<p>2.下载Crack破解补丁</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">百度云链接：https://pan.baidu.com/s/1Znl94FRwmnrxSKpExIUynw 密码：n34p</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/20211219144431.png"></p>
<p>3.将破解补丁放到PyCharm安装目录的lib文件夹中</p>
<p>4.修改pycharm.exe.vmoptions文件和pycharm64.exe.vmoptions文件</p>
<p>这两个文件在PyCharm安装目录的bin文件夹中，我的路径是：C:\Program Files\JetBrains\PyCharm 2018.1.4\bin</p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/20211219144446.png"></p>
<p>红框内为要修改的文件</p>
<p>右击这两个文件，用记事本打开</p>
<p>在文件最后添加-javaagent:C:\Program Files\JetBrains\PyCharm 2018.1.4\lib\JetbrainsCrack-2.8-release-enc.jar，即”-javaagent:”+”破解补丁路径(包括破解补丁全称)”</p>
<p>5.打开PyCharm，选择Active Code，在下面方框中输入以下代码，点击ok</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;licenseId&quot;:&quot;ThisCrackLicenseId&quot;,</span><br><span class="line">&quot;licenseeName&quot;:&quot;Rover12421&quot;,</span><br><span class="line">&quot;assigneeName&quot;:&quot;Rover12421&quot;,</span><br><span class="line">&quot;assigneeEmail&quot;:&quot;rover12421@163.com&quot;,</span><br><span class="line">&quot;licenseRestriction&quot;:&quot;By Rover12421 Crack, Only Test! Please support genuine!!!&quot;,</span><br><span class="line">&quot;checkConcurrentUse&quot;:false,</span><br><span class="line">&quot;products&quot;:[</span><br><span class="line">&#123;&quot;code&quot;:&quot;II&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&#123;&quot;code&quot;:&quot;DM&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&#123;&quot;code&quot;:&quot;AC&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&#123;&quot;code&quot;:&quot;RS0&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&#123;&quot;code&quot;:&quot;WS&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&#123;&quot;code&quot;:&quot;DPN&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&#123;&quot;code&quot;:&quot;RC&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&#123;&quot;code&quot;:&quot;PS&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&#123;&quot;code&quot;:&quot;DC&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&#123;&quot;code&quot;:&quot;RM&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&#123;&quot;code&quot;:&quot;CL&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&#123;&quot;code&quot;:&quot;PC&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&#123;&quot;code&quot;:&quot;DB&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&#123;&quot;code&quot;:&quot;GO&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&#123;&quot;code&quot;:&quot;RD&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;</span><br><span class="line">],</span><br><span class="line">&quot;hash&quot;:&quot;2911276/0&quot;,</span><br><span class="line">&quot;gracePeriodDays&quot;:7,</span><br><span class="line">&quot;autoProlongated&quot;:false&#125; </span><br></pre></td></tr></table></figure>

<p>6.破解成功，可以在Help-About中查看使用年限   到2099年</p>
<p><a href="https://blog.csdn.net/CheneyKKE/article/details/81137577?utm_medium=distribute.pc_feed_404.none-task-blog-2~default~BlogCommendFromBaidu~default-2.control404&depth_1-utm_source=distribute.pc_feed_404.none-task-blog-2~default~BlogCommendFromBaidu~default-2.control40">(1条消息) PyCharm2018专业版破解_CheneyKKE的博客-CSDN博客_pycharm2018专业版</a></p>
<hr>
<h1 id="方法五："><a href="#方法五：" class="headerlink" title="方法五："></a>方法五：</h1><p>(BetterIntelliJh还没地方下)</p>
<p>3、打开插件中心，选择通过磁盘安装：File -&gt; Settings -&gt;Install Plugin from disk</p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/20211219144512.png"></p>
<p>4、找到之前解压的文件，选择安装即可BetterIntelliJ文件即可</p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/20211219144525.png"></p>
<p>5、重启软件</p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/20211219144538.png"></p>
<p>6、打开主界面，找到 Help-&gt;Register，选择activation code，将key复制到框内，点击activate即可，如图</p>
<p><img src="https://gitee.com/lichaikui/picture/raw/master/tupian/20211219144553.png"></p>
<p>1、打不开IDEA？<br>可能之前安装过其它激活文件，需要检查下idea64.exe.vmoptions的配置对不对？<br>建议去掉之前的 -javaagent 配置。然后，再根据上面的激活说明安装新激活文件~</p>
<p>2、激活插件，安装完毕，会自动在软件的配置文件生成以下参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#以windows为例，配置参数：</span><br><span class="line">-javaagent:C:\Users\Public\.BetterIntelliJ\BetterIntelliJ-版本号.jar</span><br><span class="line">#以unix为例，配置参数：</span><br><span class="line">-javaagent:$&#123;HOME&#125;//.BetterIntelliJ/BetterIntelliJ-版本号.jar</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h1><blockquote>
<p><a href="http://www.javatiku.cn/idea/51.html">Intellij IDEA插件之jrebel使用教程，jrebel激活，jrebel破解教程 (javatiku.cn)</a></p>
<p><a href="https://www.cnblogs.com/xiaogblog/p/15093287.html">Jetbrains IDEA 系列软件最新crack方案 - 小小爬虫 - 博客园 (cnblogs.com)</a></p>
<p><a href="https://www.jb51.net/article/193396.htm">Pycharm无法打开双击没反应的问题及解决方案_python_脚本之家 (jb51.net)</a></p>
<h6 id="Jetbrains系列产品最新激活方法https-zhile-io-2018-08-17-jetbrains-license-server-crack-html"><a href="#Jetbrains系列产品最新激活方法https-zhile-io-2018-08-17-jetbrains-license-server-crack-html" class="headerlink" title="Jetbrains系列产品最新激活方法https://zhile.io/2018/08/17/jetbrains-license-server-crack.html"></a>Jetbrains系列产品最新激活方法<a href="https://zhile.io/2018/08/17/jetbrains-license-server-crack.html">https://zhile.io/2018/08/17/jetbrains-license-server-crack.html</a></h6><p>如何下载pycharm历史版本<a href="https://blog.csdn.net/qq_28077617/article/details/117249901">https://blog.csdn.net/qq_28077617/article/details/117249901</a></p>
</blockquote>
]]></content>
      <categories>
        <category>pycharm</category>
      </categories>
      <tags>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>01_MATLAB工作环境</title>
    <url>/2022/03/31/MATLAB%E5%AD%A6%E4%B9%A0/01_MATLAB%E5%8A%9F%E8%83%BD%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%BA%94%E7%94%A8/01_MATLAB%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h1 id="一、MATLAB工作环境"><a href="#一、MATLAB工作环境" class="headerlink" title="一、MATLAB工作环境"></a>一、MATLAB工作环境</h1><h4 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h4><p><img src="https://s2.loli.net/2022/02/26/CHip3tQdKTZRVx8.png" alt="image-20220226160058746"></p>
<h4 id="2-窗口操作命令"><a href="#2-窗口操作命令" class="headerlink" title="2.窗口操作命令"></a>2.窗口操作命令<img src="https://s2.loli.net/2022/02/26/rnJVHTeCOR6wuob.png" alt="image-20220226214038447"></h4><h5 id="程序命令"><a href="#程序命令" class="headerlink" title="程序命令"></a>程序命令<img src="https://s2.loli.net/2022/02/26/qSxVN8u1ZF25CsL.jpg" alt="6d1bfa1669a316ba46526327267cdaf"></h5>]]></content>
      <categories>
        <category>01_MATLAB功能和基本应用</category>
      </categories>
      <tags>
        <tag>MATLAB学习</tag>
      </tags>
  </entry>
  <entry>
    <title>01_数据的输入和输出</title>
    <url>/2022/03/31/MATLAB%E5%AD%A6%E4%B9%A0/02_MATLAB%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/01_%E6%95%B0%E6%8D%AE%E7%9A%84%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA/</url>
    <content><![CDATA[<h1 id="一、数据的输入和输出"><a href="#一、数据的输入和输出" class="headerlink" title="一、数据的输入和输出"></a>一、数据的输入和输出</h1><h2 id="1、数据输入"><a href="#1、数据输入" class="headerlink" title="1、数据输入"></a>1、数据输入</h2><ul>
<li><p>从键盘输入数据，可以使用 <strong>input</strong>函数，该函数每赋值一次只能赋一个值</p>
</li>
<li><p><strong>——</strong>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A=input(<span class="string">&#x27;请输入数据提示信息&#x27;</span>);  </span><br></pre></td></tr></table></figure>

<p>输入值可以是整型或双精度型数据</p>
<p>对输入的双精度数值自动保留4位小数（自动四舍五入）</p>
<p><strong>——</strong>语法格式：(输入字符串，先显示提示信息内容，再将输入得知以字符串型保存在变量A中)</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A=input(<span class="string">&#x27;请输入数据提示信息&#x27;</span>，选项)</span><br></pre></td></tr></table></figure>
</li>
<li><p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">Number=input(<span class="string">&#x27;请输入一个竖中指Number=?&#x27;</span>)</span><br><span class="line">String=input(<span class="string">&#x27;请输入一个字符串String=？&#x27;</span>,<span class="string">&#x27;s&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2、数据输出"><a href="#2、数据输出" class="headerlink" title="2、数据输出"></a>2、数据输出</h2><h4 id="（1）无格式输出"><a href="#（1）无格式输出" class="headerlink" title="（1）无格式输出"></a>（1）无格式输出</h4><ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">disp</span>(x)   <span class="comment">% 输出变量X值，X可以是矩阵或字符串</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>disp需要一个数组参数</p>
<ul>
<li>如果这个值是字符型，则在命令口直接输出字符串</li>
<li>如果这个数组是数值型，则需要用 <code>num2str</code>(将一个数值转换为字符串)或 <code>int2str</code>(将一个整数转为字符串)</li>
<li>函数进行转换后，显示在命令行窗口中</li>
</ul>
</li>
<li><p>disp一次只能输出一个变量。若输出矩阵时将不显示矩阵的名字，而且其格式更紧密，不留任何没有意义的空行</p>
</li>
</ul>
<h4 id="（2）有格式输出"><a href="#（2）有格式输出" class="headerlink" title="（2）有格式输出"></a>（2）有格式输出</h4><p>整数以整型格式显示，直接输入的数值默认以双精型格式显示，MATLAB默认精确到小数点后4位，如果一个数太大或太小，那么将以科学计数法的形式显示</p>
<p>例如：</p>
<p>将<code>a=1/3</code> 表示为 <code>a=0.3333</code>  , 将 <code>b=12345.1123445</code>表示为 <code>b=1.2345e+04</code></p>
<ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">fprintf(fid,format,A)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：</p>
<ul>
<li><p>fid为文件句柄，指定要写入数据的文件</p>
<ul>
<li><blockquote>
<p><strong><code>fileID</code> – 文件标识符<br><code> 1</code> （默认） | <code>2</code> | 标量</strong></p>
</blockquote>
<p>文件标识符，指定为下列值之一：</p>
<ul>
<li>从fopen获取的文件标识符。</li>
<li><code>1</code> 表示标准输出（屏幕）。</li>
<li><code>2</code> 表示标准错误。</li>
</ul>
</li>
</ul>
</li>
<li><p>**<code>format</code>**用来指定数据输出是采用的格式，以 <code>%</code>开头</p>
</li>
</ul>
</blockquote>
</li>
<li><p>常用的输出格式</p>
<table>
<thead>
<tr>
<th>表示</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>%d</td>
<td>整数</td>
</tr>
<tr>
<td>%g</td>
<td>浮点数，系统自动选取位</td>
</tr>
<tr>
<td>%f</td>
<td>以小数形式表示实数</td>
</tr>
<tr>
<td>%c</td>
<td>字符型</td>
</tr>
<tr>
<td>%e</td>
<td>以科学计数法形式表示实数</td>
</tr>
<tr>
<td>%s</td>
<td>输出字符串</td>
</tr>
<tr>
<td>%o</td>
<td>八进制</td>
</tr>
<tr>
<td>%X、%x</td>
<td>十六进制</td>
</tr>
</tbody></table>
</li>
<li><p>format中还可以使用字符串</p>
<table>
<thead>
<tr>
<th>表示</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>\ b</td>
<td>退后一格</td>
</tr>
<tr>
<td>\ r</td>
<td>回车</td>
</tr>
<tr>
<td>\ t</td>
<td>水平制表</td>
</tr>
<tr>
<td>\f</td>
<td>换页</td>
</tr>
<tr>
<td>\ n</td>
<td>换行</td>
</tr>
<tr>
<td>\ \</td>
<td>双斜杠</td>
</tr>
<tr>
<td>‘ ‘</td>
<td>单引号</td>
</tr>
<tr>
<td>%%</td>
<td>百分号</td>
</tr>
</tbody></table>
</li>
<li><p>例如：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">f=<span class="built_in">pi</span>;</span><br><span class="line">fprintf(<span class="string">&#x27;The pi = %8.5f\n&#x27;</span>,<span class="built_in">pi</span>)  <span class="comment">% 其中%为数据格式符，f表示十进制浮点，8.5表示数字的长度为8位，小数点后5位</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">The <span class="built_in">pi</span>=<span class="number">3.14159</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>求一元二次方程<img src="https://s2.loli.net/2022/03/30/k2eiKZArDjoY8QI.jpg" style="zoom:33%;" />的根</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A=input(<span class="string">&#x27;请输入一元二次方程的系数:a,b,c=? &#x27;</span>);</span><br><span class="line">delta=A(<span class="number">2</span>)^<span class="number">2</span><span class="number">-4</span>*A(<span class="number">1</span>)*A(<span class="number">3</span>);</span><br><span class="line">x1=(-A(<span class="number">2</span>)-<span class="built_in">sqrt</span>(delta))/<span class="number">2</span>*A(<span class="number">1</span>);</span><br><span class="line">x2=(-A(<span class="number">2</span>)+<span class="built_in">sqrt</span>(delta))/<span class="number">2</span>*A(<span class="number">1</span>);</span><br><span class="line">fprintf(<span class="string">&#x27;%.2f  ,  %.2f\n&#x27;</span>,x1,x2);</span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;方程的解想x1=&#x27;</span>,num2str(x1),<span class="string">&#x27;,方程的解x2=&#x27;</span>,num2str(x2)]);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明 </p>
<ul>
<li>使用<code>fprintf</code>比较灵活方便，可以输出任何格式。且可输出多个数值项，但需要定义数据的字符串宽度和数据格式</li>
<li><code>fprintf</code>只能输出复数的实部，在有复数产生的计算中可能出现错误的结果</li>
</ul>
</blockquote>
</li>
</ul>
<h2 id="3、fprintf和disp的区别"><a href="#3、fprintf和disp的区别" class="headerlink" title="3、fprintf和disp的区别"></a>3、fprintf和disp的区别</h2><h3 id="（1）输出的目标不一样"><a href="#（1）输出的目标不一样" class="headerlink" title="（1）输出的目标不一样"></a>（1）输出的目标不一样</h3><ul>
<li><p><code>disp</code>用来直接显示在命令行里，非常轻量</p>
</li>
<li><p><code>fprintf</code>是   <strong>f(ile)printf(ormat)</strong>   ，可以用来直接进行文件的写入，如果不指定文件的<code>fid</code>那么直接输出到命令行。</p>
</li>
</ul>
<h3 id="（2）用法不同"><a href="#（2）用法不同" class="headerlink" title="（2）用法不同"></a>（2）用法不同</h3><ul>
<li><p><code>disp</code>即<code>display</code>，可用来显示字符串、计算结果等</p>
<p>例子：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x= [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;The values of x are: &#x27;</span>, num2str(x)]);</span><br></pre></td></tr></table></figure>

<p>结果显示为：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">The values of x are: <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>


</li>
<li><p><code>fprintf</code>函数可以将数据按指定格式写入到文本文件中，也可以显示字符串、计算结果</p>
<p>其调用格式为：</p>
<p><code>count = fprintf(fid, format, val1, val2, ...)</code></p>
<blockquote>
<ul>
<li><p>fid是我们要写入数据文件的文件标识</p>
</li>
<li><p>format是控制数据显示的字符串</p>
</li>
<li><p>如果  fid 丢失，数据将写入到命令窗口 (标准输出设备)</p>
</li>
<li><p>格式（format）字符串指定队列<strong>长度、小数精度、域宽、输出格式的其他方面</strong>。</p>
<p><code>它包括文字数字字符（%）和字符序列（用于指定输出数据显示的精确格式） 例如 %d</code></p>
</li>
</ul>
</blockquote>
<p><img src="https://iknow-pic.cdn.bcebos.com/574e9258d109b3de47e56c8dc2bf6c81810a4cf9?x-bce-process=image/resize,m_lfit,w_600,h_800,limit_1/quality,q_85/format,f_jpg" alt="img"></p>
</li>
</ul>
<h3 id="（3）使用对象"><a href="#（3）使用对象" class="headerlink" title="（3）使用对象"></a>（3）使用对象</h3><p>想把字<code>符串pi=和变量pi的值显示在一行上</code>，试用disp(′pi&#x3D;′,pi),回答这是非法的。这时应该<code>用sprintf函数，它可把数据按要求的格式转换为字符串</code>，再把它与需要显示的字符串组装成一个长字符串，使显示格式非常灵活，人机界面更为友好</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">st=sprintf(<span class="string">&#x27;圆周率pi= %8.5f&#x27;</span>,<span class="built_in">pi</span>)  <span class="comment">% f表示十进制浮点，8.5表示数字的长度为8位，小数点后5位</span></span><br><span class="line">st=sprintf(<span class="string">&#x27;随便= %8.5f&#x27;</span>,<span class="number">5.61</span>)</span><br><span class="line"><span class="built_in">disp</span>(st)</span><br><span class="line"></span><br><span class="line"><span class="comment">% 结果为</span></span><br><span class="line"></span><br><span class="line">圆周率<span class="built_in">pi</span>=<span class="number">3.14159</span></span><br></pre></td></tr></table></figure>

<p>其中%为数据格式符，，从%到f之间的字符都是不显示的，它只指出显示数据  pi  &#x2F;  5.61  的格式，跟C的printf很相似</p>
]]></content>
      <categories>
        <category>02_MATLAB程序设计</category>
      </categories>
      <tags>
        <tag>MATLAB学习</tag>
      </tags>
  </entry>
  <entry>
    <title>02_MATLAB语言基础</title>
    <url>/2022/03/31/MATLAB%E5%AD%A6%E4%B9%A0/01_MATLAB%E5%8A%9F%E8%83%BD%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%BA%94%E7%94%A8/02_MATLAB%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="二、MATLAB语言基础"><a href="#二、MATLAB语言基础" class="headerlink" title="二、MATLAB语言基础"></a>二、MATLAB语言基础</h1><h3 id="1-变量命名规则"><a href="#1-变量命名规则" class="headerlink" title="1.变量命名规则"></a>1.变量命名规则</h3><ul>
<li><p>基本规则</p>
<ul>
<li><p>变量名和函数名对字母的大小写敏感，故而a与A是两个不同的变量名。</p>
</li>
<li><p>变量名必须以字母开头，其后可以是任意字母或下划线，但是不能有空格、中文或标点，例如_xy、a.b均是不合法的变量名，而classNum_x是一个合法的变量名。</p>
</li>
<li><p>不能使用<code>MATLAB</code>的关键字作为变量名。避免使用函数名作为变量名，如果你使用了函数名，则该函数失效。</p>
<p>如果你使用<code>sin = 1</code>，则在未清理缓存的情况下，将会出现<code>sin(1) = 1</code>，所以不要使用，以免造成不必要的麻烦。</p>
</li>
<li><p>变量名最多可包含63个字符，从第64个字符开始之后的字符将会被忽略</p>
</li>
<li><p><strong>如果运算结果没有赋予任何变量，系统将其赋予 <code>ans</code>，它是特殊变量，只保留最新值</strong></p>
</li>
</ul>
</li>
<li><p>在<code>MATLAB</code>中，可以通过调用<code>isvarname</code>函数,来验证变量名是否符合<code>MATLAB</code>所接受的合法变量名。该函数值返回值为1或0,1代表合法，0代表不合法。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; isvarname(<span class="string">&#x27;_xy&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line">  logical</span><br><span class="line">   <span class="number">0</span></span><br><span class="line">   </span><br><span class="line">&gt;&gt; isvarname(<span class="string">&#x27;classNum_x&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line">  logical</span><br><span class="line">   <span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://mp.weixin.qq.com/s/1Ecz8niMPCyXxJCj8pHZxQ">预定义变量</a></p>
<p>预定义变量就是系统已经定义好了的变量，我们可以把它们当做常量来看待。有如下几种类型：</p>
<table>
<thead>
<tr>
<th align="left">预定义变量</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ans</td>
<td align="center">系统默认的用作保存运算结果的变量名</td>
</tr>
<tr>
<td align="left">pi</td>
<td align="center">圆周率</td>
</tr>
<tr>
<td align="left">eps</td>
<td align="center">机器零阈值，<code>MATLAB</code>中的最小数</td>
</tr>
<tr>
<td align="left">inf</td>
<td align="center">表示无穷大</td>
</tr>
<tr>
<td align="left">NaN或nan</td>
<td align="center">表示不定数</td>
</tr>
<tr>
<td align="left">i或j</td>
<td align="center">虚数单位</td>
</tr>
<tr>
<td align="left">nargin</td>
<td align="center">函数的输入参数个数</td>
</tr>
<tr>
<td align="left">nargout</td>
<td align="center">函数的输出参数个数</td>
</tr>
<tr>
<td align="left">realmin</td>
<td align="center">可用的最小正实数</td>
</tr>
<tr>
<td align="left">realmax</td>
<td align="center">可用的最大正实数</td>
</tr>
<tr>
<td align="left">bitmax</td>
<td align="center">可用的最大正整数（以双精度格式存储）</td>
</tr>
<tr>
<td align="left">varargin</td>
<td align="center">可变的函数输入参数</td>
</tr>
<tr>
<td align="left">varargout</td>
<td align="center">可变的函数输出参数</td>
</tr>
<tr>
<td align="left">beep</td>
<td align="center">使计算机发出“嘟嘟”的声音</td>
</tr>
</tbody></table>
</li>
<li><p>举一个例子<br>根据<em>S</em>&#x3D;<em>π**r</em>2，计算当<em>r</em>&#x3D;3时，圆的面积。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pi</span>*(<span class="number">3</span>^<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ans</span> =</span><br><span class="line">   <span class="number">28.2743</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>关键字</p>
<p>关键字是<code>MATLAB</code>程序设计中常用到的流程控制变量，共有20个，前面提到了不建议使用关键字作为变量的名字，因而在此列举出来，这些我们在后面还会提到。在命令行窗口输入命令<code>iskeyword</code>，即可查询到：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; iskeyword</span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line">  <span class="number">20</span>×<span class="number">1</span> cell 数组</span><br><span class="line">    <span class="string">&#x27;break&#x27;</span></span><br><span class="line">    <span class="string">&#x27;case&#x27;</span></span><br><span class="line">    <span class="string">&#x27;catch&#x27;</span></span><br><span class="line">    <span class="string">&#x27;classdef&#x27;</span></span><br><span class="line">    <span class="string">&#x27;continue&#x27;</span></span><br><span class="line">    <span class="string">&#x27;else&#x27;</span></span><br><span class="line">    <span class="string">&#x27;elseif&#x27;</span></span><br><span class="line">    <span class="string">&#x27;end&#x27;</span></span><br><span class="line">    <span class="string">&#x27;for&#x27;</span></span><br><span class="line">    <span class="string">&#x27;function&#x27;</span></span><br><span class="line">    <span class="string">&#x27;global&#x27;</span></span><br><span class="line">    <span class="string">&#x27;if&#x27;</span></span><br><span class="line">    <span class="string">&#x27;otherwise&#x27;</span></span><br><span class="line">    <span class="string">&#x27;parfor&#x27;</span></span><br><span class="line">    <span class="string">&#x27;persistent&#x27;</span></span><br><span class="line">    <span class="string">&#x27;return&#x27;</span></span><br><span class="line">    <span class="string">&#x27;spmd&#x27;</span></span><br><span class="line">    <span class="string">&#x27;switch&#x27;</span></span><br><span class="line">    <span class="string">&#x27;try&#x27;</span></span><br><span class="line">    <span class="string">&#x27;while&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-全局变量和局部变量"><a href="#2-全局变量和局部变量" class="headerlink" title="2.全局变量和局部变量"></a>2.全局变量和局部变量</h3><ul>
<li><p>各个函数之间以及命令行窗口的工作空间中，内存空间独立，不能相互访问</p>
</li>
<li><p>初始化是仅需声明一次，用时需要声明一次</p>
<ul>
<li>（在一个内存空间里声明global，在另一个内存空间里使用这个global时需要再次声明global，各内存空间声明一次即可）</li>
</ul>
</li>
<li><p>如果只在某个内存空间使用一次，在全局变量影响内存空间变量时，可使用clear命令清除变量名</p>
</li>
<li><p>如果一个函数内的边框没有特别声明，那么变量只在函数内部使用，即为全局变量</p>
</li>
<li><p>子程序较多时，全局变量会给程序调试和维护带来不便，一般不使用全局变量，如果使用 原则上   全部用大写字母表示</p>
</li>
</ul>
<h3 id="3-数据类型"><a href="#3-数据类型" class="headerlink" title="3.数据类型"></a><a href="https://mp.weixin.qq.com/s/OB4TKgoFEpo8W54W10xE0A">3.数据类型</a></h3><h4 id="——常量与变量"><a href="#——常量与变量" class="headerlink" title="——常量与变量"></a>——常量与变量</h4><p>​							<a href="https://fubaisen.github.io/2022/03/31/MATLAB%E5%AD%A6%E4%B9%A0/01_MATLAB%E5%8A%9F%E8%83%BD%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%BA%94%E7%94%A8/02_MATLAB%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/">见</a>       <code>1.变量命名规则</code></p>
<h4 id="——数值类型"><a href="#——数值类型" class="headerlink" title="——数值类型"></a>——数值类型</h4><p><strong>整数型、单精度浮点型、双精度浮点型、字符串型、结构体型、函数句柄型、逻辑型和单元数组型</strong></p>
<h5 id="1-整数"><a href="#1-整数" class="headerlink" title="1)整数:"></a>1)整数:</h5><ul>
<li><p>有符号数和无符号数使用整型变量和单精度变量可以节约内存空间。</p>
</li>
<li><table>
<thead>
<tr>
<th align="left">整数类型</th>
<th align="center">数值范围</th>
<th align="right">转换函数</th>
</tr>
</thead>
<tbody><tr>
<td align="left">有符号8位整数</td>
<td align="center">−27 ~27−1</td>
<td align="right">int8</td>
</tr>
<tr>
<td align="left">无符号8位整数</td>
<td align="center">0 ~28−1</td>
<td align="right">uint8</td>
</tr>
<tr>
<td align="left">有符号16位整数</td>
<td align="center">−215 ~215−1</td>
<td align="right">int16</td>
</tr>
<tr>
<td align="left">无符号16位整数</td>
<td align="center">0 ~216−1</td>
<td align="right">uint16</td>
</tr>
<tr>
<td align="left">有符号32位整数</td>
<td align="center">−231 ~231−1</td>
<td align="right">int32</td>
</tr>
<tr>
<td align="left">无符号32位整数</td>
<td align="center">0 ~232−1</td>
<td align="right">uint32</td>
</tr>
<tr>
<td align="left">有符号64位整数</td>
<td align="center">−263 ~263−1</td>
<td align="right">int64</td>
</tr>
<tr>
<td align="left">无符号64位整数</td>
<td align="center">0 ~264−1</td>
<td align="right">uint64</td>
</tr>
</tbody></table>
</li>
</ul>
<h5 id="2-浮点数"><a href="#2-浮点数" class="headerlink" title="2)浮点数:"></a>2)浮点数:</h5><ul>
<li><p>在默认状态下，MATLAB将所有的数都看作是双精度的浮点数</p>
<p>(单精度（single）和双精度（float，或者直接输入小数，因为matlab默认即为双精度）)</p>
</li>
<li><p>直接输人变量值创建的是<strong>double类型</strong>，创建<strong>single类型</strong>需要用输人类型<strong>转换函数</strong>。其他类型函数可以利用转换函数存储为需要的类型，如果有小数部分，自动四舍五入处理</p>
</li>
<li><table>
<thead>
<tr>
<th align="left">浮点类型</th>
<th align="center">存储位宽</th>
<th align="right">各位数的意义</th>
<th align="left">数值范围</th>
<th align="left">转换函数</th>
</tr>
</thead>
<tbody><tr>
<td align="left">单精度</td>
<td align="center">32</td>
<td align="right">0-22位表示小数部分，23-30位表示指数部分，31位表示符号（0正1负）</td>
<td align="left">−3.4028238<del>−1.17549−38 1.17549−38</del>3.4028238</td>
<td align="left">single</td>
</tr>
<tr>
<td align="left">双精度</td>
<td align="center">64</td>
<td align="right">0-51位表示小数部分，52-62位表示指数部分，63位表示符号（0正1负）</td>
<td align="left">−1.79769308<del>−2.22507−308 2.22507−308</del>1.79769308</td>
<td align="left">double</td>
</tr>
</tbody></table>
<p><img src="https://s2.loli.net/2022/02/26/opg2cBljI5WK6TZ.png" alt="image-20220226163136135"></p>
</li>
</ul>
<h6 id="运算法则："><a href="#运算法则：" class="headerlink" title="运算法则："></a><strong>运算法则：</strong></h6><ul>
<li><p><strong>单精度不能和整数类型进行计算</strong>，整数类型只能和整数和双精度进行计算</p>
</li>
<li><p>双精度和单精度或者整数计算结果为单精度或者整数</p>
</li>
<li><p>双精度和逻辑或者字符进行计算的时候，结果为双精度</p>
</li>
<li><p>其中和字符进行计算的时候，是用字符对应的ASCII 编码十进制进行对应计算的</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">Str = <span class="string">&#x27;h&#x27;</span> - <span class="number">44.3</span>; Ans = <span class="number">59.7000</span>   #因为h对应的编码为<span class="number">104</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>双精度的精度要远高于单精度，用<strong>eps函数</strong>可以查看实际值与其浮点数的间隙</p>
</li>
<li><p>在不同的数值类型参与的运算中，返回的数值类型要看具体情况</p>
<ul>
<li>双精度浮点数参与运算时，返回值的类型依赖于参与运算的其他数据类型</li>
<li>参与运算的其他数据为逻辑型、字符型时，返回结果为双精度浮点型</li>
<li>参与运算的其他数据为整数型时，返回结果为相应的整数类型</li>
<li>参与运算的其他数据为单精度浮点型时，返回结果为相应的单精度浮点型</li>
</ul>
</li>
</ul>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&gt;&gt; a = uint32(<span class="number">120</span>);</span><br><span class="line">&gt;&gt; b = single(<span class="number">22.809</span>);</span><br><span class="line">&gt;&gt; c = <span class="number">73.226</span>;</span><br><span class="line">&gt;&gt; ab = a*b</span><br><span class="line">错误使用  * </span><br><span class="line">整数只能与相同类的整数或标量双精度值组合使用。</span><br><span class="line"></span><br><span class="line">&gt;&gt; ac = a*c</span><br><span class="line"></span><br><span class="line">ac =</span><br><span class="line"></span><br><span class="line">        <span class="number">8787</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; bc = b*c</span><br><span class="line"></span><br><span class="line">bc =</span><br><span class="line"></span><br><span class="line">  <span class="number">1.6702e+03</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; str = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">&gt;&gt; newstr = str<span class="number">-44.3</span></span><br><span class="line"></span><br><span class="line">newstr =</span><br><span class="line"></span><br><span class="line">   <span class="number">59.7000</span>   <span class="number">56.7000</span>   <span class="number">63.7000</span>   <span class="number">63.7000</span>   <span class="number">66.7000</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; whos #List variables in workspace, with sizes and types</span><br><span class="line">  Name        Size            Bytes  Class     Attributes</span><br><span class="line"></span><br><span class="line">  a           <span class="number">1</span>x1                 <span class="number">4</span>  uint32              </span><br><span class="line">  ac          <span class="number">1</span>x1                 <span class="number">4</span>  uint32              </span><br><span class="line">  b           <span class="number">1</span>x1                 <span class="number">4</span>  single              </span><br><span class="line">  bc          <span class="number">1</span>x1                 <span class="number">4</span>  single              </span><br><span class="line">  c           <span class="number">1</span>x1                 <span class="number">8</span>  double              </span><br><span class="line">  newstr      <span class="number">1</span>x5                <span class="number">40</span>  double              </span><br><span class="line">  str         <span class="number">1</span>x5                <span class="number">10</span>  char  </span><br><span class="line"></span><br><span class="line">&gt;&gt; <span class="built_in">eps</span>(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">     <span class="number">4.440892098500626e-16</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; <span class="built_in">eps</span>(single(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">   <span class="number">2.3841858e-07</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>数据类型的强制转换、数值范围</strong></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">shu=<span class="number">66</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">%双精度浮点型，强制转换成整型</span></span><br><span class="line"></span><br><span class="line">shu8=int8(shu)</span><br><span class="line"></span><br><span class="line">shu16=int16(shu)</span><br><span class="line"></span><br><span class="line">shu32=int32(shu)</span><br><span class="line"></span><br><span class="line">shu64=int64(shu)</span><br><span class="line"></span><br><span class="line">string=<span class="string">&#x27;Max&#x27;</span></span><br><span class="line"></span><br><span class="line">switch1=int8(string)</span><br></pre></td></tr></table></figure>

<img src="https://mmbiz.qpic.cn/mmbiz_png/7fLgmsrLPNiblpD6dfbUsdcz5gMGlTicTUfmZmcb6ibkaIfeMUSsqibTEsYFn70pkZ8tzVRnMWqiaAmNW8icJayPtR8g/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片" style="zoom:50%;" />

<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">fudian=<span class="number">14.89</span>             <span class="comment">%默认是双精度浮点型</span></span><br><span class="line"></span><br><span class="line">fusingle=single(fudian)  <span class="comment">%转换成单精度浮点型</span></span><br><span class="line"></span><br><span class="line">fudouble=double(fudian)  <span class="comment">%转换成双精度浮点型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 查看数据类型的数值范围</span></span><br><span class="line"></span><br><span class="line">singlefanwei=[<span class="built_in">realmin</span>(<span class="string">&#x27;single&#x27;</span>) <span class="built_in">realmax</span>(<span class="string">&#x27;single&#x27;</span>)]</span><br><span class="line"></span><br><span class="line">doublefanwei=[<span class="built_in">realmax</span>(<span class="string">&#x27;double&#x27;</span>) <span class="built_in">realmax</span>(<span class="string">&#x27;double&#x27;</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment">% 结果</span></span><br><span class="line"></span><br><span class="line">fudian =</span><br><span class="line"></span><br><span class="line">   <span class="number">14.8900</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fusingle =</span><br><span class="line"></span><br><span class="line">  single</span><br><span class="line"></span><br><span class="line">   <span class="number">14.8900</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fudouble =</span><br><span class="line"></span><br><span class="line">   <span class="number">14.8900</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">singlefanwei =</span><br><span class="line"></span><br><span class="line">  <span class="number">1</span>×<span class="number">2</span> single 行向量</span><br><span class="line"></span><br><span class="line">   <span class="number">1.0e+38</span> *</span><br><span class="line"></span><br><span class="line">    <span class="number">0.0000</span>    <span class="number">3.4028</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">doublefanwei =</span><br><span class="line"></span><br><span class="line">  <span class="number">1.0e+308</span> *</span><br><span class="line"></span><br><span class="line">    <span class="number">1.7977</span>    <span class="number">1.7977</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="——逻辑类型"><a href="#——逻辑类型" class="headerlink" title="——逻辑类型"></a>——逻辑类型</h4><p><strong>逻辑类型的数据类型</strong>是指布尔类型的数据及数据之间的逻辑关系，出现这些运算的目的是为了<strong>提供求解真&#x2F;假命题的答案</strong>。作为所有关系和逻辑表达式的输入，逻辑类型数据类型进行运算时需要用到关系操作符和<strong>逻辑运算符</strong></p>
<p><code>MATLAB</code>把任何非零数值当作真，把零当作假。所有关系和逻辑表达式的输出：</p>
<ul>
<li>对于真，输出为1；对于假，输出为0</li>
</ul>
<h4 id="——字符和字符串"><a href="#——字符和字符串" class="headerlink" title="——字符和字符串"></a>——<a href="https://fubaisen.github.io/2022/03/31/MATLAB%E5%AD%A6%E4%B9%A0/%E8%A1%A5%E5%85%85%E6%96%87%E4%BB%B6/05_%E5%AD%97%E7%AC%A6%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2">字符和字符串</a></h4><h4 id="——函数句柄"><a href="#——函数句柄" class="headerlink" title="——函数句柄"></a>——<a href="https://fubaisen.github.io/2022/03/31/MATLAB%E5%AD%A6%E4%B9%A0/%E8%A1%A5%E5%85%85%E6%96%87%E4%BB%B6/01_%E5%87%BD%E6%95%B0%E5%8F%A5%E6%9F%84">函数句柄</a></h4><h4 id="——结构体类型"><a href="#——结构体类型" class="headerlink" title="——结构体类型"></a>——<a href="https://fubaisen.github.io/2022/03/31/MATLAB%E5%AD%A6%E4%B9%A0/%E8%A1%A5%E5%85%85%E6%96%87%E4%BB%B6/07_%E7%BB%93%E6%9E%84%E4%BD%93%E7%B1%BB%E5%9E%8B">结构体类型</a></h4><h3 id="4-常用标点符号"><a href="#4-常用标点符号" class="headerlink" title="4.常用标点符号"></a>4.常用标点符号</h3><p><img src="https://s2.loli.net/2022/02/26/E7uyxSU4ZnzLgiB.png" alt="image-20220226214144162"></p>
]]></content>
      <categories>
        <category>01_MATLAB功能和基本应用</category>
      </categories>
      <tags>
        <tag>MATLAB学习</tag>
      </tags>
  </entry>
  <entry>
    <title>03_代数运算</title>
    <url>/2022/03/31/MATLAB%E5%AD%A6%E4%B9%A0/01_MATLAB%E5%8A%9F%E8%83%BD%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%BA%94%E7%94%A8/03_%E4%BB%A3%E6%95%B0%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<h1 id="三、代数运算"><a href="#三、代数运算" class="headerlink" title="三、代数运算"></a>三、代数运算</h1><h2 id="1-常量表示"><a href="#1-常量表示" class="headerlink" title="1.常量表示"></a>1.常量表示</h2><p><img src="https://s2.loli.net/2022/02/26/JzpHdYMbvf26tRg.jpg" alt="8eadc37e2477643f5f08fb75ce2c84c"></p>
<h2 id="2-基础运算"><a href="#2-基础运算" class="headerlink" title="2.基础运算"></a>2.基础运算</h2><h3 id="（1）算术运算符"><a href="#（1）算术运算符" class="headerlink" title="（1）算术运算符"></a>（1）算术运算符</h3><p><img src="https://s2.loli.net/2022/02/26/iF97ORo34DWqLru.jpg" alt="c1cfae93fd110f0228f09d6b2447ac6"></p>
<ul>
<li><p>矩阵相加减应具有相同的行和列</p>
</li>
<li><p>两矩阵进行点运算是指它们的对应元素进行相关运算，且要求两矩阵的维数相同</p>
</li>
<li><p>A.\B	表示矩阵B中的每个元素初一矩阵A的对应的元素</p>
<p>A.&#x2F;B表示矩阵A中的每个元素除以矩阵B对应的元素2</p>
</li>
<li><p>左除、右除：</p>
<ul>
<li><p>A左除B(A\B)表示矩阵A的逆乘以矩阵B即inv(A)*B；</p>
<p>inv（4）&#x3D;1&#x2F;4</p>
</li>
<li><p>A右除B(A&#x2F;B)表示矩阵A乘以矩阵B的逆即A*inv(B)；</p>
</li>
<li><p>当A为非奇异矩阵时，x&#x3D;A\B是方程A<em>x&#x3D;B的解，而x&#x3D;B&#x2F;A是方程x</em>A&#x3D;B的解</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line">B=[<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>;<span class="number">5</span>,<span class="number">9</span>,<span class="number">13</span>;<span class="number">7</span>,<span class="number">12</span>,<span class="number">11</span>];</span><br><span class="line">C=A*B;</span><br><span class="line">D=A.*B;</span><br><span class="line">E=A/B;                   <span class="comment">% 右除</span></span><br><span class="line">E1=A*inv(B);             <span class="comment">% A* inv(B)等价 A/B  （inv对矩阵求逆）</span></span><br><span class="line">F=A\B;                   <span class="comment">% 左除</span></span><br><span class="line">F1=inv(A)*B;             <span class="comment">% inv(A)*B 等价 A\B</span></span><br><span class="line">G=A./B;                  <span class="comment">% 点左除</span></span><br><span class="line">H=A.\B;                  <span class="comment">% 点右除</span></span><br><span class="line">I=A^<span class="number">2</span>;                   </span><br><span class="line">I1=A.^<span class="number">2</span>;                 <span class="comment">% A的二次方  加点表示对应元素求二次方</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>复数的学习</p>
<table>
<thead>
<tr>
<th align="left">函数</th>
<th align="center">说明</th>
<th align="right">函数</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">real(z)</td>
<td align="center">返回复数z的实部</td>
<td align="right">imag(z)</td>
<td align="left">返回复数z的虚部</td>
</tr>
<tr>
<td align="left">abs(z)</td>
<td align="center">返回复数z的模</td>
<td align="right">angle(z)</td>
<td align="left">返回复数z的幅角</td>
</tr>
<tr>
<td align="left">conj(z)</td>
<td align="center">返回复数z的共轭复数</td>
<td align="right">complex(a,b)</td>
<td align="left">以a为实部、b为虚部创建复数</td>
</tr>
</tbody></table>
</li>
</ul>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">z1=<span class="number">3</span>+<span class="number">4</span>*<span class="number">1</span><span class="built_in">i</span>;</span><br><span class="line">z2=<span class="number">1</span>+<span class="number">2</span>*<span class="number">1</span><span class="built_in">i</span>;</span><br><span class="line">z3=<span class="number">2</span>*<span class="built_in">exp</span>(<span class="number">1</span><span class="built_in">i</span>*<span class="built_in">pi</span>/<span class="number">6</span>);z=z1*z2/z3;</span><br><span class="line"></span><br><span class="line">A=[<span class="number">1</span>,<span class="number">2</span>;<span class="number">3</span>,<span class="number">4</span>]+<span class="number">1</span><span class="built_in">i</span>*[<span class="number">5</span>,<span class="number">6</span>;<span class="number">7</span>,<span class="number">8</span>];</span><br><span class="line">B=[<span class="number">1</span>+<span class="number">5</span><span class="built_in">i</span>,<span class="number">2</span>+<span class="number">6</span><span class="built_in">i</span>;<span class="number">3</span>+<span class="number">7</span><span class="built_in">i</span>,<span class="number">4</span>+<span class="number">8</span><span class="built_in">i</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">% 深入</span></span><br><span class="line">fushu1=<span class="number">3</span>+<span class="number">4</span><span class="built_in">i</span>;   </span><br><span class="line"></span><br><span class="line">real1=<span class="built_in">real</span>(fushu1);        <span class="comment">%求复数的实部，结果为3</span></span><br><span class="line"></span><br><span class="line">imag1=<span class="built_in">imag</span>(fushu1);   	   <span class="comment">%求复数的虚部，结果为4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">abs1=<span class="built_in">abs</span>(fushu1);          <span class="comment">%求复数的模,，结果为5</span></span><br><span class="line"> </span><br><span class="line">angle1=<span class="built_in">angle</span>(fushu1);  	   <span class="comment">%求复数的角度，结果0.9273</span></span><br><span class="line"></span><br><span class="line">gonge=<span class="built_in">conj</span>(fushu1);    	   <span class="comment">%求它的共轭复数，结果为3-4i</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%</span></span><br><span class="line">fushuduo=<span class="built_in">complex</span>(<span class="number">1</span>:<span class="number">3</span>,<span class="number">2</span>:<span class="number">4</span>)  <span class="comment">%complex创建复数  实数1-3 虚数2-4              </span></span><br><span class="line"></span><br><span class="line">realduo=<span class="built_in">real</span>(fushuduo)     <span class="comment">%求复数fushuduo的实部，结果为 1     2     3</span></span><br><span class="line"></span><br><span class="line">imagduo=<span class="built_in">imag</span>(fushuduo)     <span class="comment">%求复数fushuduo的虚部，结果为 2     3     4 </span></span><br></pre></td></tr></table></figure>



<h3 id="（2）关系运算符-rand函数用法"><a href="#（2）关系运算符-rand函数用法" class="headerlink" title="（2）关系运算符        rand函数用法"></a>（2）关系运算符        <a href="https://fubaisen.github.io/2022/03/31/MATLAB%E5%AD%A6%E4%B9%A0/%E8%A1%A5%E5%85%85%E6%96%87%E4%BB%B6/08_rand%E5%87%BD%E6%95%B0">rand函数用法</a></h3><p><img src="https://s2.loli.net/2022/03/30/lEjdLe8qbtxwMhD.jpg" alt="f23b667071c0d2fe1496a657de37ade"></p>
<h3 id="（3）逻辑运算符"><a href="#（3）逻辑运算符" class="headerlink" title="（3）逻辑运算符"></a>（3）逻辑运算符</h3><p><strong>逻辑类型的数据类型</strong>是指布尔类型的数据及数据之间的逻辑关系，出现这些运算的目的是为了<strong>提供求解真&#x2F;假命题的答案</strong>。作为所有关系和逻辑表达式的输入，逻辑类型数据类型进行运算时需要用到关系操作符和<strong>逻辑运算符</strong></p>
<p><code>MATLAB</code>把任何非零数值当作真，把零当作假。所有关系和逻辑表达式的输出：</p>
<ul>
<li>对于真，输出为1；对于假，输出为0</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><code>&amp;</code></td>
<td><code>与运算</code></td>
<td></td>
</tr>
<tr>
<td><code>|</code></td>
<td><code>或运算</code></td>
<td></td>
</tr>
<tr>
<td><code>~</code></td>
<td><code>非运算</code></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li><p>若元素为真，则用 <strong>1</strong>表示；若元素为假，则用 <strong>0</strong>表示。</p>
</li>
<li><p>“&amp;” 和 “|”运算符可比较两个标量或两个同阶矩阵</p>
</li>
<li><p>如果A和B都是<code>0-1</code>矩阵，则 A&amp;B或A|B也都是<code>0-1</code>矩阵，且 <code>0-1</code>矩阵是A和B对应元素的逻辑值。逻辑值运算符主要用在条件语句和所以数组索引中</p>
</li>
</ul>
<h2 id="3-数学函数"><a href="#3-数学函数" class="headerlink" title="3.数学函数"></a>3.数学函数</h2><h3 id="（1）常用数学函数"><a href="#（1）常用数学函数" class="headerlink" title="（1）常用数学函数"></a>（1）常用数学函数</h3><p><img src="https://s2.loli.net/2022/03/01/gawv28ClqdJ5tDb.jpg" alt="fe3c24f96baed02ff318e759d7fa9c0"></p>
<h4 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A=<span class="built_in">floor</span>(<span class="built_in">rand</span>(<span class="number">5</span>,<span class="number">4</span>)*<span class="number">10</span>);</span><br><span class="line"><span class="comment">% floor向下取整 向0靠近，最大的那个整数</span></span><br><span class="line"><span class="comment">% 如floor(2.1)=2，floor(2.9)=2,floor(-2.6)=-2</span></span><br><span class="line">a=<span class="built_in">ndims</span>(A);            <span class="comment">% 返回A的维数。m×n矩阵为二维</span></span><br><span class="line">[m,n]=<span class="built_in">size</span>(A);         <span class="comment">% 如果A是二维数组，返回函数和列数</span></span><br><span class="line">c=<span class="built_in">length</span>(A);           <span class="comment">% 返回行、列中的最大值</span></span><br><span class="line">e=nnz(A);              <span class="comment">% 返回A中非0元素的个数</span></span><br><span class="line">Amsx=<span class="built_in">max</span>(A);           <span class="comment">%计算最大值</span></span><br><span class="line">Amin=<span class="built_in">min</span>(A);           <span class="comment">%计算最小值</span></span><br></pre></td></tr></table></figure>

<h3 id="（2）常用三角函数"><a href="#（2）常用三角函数" class="headerlink" title="（2）常用三角函数"></a>（2）常用三角函数</h3><p><img src="https://s2.loli.net/2022/03/28/9sGEdWo7DVhtLku.png" alt="image-20220328135149401"></p>
<h3 id="（3）取整函数"><a href="#（3）取整函数" class="headerlink" title="（3）取整函数"></a>（3）取整函数</h3><p><img src="https://s2.loli.net/2022/03/01/qNDZGAEbS4xTXad.png" alt="image-20220301200840451"></p>
<h4 id="加深取整函数理解"><a href="#加深取整函数理解" class="headerlink" title="加深取整函数理解"></a><a href="https://mp.weixin.qq.com/s/OB4TKgoFEpo8W54W10xE0A">加深取整函数理解</a></h4><ul>
<li><p><strong>floor, 向下取整</strong></p>
</li>
<li><p><strong>ceil，向上取整</strong></p>
</li>
<li><p><strong>round，向最近整数取整，如果是.5，则向绝对值最大的值取整</strong></p>
</li>
<li><p><strong>fix，向0取整</strong></p>
</li>
</ul>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">floor1=<span class="built_in">floor</span>(<span class="number">2.7</span>) 			    <span class="comment">%小于或者等于该数的接近整数，结果为2  </span></span><br><span class="line"></span><br><span class="line">floor2=<span class="built_in">floor</span>(<span class="number">-2.4</span>)  			<span class="comment">%结果为-3</span></span><br><span class="line"></span><br><span class="line">ceil1=<span class="built_in">ceil</span>(<span class="number">4.2</span>)                 <span class="comment">%大于或者等于该数的接近整数，结果为5</span></span><br><span class="line"></span><br><span class="line">ceil2=<span class="built_in">ceil</span>(<span class="number">-4.4</span>)                <span class="comment">%结果为-4</span></span><br><span class="line"></span><br><span class="line">round1=<span class="built_in">round</span>(<span class="number">8.5</span>)       		<span class="comment">%最接近取整，0.5为临界条件，结果为9</span></span><br><span class="line"></span><br><span class="line">round2=<span class="built_in">round</span>(<span class="number">-6.4</span>)     			<span class="comment">%结果为-6</span></span><br><span class="line">	</span><br><span class="line">round3=<span class="built_in">round</span>(<span class="number">-6.5</span>）    			<span class="comment">%结果为-7</span></span><br><span class="line"></span><br><span class="line">fix1=<span class="built_in">fix</span>(<span class="number">-1.6</span>)         			<span class="comment">%向0取整，结果为-1</span></span><br><span class="line"></span><br><span class="line">fix2=<span class="built_in">fix</span>(<span class="number">-1.5</span>)         		<span class="comment">%结果为-1</span></span><br></pre></td></tr></table></figure>



<h2 id="4-转换函数"><a href="#4-转换函数" class="headerlink" title="4.转换函数"></a>4.转换函数</h2><h3 id="（1）常用转换函数"><a href="#（1）常用转换函数" class="headerlink" title="（1）常用转换函数"></a>（1）常用转换函数</h3><p><img src="https://s2.loli.net/2022/03/01/gGkWjMNCOxPrwnR.png" alt="image-20220301201316035"></p>
<h3 id="（2）使用"><a href="#（2）使用" class="headerlink" title="（2）使用"></a>（2）使用</h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x=bin2dec(<span class="string">&#x27;111101&#x27;</span>);</span><br><span class="line">y=dec2bin(<span class="number">61</span>);</span><br><span class="line">z=dec2hex(<span class="number">61</span>);</span><br><span class="line">w=dec2base(<span class="number">61</span>,<span class="number">8</span>);</span><br><span class="line">q=<span class="number">23</span>;sprintf(<span class="string">&#x27;%03d&#x27;</span>,q); <span class="comment">% 建数字转化为字符串，03表示3位数。不足3位的前面补0</span></span><br></pre></td></tr></table></figure>

<h2 id="5-字符串操作函数"><a href="#5-字符串操作函数" class="headerlink" title="5.字符串操作函数"></a>5.字符串操作函数</h2><ul>
<li><h3 id="常见字符串操作函数"><a href="#常见字符串操作函数" class="headerlink" title="常见字符串操作函数"></a>常见字符串操作函数</h3></li>
</ul>
<p><img src="https://s2.loli.net/2022/03/01/he7CzBjNxkMgLRn.png" alt="image-20220301205258635"></p>
<h2 id="6-判断数据类型函数"><a href="#6-判断数据类型函数" class="headerlink" title="6.判断数据类型函数"></a>6.判断数据类型函数</h2><ul>
<li><p><img src="https://s2.loli.net/2022/03/01/s6PgVKnxujSLOEH.png" alt="image-20220301205354257"></p>
</li>
<li><p>&#96;&#96;&#96;matlab<br>P&#x3D;[1 2 1 5];n&#x3D;isreal(P);                % p都是实数<br>p1&#x3D;[1+5i 2+6i 3+7i 4+8i];n1&#x3D;isreal(p1); % p1有非实数<br>x&#x3D;2.34;n2&#x3D;isnumeric(x);                 % x为数值型<br>x1&#x3D;num2str(x);n3&#x3D;isnumeric(x1);         % x1为非数值型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 7.文件操作函数</span><br><span class="line"></span><br><span class="line">- ![21710425a74f371c2e305dd1109b109](https://s2.loli.net/2022/03/28/2oubVjNWiwy841U.jpg)</span><br><span class="line"></span><br><span class="line">- ```matlab</span><br><span class="line">  clear;clc;                    </span><br><span class="line">  fid=fopen(&#x27;filel.dat&#x27;,&#x27;w+&#x27;);  %创建并打开 filel.dat文件</span><br><span class="line">  A=[1:10];                     %创建数组A1~10</span><br><span class="line">  count =fwrite(fid,A);         %将数组A写入文件</span><br><span class="line">  fseek(fid,0,&#x27;bof&#x27;);           %指针指向第1个元素        </span><br><span class="line">  f1=fgets(fid)                 %读取数据到f1</span><br><span class="line">  f1 =sprintf(&#x27;%3d&#x27;,f1)         %输出f1数据 </span><br><span class="line">  fseek(fid,4,&#x27;bof&#x27;);           %指针指向第5个元素</span><br><span class="line">  f2 =fgets(fid)                %读取数据到f2</span><br><span class="line">  f2 =sprintf(&#x27;%3d&#x27; f2)         %输出 f2数据</span><br><span class="line">  Str=[97 99 100];</span><br><span class="line">  strl=sprintf(&#x27;%s&#x27;str);&gt;teaml=&#x27;中国首都&#x27;;</span><br><span class="line">  team2=&#x27;北京&#x27;;</span><br><span class="line">  str2=sprintf(&#x27;%s是%s&#x27;,team1,team2)</span><br><span class="line">  pi=sprintf(&#x27;圆周率pi=%4.2f&#x27;,pi)</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/03/01/9mKzSLoqk8HFDba.png" alt="image-20220301210007135"></p>
</li>
</ul>
<h2 id="8-常用特殊矩阵"><a href="#8-常用特殊矩阵" class="headerlink" title="8.常用特殊矩阵"></a>8.常用特殊矩阵</h2><h3 id="（1）特殊矩阵函数"><a href="#（1）特殊矩阵函数" class="headerlink" title="（1）特殊矩阵函数"></a>（1）特殊矩阵函数</h3><p><img src="https://s2.loli.net/2022/03/01/xZhYk5DdjTAK18P.png" alt="image-20220301210241569"></p>
<h3 id="（2）matlab提取子块操作"><a href="#（2）matlab提取子块操作" class="headerlink" title="（2）matlab提取子块操作"></a>（2）matlab提取子块操作</h3><ul>
<li>A(m,n)                      :提取第m行，第n列元素</li>
<li>A(:,n)                        :提取第n列元素</li>
<li>A(m,:)                       :提取第m行元素</li>
<li>A(m1:m2,n1:n2)    :提取m1行到第m2行和第n1列到第n1列到第n2列的所有元素（提取子块）</li>
<li>A(:)                            :元素按矩阵的1列进行排列的长列矢量</li>
<li>矩阵拓展                   ：如果在原矩阵不存在的地址中设定一个数（赋值），则该矩阵会自动扩展行列数，并在该位置上天界这个数，而且在其他没有指定的位置补零</li>
</ul>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">X=<span class="built_in">zeros</span>(<span class="number">4</span>);   <span class="comment">% 4×4零矩阵</span></span><br><span class="line">Y=<span class="built_in">ones</span>(<span class="number">3</span>,<span class="number">4</span>);  <span class="comment">% 3×4的全一阵</span></span><br><span class="line">Z=<span class="built_in">rand</span>(<span class="number">4</span>,<span class="number">5</span>);  <span class="comment">% 4×5均匀分布的随机矩阵</span></span><br><span class="line"><span class="built_in">true</span>(z);      <span class="comment">% 上三角阵</span></span><br><span class="line">Kmagic(<span class="number">4</span>);    <span class="comment">% 魔方阵必须是方阵</span></span><br><span class="line">L=<span class="built_in">pascal</span>(<span class="number">4</span>);  <span class="comment">% 帕斯卡矩阵必须是方阵</span></span><br></pre></td></tr></table></figure>

<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clc;clear;</span><br><span class="line">L=<span class="built_in">rand</span>(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">A=L(:,<span class="number">1</span>)    <span class="comment">% 矩阵所有行的第一列</span></span><br><span class="line"></span><br><span class="line">B=L(:,<span class="number">1</span>)&#x27;   <span class="comment">% 矩阵L右上角加一短撇（&#x27;）即L&#x27;表示L的转置矩阵——交换L的行列位置（当L为复数矩阵，是共轭转置），因此L(:,1)&#x27;表示将矩阵L的第一列转置，最终就得到了一个行向量</span></span><br><span class="line"></span><br><span class="line">C=L(:,<span class="number">1</span>:<span class="number">3</span>)  <span class="comment">% 2:3代表该维的第2个数第3个数</span></span><br><span class="line"></span><br><span class="line">D=L(:,:,<span class="number">1</span>)  <span class="comment">% 代表第一维、第二维的所有数据，第三维的第一个</span></span><br></pre></td></tr></table></figure>



<h2 id="9-句柄函数"><a href="#9-句柄函数" class="headerlink" title="9.句柄函数"></a>9.<a href="https://fubaisen.github.io/2022/03/31/MATLAB%E5%AD%A6%E4%B9%A0/%E8%A1%A5%E5%85%85%E6%96%87%E4%BB%B6/01_%E5%87%BD%E6%95%B0%E5%8F%A5%E6%9F%84">句柄函数</a></h2><h3 id="（1）MATLAB提供了一个简介访问函数的方式"><a href="#（1）MATLAB提供了一个简介访问函数的方式" class="headerlink" title="（1）MATLAB提供了一个简介访问函数的方式"></a>（1）<strong>MATLAB提供了一个简介访问函数的方式</strong></h3><ul>
<li><p>可以使用函数名实现</p>
</li>
<li><p>可以使用句柄handle函数实现，在已有函数名前加符号@ ，既可创建函数句柄handle</p>
</li>
<li><p>可以提供匿名[nì míng]函数创建一个函数句柄</p>
</li>
</ul>
<h6 id="——创建格式："><a href="#——创建格式：" class="headerlink" title="——创建格式："></a>——创建格式：</h6><p>​		<code>handle=@functionname或:fun1=@functionname</code></p>
<h6 id="——调用格式："><a href="#——调用格式：" class="headerlink" title="——调用格式："></a>——调用格式：</h6><p>​		<code>fun(arg1,arg2,....e,argn);</code></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">sqr=@(x)x.^<span class="number">2</span>;</span><br><span class="line">a=sqr(<span class="number">5</span>);</span><br><span class="line">fun=@(x,y)x.^<span class="number">2</span>+y.^<span class="number">2</span>;</span><br><span class="line">b=fun(<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 结果</span></span><br><span class="line">a=<span class="number">25</span></span><br><span class="line">b=<span class="number">13</span></span><br></pre></td></tr></table></figure>

<h2 id="10-数组表示"><a href="#10-数组表示" class="headerlink" title="10.数组表示"></a>10.<a href="https://fubaisen.github.io/2022/03/31/MATLAB%E5%AD%A6%E4%B9%A0/%E8%A1%A5%E5%85%85%E6%96%87%E4%BB%B6/06_%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B">数组</a>表示</h2><h3 id="（1）结构数组"><a href="#（1）结构数组" class="headerlink" title="（1）结构数组"></a>（1）<a href="https://fubaisen.github.io/2022/03/31/MATLAB%E5%AD%A6%E4%B9%A0/%E8%A1%A5%E5%85%85%E6%96%87%E4%BB%B6/0%E7%BB%93%E6%9E%84%E4%BD%93%E7%B1%BB%E5%9E%8B">结构数组</a></h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">student(<span class="number">1</span>).name =<span class="string">&#x27;Li Ming&#x27;</span>; student(<span class="number">1</span>).course=[<span class="number">10135</span> <span class="number">10096</span>];</span><br><span class="line">student(<span class="number">1</span>)score=[<span class="number">87</span> <span class="number">92</span>];student(<span class="number">2</span>).name=<span class="string">&#x27;Zhang Li&#x27;</span>;</span><br><span class="line">student (<span class="number">2</span>). course =[<span class="number">10135</span> <span class="number">10096</span>]; student (<span class="number">2</span>).score =[<span class="number">82</span> <span class="number">76</span>];</span><br><span class="line">nl =student(<span class="number">1</span>);</span><br><span class="line">n2 =student(<span class="number">2</span>)&gt; student(<span class="number">2</span>).name;</span><br></pre></td></tr></table></figure>

<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 结果:</span></span><br><span class="line">nl =name: <span class="string">&#x27;Li Ming&#x27;</span></span><br><span class="line">course:[<span class="number">10135</span> <span class="number">10096</span>] score:[<span class="number">87</span> <span class="number">92</span>] </span><br><span class="line">n2 =name: <span class="string">&#x27;zhang Li&#x27;</span></span><br><span class="line">course:[<span class="number">10135</span> <span class="number">10096</span>] score:[<span class="number">82</span> <span class="number">76</span>] <span class="built_in">ans</span> =Zhang Li</span><br></pre></td></tr></table></figure>

<p><strong>——可以利用struct结构函数创建结构，其调用格式为：</strong></p>
<p>​				<code>strArray=srtuct(&#39;fielld1&#39;,&#39;vall&#39;,&#39;&#39;field2),val2,...）</code></p>
<p><strong>——其中  “field”   和   val 为  字段  和   对应值</strong></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">stu=struct(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;wangfang&#x27;</span>,<span class="string">&#x27;course&#x27;</span>,[<span class="number">10568</span> <span class="number">10063</span>],<span class="string">&#x27;score&#x27;</span>,[<span class="number">72</span> <span class="number">82</span>])</span><br></pre></td></tr></table></figure>

<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">stu = </span><br><span class="line"></span><br><span class="line">      name: <span class="string">&#x27;wangfang&#x27;</span></span><br><span class="line">    course: [<span class="number">10568</span> <span class="number">10063</span>]</span><br><span class="line">     score: [<span class="number">72</span> <span class="number">82</span>]</span><br></pre></td></tr></table></figure>

<h3 id="（2）细胞数组"><a href="#（2）细胞数组" class="headerlink" title="（2）细胞数组"></a>（2）细胞数组</h3><p><strong>——</strong>细胞（单元）数组是matlab特有的一种数据类型，组成它的的元素是细胞，细胞是用来储存不同类型数据单元。</p>
<p><strong>——</strong>细胞数组中的**<code>每一个细胞储存一种类型的MATLAB数组</code><strong>，此数组中的数据可以是</strong><code>任意 一种matlab 数据类型</code><strong>或用户自定义的类型，其</strong><code>大小</code><strong>也可以是</strong><code>任意</code>**的，相同细胞数组中第二个细胞类型与大小<code>可以</code>和第一细胞完全不同<code>2x2</code>细胞数组结构如图1.6所示。<img src="https://s2.loli.net/2022/03/06/SO4HYyTVtxKNeCj.png" alt="image-20220303204733865"></p>
<p><strong>——</strong>细胞数组可以将不同类型或不同尺寸的数据存储到同一个数组当中。访问单元数组的方法与 矩阵索引方法基本相同，区别在于单元数组索引 时，需要用    <strong>{}</strong>     将下标置于其中。创建单元数组 与创建矩阵基本相同，区别在于矩阵用   <strong>[]</strong>  ，单元数组用    <strong>{}</strong>   </p>
<h6 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h6><ul>
<li>​					创建单元数组(一维):</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a=&#123;[2 4 7;3 9 6;1 8 5],&#x27;Li Ming&#x27;,2+3i,1:2:10&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>​				    对单元数组向量下标赋空值相当于删除单元数组的行或列，删除单元数组的列：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a(:,2)=[];</span><br></pre></td></tr></table></figure>

<ul>
<li><p>​					直接在命令窗输入单元数组名，可显示单元数组的构成单元</p>
<p><img src="https://s2.loli.net/2022/03/29/LEOvUDp2afoM6kV.png" alt="image-20220329135138796"></p>
</li>
<li><p>使用celldisp函数可以显示单元数组</p>
<p><img src="https://s2.loli.net/2022/03/29/R1oPLy5jSQuUVEa.png" alt="image-20220329135302525"></p>
</li>
<li><p>利用索引可以对单元数组进行运算操作</p>
<p><img src="https://s2.loli.net/2022/03/29/Au4HeYLGv6ljKP1.png" alt="image-20220329140005867"></p>
<blockquote>
<p>ps: 书中错误       可能版本不一样</p>
<p><img src="https://s2.loli.net/2022/03/29/EAKD5rOaGx6deXh.png" alt="image-20220329140015508"></p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>01_MATLAB功能和基本应用</category>
      </categories>
      <tags>
        <tag>MATLAB学习</tag>
      </tags>
  </entry>
  <entry>
    <title>04_多项式处理</title>
    <url>/2022/03/31/MATLAB%E5%AD%A6%E4%B9%A0/01_MATLAB%E5%8A%9F%E8%83%BD%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%BA%94%E7%94%A8/04_%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="四、多项式处理"><a href="#四、多项式处理" class="headerlink" title="四、多项式处理"></a>四、多项式处理</h1><p>MATLAB可以把多项式表达成一个行向量，该向量中的元素是按多项式降幂排列的</p>
<p>例如 <img src="https://s2.loli.net/2022/03/29/bfc4aMJIA6LSkjU.png" alt="5ef8818cb7d15f0fdd9f6941447311c.png" style="zoom:50%;" />可用行向量<img src="https://s2.loli.net/2022/03/29/hVMZxftlyre8IAG.png" alt="27951f93bbfa50aec0414baeae5d0a7.png" style="zoom:50%;" />表示</p>
<h2 id="1、多项式的四则远算"><a href="#1、多项式的四则远算" class="headerlink" title="1、多项式的四则远算"></a>1、多项式的四则远算</h2><h4 id="（1）多项式的加减"><a href="#（1）多项式的加减" class="headerlink" title="（1）多项式的加减"></a>（1）多项式的加减</h4><ul>
<li>次数相同：直接对系数向量进行加减运算</li>
<li>次数不同：把低次幂多项式中的系数不足的高次项用0不足<ul>
<li><img src="https://s2.loli.net/2022/03/29/gZ1T36mpncERQzJ.jpg" alt="e0a525dcacad6cf9f86354e90a900c4"></li>
<li>加减运算直接加入加减运算符即可</li>
</ul>
</li>
</ul>
<h3 id="（2）多项式相除"><a href="#（2）多项式相除" class="headerlink" title="（2）多项式相除"></a>（2）多项式相除</h3><p>多项式相除是两个代表多项式的行向量的卷积，两个以上多项式相乘，<code>conv</code>指令使用嵌套，如 <code>conv(conv(a,b),c)</code></p>
<p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">k=conv(p,q)    </span><br><span class="line">[q,r]=deconv(a,b)</span><br></pre></td></tr></table></figure>

<h2 id="2、多项式求根"><a href="#2、多项式求根" class="headerlink" title="2、多项式求根"></a>2、多项式求根</h2><h4 id="（1）求多项式的根-多项式的特征值"><a href="#（1）求多项式的根-多项式的特征值" class="headerlink" title="（1）求多项式的根(多项式的特征值)"></a>（1）求多项式的根(多项式的特征值)</h4><ul>
<li><p>语法格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">r=roots(p)</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用roots命令可以求出多项式的根，即命令可以用于求高次方程的解，根用列向量表示</p>
</li>
</ul>
<h4 id="（2）求特征多项式的根"><a href="#（2）求特征多项式的根" class="headerlink" title="（2）求特征多项式的根"></a>（2）求特征多项式的根</h4><ul>
<li><p>若已知多项式的根，即可以使用poly命令求出相应多项式系数</p>
</li>
<li><p>语法格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p=ploy(r)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>特征多项式一定是n+1维的而且特征对象时第一个元素一定是1</p>
</blockquote>
</li>
</ul>
<p>例：求方程 <img src="https://s2.loli.net/2022/04/07/Cfy4BZparvnciYU.jpg" style="zoom:33%;" />的根，并根据根构造多项式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p=[1 -12 0 25 116];</span><br><span class="line">r=roots(p);</span><br><span class="line">p=poly(r);</span><br></pre></td></tr></table></figure>

<h4 id="（3）多项式求导"><a href="#（3）多项式求导" class="headerlink" title="（3）多项式求导"></a>（3）多项式求导</h4><ul>
<li><p>语法格式</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">k=polyder(p);          <span class="comment">% 返回多项式p的一阶导数系数</span></span><br><span class="line">k=polyder(p,q);        <span class="comment">% 返回多项式p与q成绩的一阶导数系数</span></span><br><span class="line">[k,d]=polyder(p,q);    <span class="comment">% 返回p/q的导数，k是分子,d是分母</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="4、多项式求解"><a href="#4、多项式求解" class="headerlink" title="4、多项式求解"></a>4、多项式求解</h2><h4 id="（1）计算多项式数值解"><a href="#（1）计算多项式数值解" class="headerlink" title="（1）计算多项式数值解"></a>（1）计算多项式数值解</h4><ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">polyval(p,x)            <span class="comment">% 返回多项式p在n点的值</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="（2）多项式拟合"><a href="#（2）多项式拟合" class="headerlink" title="（2）多项式拟合"></a>（2）多项式拟合</h4><ul>
<li><p>​	语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">y=polyfit(x,y,n)        <span class="comment">% 拟合唯一确定n阶多项式的系数</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>其中   <strong>n</strong>   表示多项式的最高阶数;</p>
</li>
<li><p>x  ,  y  为将要拟合的数据</p>
</li>
</ul>
<p>  它是用数组的方式输入，输入参数 y 为拟合多项式 <img src="https://s2.loli.net/2022/03/30/Fyts7N5mEzXKoqJ.jpg" alt="e39dd900cfcd8a061d7daeedfe91ec0" style="zoom: 33%;" />共n+1个系数</p>
<ul>
<li>polyfit 函数只适合于形如 <img src="https://s2.loli.net/2022/03/30/VzCbUQ1plLIAG7F.jpg" style="zoom:33%;" />的完全的医院多项式的数据拟合</li>
</ul>
<p>例：<img src="https://s2.loli.net/2022/03/30/8YskEKT612pLoOr.jpg" alt="2b1d7055c15c4bdc7dca64e8caf2968"></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">p=[<span class="number">3</span> <span class="number">8</span> <span class="number">18</span> <span class="number">16</span> <span class="number">15</span>];</span><br><span class="line">p=polyval(p,<span class="number">2</span>);</span><br><span class="line">x=<span class="number">0</span>:<span class="number">0.1</span>:<span class="number">1</span>;</span><br><span class="line">y=[<span class="number">-0.447</span> <span class="number">1.978</span> <span class="number">4.28</span> <span class="number">6.16</span> <span class="number">7.08</span> <span class="number">7.34</span> <span class="number">7.66</span> <span class="number">9.56</span> <span class="number">9.48</span> <span class="number">9.30</span> <span class="number">11.2</span>];</span><br><span class="line">y1=polyfit(x,y,<span class="number">2</span>);</span><br><span class="line">z=polyval(y1,x);</span><br><span class="line"><span class="built_in">plot</span>(x,y,<span class="string">&#x27;r*&#x27;</span>,x,z,<span class="string">&#x27;b-&#x27;</span>)      <span class="comment">% 绘图</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>plot(x,y,&#39;r*&#39;,x,z,&#39;b-&#39;)</code> 效果</p>
<p><img src="https://s2.loli.net/2022/03/30/HioQNEbByR6CVp1.png" alt="image-20220330154117654"></p>
</blockquote>
]]></content>
      <categories>
        <category>01_MATLAB功能和基本应用</category>
      </categories>
      <tags>
        <tag>MATLAB学习</tag>
      </tags>
  </entry>
  <entry>
    <title>05_空间向量表示</title>
    <url>/2022/03/31/MATLAB%E5%AD%A6%E4%B9%A0/01_MATLAB%E5%8A%9F%E8%83%BD%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%BA%94%E7%94%A8/05_%E7%A9%BA%E9%97%B4%E5%90%91%E9%87%8F%E8%A1%A8%E7%A4%BA/</url>
    <content><![CDATA[<h1 id="五、空间向量表示"><a href="#五、空间向量表示" class="headerlink" title="五、空间向量表示"></a>五、空间向量表示</h1><p>1.用线性等间距生成向量矩阵</p>
<ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">（start:step:<span class="keyword">end</span>）</span><br></pre></td></tr></table></figure>

<p>其中 <strong>start</strong> 为起始值，<strong>step</strong>为步长，<strong>end</strong>为终止值</p>
<p>当步长为<strong>1</strong>时可省略 <strong>step</strong> 参数，<strong>step</strong>  也可以去负数</p>
</li>
<li><p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">5</span>:<span class="number">-0.5</span>:<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>结果：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a =</span><br><span class="line"></span><br><span class="line">  列 <span class="number">1</span> 至 <span class="number">6</span></span><br><span class="line"></span><br><span class="line">    <span class="number">5.0000</span>    <span class="number">4.5000</span>    <span class="number">4.0000</span>    <span class="number">3.5000</span>    <span class="number">3.0000</span>    <span class="number">2.5000</span></span><br><span class="line"></span><br><span class="line">  列 <span class="number">7</span> 至 <span class="number">9</span></span><br><span class="line"></span><br><span class="line">    <span class="number">2.0000</span>    <span class="number">1.5000</span>    <span class="number">1.0000</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<p>2.线性及对数空间表示</p>
<p>（1）线性空间表示</p>
<ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">linspace</span>(n1,n2,n)</span><br></pre></td></tr></table></figure>

<p>在线性空间上，行矢量的值从<strong>n1</strong> 到 <strong>n2</strong> ,等分位数为 <strong>n</strong> ，默认 <strong>n</strong> 为 <strong>100</strong></p>
</li>
<li><p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a=<span class="built_in">linspace</span>(<span class="number">1</span>,<span class="number">10</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>结果：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span>     <span class="number">4</span>     <span class="number">5</span>     <span class="number">6</span>     <span class="number">7</span>     <span class="number">8</span>     <span class="number">9</span>    <span class="number">10</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>（2）对数空间表示</p>
<ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">logspace</span>(n1,n2,n)</span><br></pre></td></tr></table></figure>

<p>在对数空间上，行矢量的值从 <img src="https://s2.loli.net/2022/03/30/EFl14Djn8dBPg5e.jpg" alt="f73e8a647c47500456bbf2b6f625a93" style="zoom:33%;" />，数据个数为<strong>n</strong> ，默认 <strong>n</strong>为50 </p>
<p>这个指令为建立对数领域轴坐标</p>
</li>
<li><p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a=<span class="built_in">logspace</span>(<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a =</span><br><span class="line"></span><br><span class="line">          10         100        1000       10000</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>01_MATLAB功能和基本应用</category>
      </categories>
      <tags>
        <tag>MATLAB学习</tag>
      </tags>
  </entry>
  <entry>
    <title>02_程序结构</title>
    <url>/2022/04/01/MATLAB%E5%AD%A6%E4%B9%A0/02_MATLAB%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/02_%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="二、程序的结构"><a href="#二、程序的结构" class="headerlink" title="二、程序的结构"></a>二、程序的结构</h1><p><strong>MATLAB的流程控制分为： 书序结构、选择结构、循环结构</strong></p>
<h2 id="1、顺序结构"><a href="#1、顺序结构" class="headerlink" title="1、顺序结构"></a>1、顺序结构</h2><p>顺序结构是指按照程序中语句的排列的顺序依次执行程序<img src="https://s2.loli.net/2022/04/01/bhZvlPSEMoR8Wgz.jpg" alt="d0934be79b83bd61ad86b20fe247fa7" style="zoom: 25%;" /></p>
<ul>
<li><p>例：已知三角形分别为a&#x3D;4.5 ,b&#x3D;5.7 ,c&#x3D;2.3 ,求三角形周长和面积</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear;</span><br><span class="line">a=a=<span class="number">4.5</span>;b=<span class="number">5.7</span>;c=<span class="number">2.3</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2、选择结构"><a href="#2、选择结构" class="headerlink" title="2、选择结构"></a>2、选择结构</h2><h4 id="（1）单分支选择机构"><a href="#（1）单分支选择机构" class="headerlink" title="（1）单分支选择机构"></a>（1）单分支选择机构</h4><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>     条件</span><br><span class="line">	   语句A</span><br><span class="line"><span class="keyword">else</span>   执行语句B</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p> 说明：当条件成立时，执行语句A,否则执行语句B</p>
<p>​				单分支结构如图所示</p>
</blockquote>
<p><img src="https://s2.loli.net/2022/04/01/sRQ21L6A9nXE5Ya.jpg" alt="1fa75f9415df2fa409a2986f8e8f315"></p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x=input(<span class="string">&#x27;亲输入x的值：&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> x==<span class="number">10</span></span><br><span class="line">    y=<span class="built_in">cos</span>(x+<span class="number">1</span>)+<span class="built_in">sqrt</span>(x*x+<span class="number">1</span>);         <span class="comment">% sqrt是平方根函数</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    y=x*<span class="built_in">sqrt</span>(x+<span class="built_in">sqrt</span>(x));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;x=&#x27;</span>,num2str(x)]);            <span class="comment">% num2str 将一个数值转换为字符串</span></span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;y=&#x27;</span>,num2str(y)]);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="（2）条件嵌套结构"><a href="#（2）条件嵌套结构" class="headerlink" title="（2）条件嵌套结构"></a>（2）条件嵌套结构</h4><ul>
<li>语法格式：</li>
</ul>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (表达式)</span><br><span class="line">    <span class="keyword">if</span>(表达式<span class="number">1</span>) 语句 A1</span><br><span class="line">    <span class="keyword">else</span> 语句 A2</span><br><span class="line">    <span class="keyword">elseif</span>(条件<span class="number">2</span>) 语句 B1</span><br><span class="line">    <span class="keyword">else</span> 语句B2</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/04/01/7KtMaPmX6lvBILj.jpg" alt="71b8cd1c2ec436154ca8dfffb769801"></p>
<ul>
<li><p>例：</p>
<p>输入一个字符，要求：</p>
<p>​				若为大写字母，则输出其对应的小写字母；</p>
<p>​				若为小写字母，则输出其对应的大写字母；</p>
<p>​				若为数字字符，则输出其对应的数值；</p>
<p>​				若为其他字符，则原样输出</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">c=input(<span class="string">&#x27;请输入一个字符&#x27;</span>,<span class="string">&#x27;s&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> c&gt;=<span class="string">&#x27;A&#x27;</span>&amp;c&lt;=<span class="string">&#x27;Z&#x27;</span></span><br><span class="line">    <span class="built_in">disp</span>(setstr(<span class="built_in">abs</span>(c)+<span class="built_in">abs</span>(<span class="string">&#x27;a&#x27;</span>)-<span class="built_in">abs</span>(<span class="string">&#x27;A&#x27;</span>)));  <span class="comment">% setstr() 将ASCII码值转换成字符</span></span><br><span class="line"><span class="keyword">elseif</span> c&gt;=<span class="string">&#x27;a&#x27;</span>&amp;c&lt;=<span class="string">&#x27;z&#x27;</span></span><br><span class="line">    <span class="built_in">disp</span>(setstr(<span class="built_in">abs</span>(c)-<span class="built_in">abs</span>(<span class="string">&#x27;a&#x27;</span>)+<span class="built_in">abs</span>(<span class="string">&#x27;A&#x27;</span>)))</span><br><span class="line"><span class="keyword">elseif</span> c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;c&lt;=<span class="string">&#x27;9&#x27;</span></span><br><span class="line">    <span class="built_in">disp</span>(<span class="built_in">abs</span>(c)-<span class="built_in">abs</span>(<span class="string">&#x27;0&#x27;</span>))</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">disp</span>(c)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>例：</p>
<p>某商场对骨结构买的商品实行打折销售，标准如下（商品价格用 <strong>price</strong> 表示）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">price&lt;200       没有折扣 </span><br><span class="line">200≤price&lt;500   3%折扣 </span><br><span class="line">500≤price&lt;1000  5%折扣 </span><br><span class="line">1000≤price&lt;2500 8%折扣 </span><br><span class="line">2500≤orice&lt;5000 10%折扣 </span><br><span class="line">5000≤price      15%折扣</span><br></pre></td></tr></table></figure>

<p>要求输入所售善品价格，输出其实际销售价格</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">price=input(<span class="string">&#x27;请输入商品价格&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> price&gt;=<span class="number">200</span>&amp;price &lt;<span class="number">500</span>			 <span class="comment">%价格大于等于200但小干500 </span></span><br><span class="line">	price=price*(<span class="number">1</span><span class="number">-3</span>/<span class="number">100</span>);</span><br><span class="line"><span class="keyword">elseif</span> price&gt;=<span class="number">500</span>&amp;price&lt;<span class="number">1000</span> 		 <span class="comment">%价格大于等于500但小于1000 </span></span><br><span class="line">	price=price*(<span class="number">1</span><span class="number">-5</span>/<span class="number">100</span>);</span><br><span class="line"><span class="keyword">elseif</span> price&gt;=<span class="number">1000</span>&amp;price&lt;<span class="number">2500</span>		 <span class="comment">%价格大于等于1000但小于2500 </span></span><br><span class="line">	price=price*(<span class="number">1</span><span class="number">-8</span>/<span class="number">100</span>);</span><br><span class="line"><span class="keyword">elseif</span> price&gt;=<span class="number">2500</span>&amp;price&lt;<span class="number">5000</span> 		 <span class="comment">%价格大于等于2500但小于5000 </span></span><br><span class="line">	price=price*(<span class="number">1</span><span class="number">-10</span>/<span class="number">100</span>); </span><br><span class="line"><span class="keyword">elseif</span> price&gt;=<span class="number">5000</span> 				 	 <span class="comment">%价格大于等于5000 </span></span><br><span class="line">	price=price*(<span class="number">1</span><span class="number">-14</span>/<span class="number">100</span>); </span><br><span class="line"><span class="keyword">else</span> 								 <span class="comment">%价格小于200 </span></span><br><span class="line">	price =price; </span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line">	price</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="（3）多分支选择结构"><a href="#（3）多分支选择结构" class="headerlink" title="（3）多分支选择结构"></a>（3）多分支选择结构</h4><p>多分支结构也称为多开关选择结构</p>
<ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> 表达式（标量或字符串）</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span></span><br><span class="line">        语句<span class="number">1</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span></span><br><span class="line">        语句<span class="number">2</span></span><br><span class="line">    <span class="keyword">case</span> n</span><br><span class="line">        语句n</span><br><span class="line">    <span class="keyword">otherwise</span></span><br><span class="line">        语句n+<span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：</p>
<ul>
<li>在执行时，只执行一个<code>case</code>后的语句就会跳出<code>switch-case</code>结构</li>
<li>case子句后面的表达式不仅可以为一个标量或一个字符串,还可以为一个单元矩阵</li>
<li>如果<code>case</code>子语句后面的表达式为一个<a href="https://fubaisen.github.io/2022/03/31/MATLAB%E5%AD%A6%E4%B9%A0/%E8%A1%A5%E5%85%85%E6%96%87%E4%BB%B6/11_%E5%8A%A0%E6%B7%B1%E7%90%86%E8%A7%A3%E5%8D%95%E5%85%83%E7%9F%A9%E9%98%B5%E5%92%8C%E7%BB%93%E6%9E%84%E7%9F%A9%E9%98%B5">单元矩阵</a>，则当表达式的值等于该单元矩阵中的某个元素时，执行相应的语句组case后常量的值必须互异</li>
<li><code>otherwise</code>为可选项，如果表达式的值与列出的每种情况都不相等，则<code>switch-case</code>结构中的语句将不被执行，程序继续向下运行。</li>
</ul>
</blockquote>
</li>
</ul>
<p><img src="https://s2.loli.net/2022/04/01/pbC4DgUno82MEqJ.jpg" alt="1ff38a4048d3592905ceb80f5f59a4b"></p>
<ul>
<li><p>例：针对上一个例子，使用多分支选择结构，重新编写程序。</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">price=input(<span class="string">&#x27;请输入商品价格&#x27;</span>);</span><br><span class="line"><span class="keyword">switch</span> <span class="built_in">fix</span>(price/<span class="number">100</span>)                   <span class="comment">% fix向0靠拢取整</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">case</span>&#123;<span class="number">0</span>,<span class="number">1</span>&#125;                           <span class="comment">% 价格小于200</span></span><br><span class="line">        rate=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">case</span>&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;                         <span class="comment">% 价格大于等于200，但小于500</span></span><br><span class="line">        rate=<span class="number">3</span>/<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="built_in">num2cell</span>(<span class="number">2</span>:<span class="number">9</span>)                  <span class="comment">% 价格大于等于500，但小于1000</span></span><br><span class="line">        rate=<span class="number">5</span>/<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="built_in">num2cell</span>(<span class="number">10</span>:<span class="number">24</span>)                <span class="comment">% 价格大于等于1000，但小于2500</span></span><br><span class="line">        rate=<span class="number">8</span>/<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="built_in">num2cell</span>(<span class="number">25</span>:<span class="number">49</span>)                <span class="comment">% 价格大于等于2500,但小于5000</span></span><br><span class="line">        rate=<span class="number">10</span>/<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">otherwise</span>                           <span class="comment">% 价格大于等于5000</span></span><br><span class="line">        rate=<span class="number">14</span>/<span class="number">100</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">price=price*(<span class="number">1</span>-rate)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3、循环结构"><a href="#3、循环结构" class="headerlink" title="3、循环结构"></a>3、循环结构</h2><p>循环结构是指当前条件满足时被重复执行的一组语句。使用循环结构是计算机解决问题的主要手段之一</p>
<p>循环结构体如图所示<img src="https://s2.loli.net/2022/04/01/XjMomdb6DNqHpLl.png" alt="image-20220401132821210" style="zoom:33%;" /></p>
<h4 id="（1）while循环"><a href="#（1）while循环" class="headerlink" title="（1）while循环"></a>（1）while循环</h4><ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件表达式</span><br><span class="line">    循环体</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：</p>
<ul>
<li>表达式一般由<code>逻辑运算</code>、<code>关系运算</code>以及<code>一般运算</code>组成，用于判断循环的进行或停止。</li>
<li>表达式的值可以是标量或数组，其余的所有元素为 <strong>1（真）</strong>则继续循环，直到表达式值的某元素为0（假）时停止。</li>
</ul>
</blockquote>
</li>
<li><p>例：求      **n！    &lt;    **10^50   的最大值 n  ,并输出在该值下n！</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">r=<span class="number">1</span>;k=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> r&lt;<span class="number">1e50</span>         <span class="comment">% 在matlab中,e代表10的多少次方,后面接的是幂指数</span></span><br><span class="line">    r=r*k;k=k+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">k=k<span class="number">-1</span>;r=r./k;k=k<span class="number">-1</span>;</span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;The &#x27;</span>,num2str(k),<span class="string">&#x27;! is &#x27;</span>,num2str(r)]);</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="（2）for循环语句"><a href="#（2）for循环语句" class="headerlink" title="（2）for循环语句"></a>（2）for循环语句</h4><ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> 循环变量=表达式<span class="number">1</span>：表达式<span class="number">2</span>：表达式<span class="number">3</span></span><br><span class="line">	循环体</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：</p>
<ul>
<li><code>表达式1</code>为起始值；<code>表达式2</code>为步长，<code>步长为1</code>时，可以省略；<code>表达式3</code>位终值</li>
<li>在每一次循环中，循环变量值被指定为数组的下一列，循环语句按数组中的每一个列执行一次，常以固定的或预定的次数循环</li>
</ul>
</blockquote>
</li>
<li><p>例；已知 4×3 矩阵<img src="https://s2.loli.net/2022/04/01/W12umzYLO7AJSaV.jpg" alt="3ce9c508a7722454d51f7eb997fd093.jpg" style="zoom:33%;" />，求矩阵对应列元素的和s1、对应元素的和s2 及整个矩阵元素的和s</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clc;s1=<span class="number">0</span>;</span><br><span class="line">data=[<span class="number">12</span> <span class="number">14</span> <span class="number">14</span>;<span class="number">15</span> <span class="number">16</span> <span class="number">17</span>;<span class="number">18</span> <span class="number">19</span> <span class="number">20</span>;<span class="number">21</span> <span class="number">22</span> <span class="number">23</span>];</span><br><span class="line"><span class="keyword">for</span> k=data</span><br><span class="line">    s1=s1+k;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">s1</span><br><span class="line">s2=sum(data)</span><br><span class="line">s=sum(sum(data))       </span><br></pre></td></tr></table></figure>

<p><a href="https://fubaisen.github.io/2022/03/31/MATLAB%E5%AD%A6%E4%B9%A0/%E8%A1%A5%E5%85%85%E6%96%87%E4%BB%B6/09_sum%E5%87%BD%E6%95%B0">关于sum</a></p>
</li>
<li><p>例：已知若一个三位整数，<code>各位数字的立方和等于该数本身</code>，则称该数为水仙花数。要求输出100~999的全部水仙花数</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> m=<span class="number">100</span>:<span class="number">999</span></span><br><span class="line">    m1=<span class="built_in">fix</span>(m/<span class="number">100</span>);                           <span class="comment">% 求m的百位数字</span></span><br><span class="line">    m2=<span class="built_in">rem</span>(<span class="built_in">fix</span>(m/<span class="number">100</span>),<span class="number">10</span>);                   <span class="comment">% 求m的十位数字</span></span><br><span class="line">    m3=<span class="built_in">rem</span>(m,<span class="number">10</span>);                            <span class="comment">% 求m的个位数字</span></span><br><span class="line">    <span class="keyword">if</span> m == m1*m1*m1+m2*m2*m2+m3*m3*m3</span><br><span class="line">        <span class="built_in">disp</span>(m);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>例：试编写循环结构程序会出多个不同中心的圆</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">0</span>:<span class="built_in">pi</span>/<span class="number">50</span>:<span class="number">2</span>*<span class="built_in">pi</span>     <span class="comment">% 循环变量</span></span><br><span class="line">    x=<span class="number">2</span>*<span class="built_in">sin</span>(<span class="built_in">i</span>);</span><br><span class="line">    y=<span class="number">2</span>*<span class="built_in">cos</span>(<span class="built_in">i</span>);      <span class="comment">% 圆心位置</span></span><br><span class="line">    t=<span class="number">0</span>:<span class="built_in">pi</span>/<span class="number">100</span>:<span class="number">2</span>*<span class="built_in">pi</span>;</span><br><span class="line">    xx=x+<span class="built_in">sin</span>(t);yy=y+<span class="built_in">cos</span>(t);</span><br><span class="line">    <span class="built_in">plot</span>(xx,yy);     <span class="comment">% 圆心</span></span><br><span class="line">    <span class="built_in">hold</span> on;         <span class="comment">% 保留圆形</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>！！！</p>
<h5 id="深度学习for循环"><a href="#深度学习for循环" class="headerlink" title="深度学习for循环"></a><strong>深度学习for循环</strong></h5><p>！！！</p>
<h6 id="1）简单的for循环"><a href="#1）简单的for循环" class="headerlink" title="1）简单的for循环"></a>1）简单的for循环</h6><p>for循环用来循环处理数据。<br>例：输出1~100的和</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear</span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="number">100</span></span><br><span class="line">    sum = sum +<span class="built_in">i</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">sum</span><br><span class="line"></span><br><span class="line">sum =</span><br><span class="line"></span><br><span class="line">        <span class="number">5050</span></span><br></pre></td></tr></table></figure>

<p>解释：i从1到100，每次增加一个，该共循环100次<br>注意：分号的位置；不能使用“+&#x3D;”符号；每写一层循环，必须以end结尾</p>
<h6 id="2）带有步长的for循环"><a href="#2）带有步长的for循环" class="headerlink" title="2）带有步长的for循环"></a>2）带有步长的for循环</h6><p>例：输出1到10之间的奇数和</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear</span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="number">2</span>:<span class="number">10</span></span><br><span class="line">    sum = sum + <span class="built_in">i</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">sum</span><br><span class="line"></span><br><span class="line">sum =</span><br><span class="line"></span><br><span class="line">    <span class="number">25</span></span><br></pre></td></tr></table></figure>

<p>解释：i &#x3D; 1:2:10中间的2表示步长，表示从1到10，每次增加2，即1，3，5，7，9五个数之和；步长也可以为负数</p>
<h6 id="3）对向量的遍历"><a href="#3）对向量的遍历" class="headerlink" title="3）对向量的遍历"></a>3）对向量的遍历</h6><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; clear</span><br><span class="line">&gt;&gt; A = <span class="built_in">rand</span>(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">&gt;&gt; <span class="keyword">for</span> <span class="built_in">i</span> = A</span><br><span class="line">       <span class="built_in">i</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line">&gt;&gt; A</span><br><span class="line"></span><br><span class="line"><span class="built_in">i</span> =</span><br><span class="line"></span><br><span class="line">    <span class="number">0.9572</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">i</span> =</span><br><span class="line"></span><br><span class="line">    <span class="number">0.4854</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">i</span> =</span><br><span class="line"></span><br><span class="line">    <span class="number">0.8003</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">i</span> =</span><br><span class="line"></span><br><span class="line">    <span class="number">0.1419</span></span><br><span class="line">    </span><br><span class="line">A =</span><br><span class="line"></span><br><span class="line">    <span class="number">0.9575</span>    <span class="number">0.9649</span>    <span class="number">0.1576</span>    <span class="number">0.9706</span></span><br></pre></td></tr></table></figure>

<p>解释：rand函数用于随机生成0~1之间的数，rand(1,4)生成1*4的列向量。对向量的循环遍历是依次<code>取出向量中的每一个元素</code></p>
<h6 id="4）对矩阵的遍历"><a href="#4）对矩阵的遍历" class="headerlink" title="4）对矩阵的遍历"></a>4）对矩阵的遍历</h6><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A = <span class="built_in">magic</span>(<span class="number">4</span>);</span><br><span class="line">&gt;&gt; A</span><br><span class="line"></span><br><span class="line">A =</span><br><span class="line"></span><br><span class="line">    <span class="number">16</span>     <span class="number">2</span>     <span class="number">3</span>    <span class="number">13</span></span><br><span class="line">     <span class="number">5</span>    <span class="number">11</span>    <span class="number">10</span>     <span class="number">8</span></span><br><span class="line">     <span class="number">9</span>     <span class="number">7</span>     <span class="number">6</span>    <span class="number">12</span></span><br><span class="line">     <span class="number">4</span>    <span class="number">14</span>    <span class="number">15</span>     <span class="number">1</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; <span class="keyword">for</span> <span class="built_in">i</span> = A;</span><br><span class="line">       <span class="built_in">i</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">i</span> =</span><br><span class="line"></span><br><span class="line">    <span class="number">16</span></span><br><span class="line">     <span class="number">5</span></span><br><span class="line">     <span class="number">9</span></span><br><span class="line">     <span class="number">4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">i</span> =</span><br><span class="line"></span><br><span class="line">     <span class="number">2</span></span><br><span class="line">    <span class="number">11</span></span><br><span class="line">     <span class="number">7</span></span><br><span class="line">    <span class="number">14</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">i</span> =</span><br><span class="line"></span><br><span class="line">     <span class="number">3</span></span><br><span class="line">    <span class="number">10</span></span><br><span class="line">     <span class="number">6</span></span><br><span class="line">    <span class="number">15</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">i</span> =</span><br><span class="line"></span><br><span class="line">    <span class="number">13</span></span><br><span class="line">     <span class="number">8</span></span><br><span class="line">    <span class="number">12</span></span><br><span class="line">     <span class="number">1</span></span><br></pre></td></tr></table></figure>


<p>解释：magic(n)函数用于生成任意一行或一列或主副对角线之和相等的方阵，对矩阵的循环遍历是依次<code>取出矩阵中的每一列元素</code></p>
<h6 id="5）break和continue的使用"><a href="#5）break和continue的使用" class="headerlink" title="5）break和continue的使用"></a>5）break和continue的使用</h6><p>break用于终止离它最近的一层for循环；<br>continue用于跳过离它最近的一层for循环，接着执行下一次循环</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; x = <span class="number">1</span>;</span><br><span class="line">&gt;&gt; <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="number">2</span>:<span class="number">10</span></span><br><span class="line">       <span class="keyword">if</span> <span class="built_in">i</span> &gt; <span class="number">7</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">          x = x* <span class="built_in">i</span></span><br><span class="line">       <span class="keyword">end</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">x =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x =</span><br><span class="line"></span><br><span class="line">     <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x =</span><br><span class="line"></span><br><span class="line">    <span class="number">15</span>		<span class="comment">% 3×5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x =</span><br><span class="line"></span><br><span class="line">   <span class="number">105</span>		<span class="comment">% 15×7</span></span><br></pre></td></tr></table></figure>

<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; sum = <span class="number">0</span>;</span><br><span class="line">&gt;&gt; <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="number">6</span></span><br><span class="line">       <span class="keyword">if</span> <span class="built_in">i</span> == <span class="number">4</span></span><br><span class="line">          <span class="keyword">continue</span></span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">          sum = sum + <span class="built_in">i</span></span><br><span class="line">       <span class="keyword">end</span></span><br><span class="line">   <span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line">sum =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sum =</span><br><span class="line"></span><br><span class="line">     <span class="number">3</span>		<span class="comment">% 1+2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sum =</span><br><span class="line"></span><br><span class="line">     <span class="number">6</span>		<span class="comment">% 3+3</span></span><br><span class="line">     </span><br><span class="line"><span class="comment">% i=4 continue 跳出 不执行 else下方语句 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sum =</span><br><span class="line"></span><br><span class="line">    <span class="number">11</span>		<span class="comment">% 6+5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sum =</span><br><span class="line"></span><br><span class="line">    <span class="number">17</span>		<span class="comment">% 11+6</span></span><br></pre></td></tr></table></figure>

<h6 id="6）多层for循环"><a href="#6）多层for循环" class="headerlink" title="6）多层for循环"></a>6）多层for循环</h6><p>for循环可以按照需要进行嵌套。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="number">2</span>:<span class="number">6</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span>:<span class="number">3</span></span><br><span class="line">        y = <span class="built_in">i</span> * <span class="built_in">j</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">y =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">y =</span><br><span class="line"></span><br><span class="line">     <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">y =</span><br><span class="line"></span><br><span class="line">     <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">y =</span><br><span class="line"></span><br><span class="line">     <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">y =</span><br><span class="line"></span><br><span class="line">     <span class="number">6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">y =</span><br><span class="line"></span><br><span class="line">     <span class="number">9</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">y =</span><br><span class="line"></span><br><span class="line">     <span class="number">5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">y =</span><br><span class="line"></span><br><span class="line">    <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">y =</span><br><span class="line"></span><br><span class="line">    <span class="number">15</span></span><br></pre></td></tr></table></figure>

<h4 id="（3）break语句和continue语句"><a href="#（3）break语句和continue语句" class="headerlink" title="（3）break语句和continue语句"></a>（3）break语句和continue语句</h4><p><code>break语句用于终止循环，当在循环体内执行到该语句时，程序将跳出循环，继续执行循环的下语句</code></p>
<p><code>Ccontinue语句控制跳出循环中的某些语句，当在循环体内执行到该语句时，程序将跳出循环体中所有剩下的语句,继续下一次循环</code></p>
<p><code>continue，break与if语句连用常用于for或while循环语句中</code></p>
<ul>
<li><p>例：求100~200之间能被21整除的最小整数。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> n=<span class="number">100</span>:<span class="number">200</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">rem</span>(n,<span class="number">21</span>)~=<span class="number">0</span>  <span class="comment">% rem函数是两个数相除之后的余数</span></span><br><span class="line">        <span class="keyword">continue</span>     <span class="comment">% 重新循环</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    n</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>rem<a href="https://blog.csdn.net/jk_101/article/details/110815016?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_ecpm_v1~rank_v31_ecpm-1-110815016.pc_agg_new_rank&utm_term=matlab%E4%B8%ADrem%E7%9A%84%E4%BD%BF%E7%94%A8&spm=1000.2123.3001.4430">使用</a></p>
</li>
<li><p>例：编写一个猜数小游戏，要求输入一个100以内的整数，允许用户猜十次。每次猜的结果由程序发出反馈。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a=randperm(<span class="number">100</span>,<span class="number">1</span>);   <span class="comment">% 产生一个100以内的随机整数</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">5</span></span><br><span class="line">    b=input(<span class="string">&#x27;请输入一个数:\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> b&gt;a</span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;太大了&#x27;</span>);</span><br><span class="line">    <span class="keyword">elseif</span> b==a</span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;猜对了，这真牛逼&#x27;</span>);</span><br><span class="line">    <span class="keyword">elseif</span> b&lt;a</span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;太小了&#x27;</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">fprintf(<span class="string">&#x27;正确答案是 %d\n&#x27;</span>,<span class="built_in">i</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="（4）循环嵌套语句"><a href="#（4）循环嵌套语句" class="headerlink" title="（4）循环嵌套语句"></a>（4）循环嵌套语句</h4><p><strong>循环中还包括循环称为循环嵌套，常用格如图所示</strong></p>
<p><img src="https://s2.loli.net/2022/04/01/ptAMoyRrvzYZlhV.jpg" alt="1976323b9b568ac0411db709c7f1978"></p>
<ul>
<li><p>例：一只苹果三元，一个香蕉一元，一离0.85元一个，要求用100元买这三种水果。共100格，每种水果最少买五个，问有多少买法？可以买多少个？输出全部购买方案。</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clc;n=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> apple=<span class="number">5</span>:<span class="number">33</span></span><br><span class="line">    <span class="keyword">for</span> banana=<span class="number">5</span>:<span class="number">100</span></span><br><span class="line">        <span class="keyword">for</span> pear=<span class="number">5</span>:<span class="number">125</span></span><br><span class="line">            <span class="keyword">if</span> (apple*<span class="number">3</span> +banana+pear*<span class="number">0.8</span>==<span class="number">100</span>)&amp;(apple+banana+pear ==<span class="number">100</span>)</span><br><span class="line">                <span class="built_in">disp</span>([<span class="string">&#x27;第&#x27;</span>,num2str(n+<span class="number">1</span>),<span class="string">&#x27;种方案&#x27;</span>]);</span><br><span class="line">                <span class="built_in">disp</span>([<span class="string">&#x27;苹果=&#x27;</span>,num2str(apple)&#x27;,<span class="string">&#x27;,香蕉=&#x27;</span>,num2str(banana),<span class="string">&#x27;,梨=&#x27;</span>, num2str(pear),]);</span><br><span class="line">                n=n+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;购买方案共有&#x27;</span>,num2str(n),<span class="string">&#x27;种&#x27;</span>])</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="4、try语句"><a href="#4、try语句" class="headerlink" title="4、try语句"></a>4、try语句</h2><ul>
<li><p><strong>try语句是一种试探性语句，语法格式：</strong></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> </span><br><span class="line">    语句组<span class="number">1</span></span><br><span class="line"><span class="keyword">catch</span></span><br><span class="line">    语句组<span class="number">2</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：</p>
<p>try语句先试探性执行语句组 1 ，如果语句组  1 在执行过程中出现错误，则将错误信息由   <strong>catch</strong> 捕捉。执行语句 2</p>
</blockquote>
</li>
<li><p>例：矩阵乘法运算要求两矩阵的尾数兼容，否则会出错。先求两矩阵的乘积，若出错则自动转去。求两矩阵的点乘。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clc;</span><br><span class="line">A=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">B=[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>;<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>];</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">    C=A*B;</span><br><span class="line"><span class="keyword">catch</span></span><br><span class="line">    C=A.*<span class="number">8</span>;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>02_MATLAB程序设计</category>
      </categories>
      <tags>
        <tag>MATLAB学习</tag>
      </tags>
  </entry>
  <entry>
    <title>03_M文件</title>
    <url>/2022/04/03/MATLAB%E5%AD%A6%E4%B9%A0/02_MATLAB%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/03_M%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="三、M文件"><a href="#三、M文件" class="headerlink" title="三、M文件"></a>三、M文件</h1><h2 id="1、脚本文件与函数文件"><a href="#1、脚本文件与函数文件" class="headerlink" title="1、脚本文件与函数文件"></a>1、脚本文件与函数文件</h2><p>Matlab的M文件可分为脚本文件(Matlab scripts)和函数文件(Matlab functions)</p>
<ul>
<li><p>脚本文件是包含多条Matlab命令的文件</p>
</li>
<li><p>函数文件可以包含输入变量并把结果传给输出变量</p>
</li>
</ul>
<p>简要区别：</p>
<ul>
<li><p>1、脚本文件</p>
<ul>
<li><p>（1）多条命令的综合体</p>
</li>
<li><p>（2）没有输入、输出变量被调用</p>
</li>
<li><p>（3）所有变量均使用Matlab基本工作空间。</p>
</li>
<li><p>（2）没有函数声明行</p>
</li>
</ul>
</li>
<li><p>2、函数文件</p>
<ul>
<li><p>（1）常用于扩充Matlab函数库</p>
</li>
<li><p>（2）可以包含输入、输出变量，用于多次调用</p>
</li>
<li><p>（3）运算中生成的所有变量都存放在函数工作空间</p>
</li>
<li><p>（4）包含函数声明行，function 输出变量&#x3D;函数名称(输入变量)</p>
</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>脚本文件</th>
<th>函数文件</th>
</tr>
</thead>
<tbody><tr>
<td>脚本文件可以理解为简单的M文件 ，脚本文件中的变量都是全局变量</td>
<td><code>函数文件</code>中的变量都是<code>局部变量</code>，除非使用特别声明，函数运算完毕之后，其定义的变量将从工作区中清除</td>
</tr>
<tr>
<td>脚本文件只是将一系列相关的代码集合封装，没有输入参数和输出参数，既不自带参数也一定要返回结果</td>
<td>函数文件是在脚本文件的基础之上我<code>添加了一行函数声明行</code>，其代码，组织<code>结构和调用方式</code>与对应的脚本文件截然<code>不同</code></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td><code>函数文件是以函数声明行作为开始</code>的，<code>相对于</code>用户在Matlab函数库里编写的<code>子函数</code></td>
</tr>
<tr>
<td></td>
<td>多数函数文件一般都是有输入和输出变量</td>
</tr>
</tbody></table>
<h2 id="2、函数文件的使用"><a href="#2、函数文件的使用" class="headerlink" title="2、函数文件的使用"></a>2、函数文件的使用</h2><p>函数文件的功能是建立一个函数，且这个文件与Matlab的库函数一样使用。[其扩展名为 <code>.m</code>](<a href="https://zhidao.baidu.com/question/207454039.html">MATLAB默认扩展名是什么呀？matlab语言构成程序的文件是什么文件？_百度知道 (baidu.com)</a>) 。不能直接输入函数文件名来运行一个函数文件，它必须由其他语句来调用。函数文件允许有多个输入、输出参数值</p>
<h4 id="（1）函数定义"><a href="#（1）函数定义" class="headerlink" title="（1）函数定义"></a>（1）函数定义</h4><ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="params">[f1,f2,f3,...]</span>=<span class="title">fun</span><span class="params">(x,y,z,...)</span>       </span></span><br><span class="line"><span class="comment">% f1,f2,f3,...表示形式输出参数   ;    </span></span><br><span class="line"><span class="comment">% x1,x2,x3,...表示形式输出参数   ;   </span></span><br><span class="line"><span class="comment">% fun 表示函数名</span></span><br></pre></td></tr></table></figure>

<p>调用函数格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">[y1,y2,y3,...]=fun(x1,x2,x3,...)</span><br><span class="line"><span class="comment">% y1,y2,y3,...表示出参数</span></span><br><span class="line"><span class="comment">% x1,x2,x3,...表示输入参数</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="（2）函数说明"><a href="#（2）函数说明" class="headerlink" title="（2）函数说明"></a>（2）函数说明</h4><ul>
<li><p>如果在函数文件中插入了<code>return语句</code>，则当执行该语句时就结束函数的执行，程序流程  转至  <code>调用该函数的位置</code>。如果函数文件中<code>不含return</code>语句，则当被调用函数执行<code>完成后就自动返回</code>。</p>
</li>
<li><p>函数文件从形式上与脚本文件不同，函数文件的<code>第一行必须由关键字function引导，</code>对于<code>function[返回变量]=函数名称(输入变量)</code>,输入和返回变量的实际个数分别由 <code>nargin</code> 和 <code>nargout</code> 保留变量给出，无论是否直接使用这两个变量，只要进入该函数 Matlab就将<code>自动生成</code>这两个变量。</p>
</li>
<li><p>M文件<code>调用</code>的<code>函数名和文件名必须相同,</code>函数调用时参数顺序应与定义一致。</p>
</li>
<li><p><code>函数文件运行</code>时,Matlab为它<code>开辟</code>一个<code>临时函数工作空间</code>，由<strong>函数执行的命令以及由这些命令所创建的中间变量，都隐含其中</strong>。当文件<code>执行完毕</code>，该临时<code>工作空间及其中的变量立刻被清除</code>。只能看到输入和输出的内容，函数运行后只保留最后结果，不保留中间结果。<strong>函数中的变量均为局部变量</strong>。</p>
</li>
<li><p>函数<code>可</code>以<code>嵌套调用</code>，即一个函数可以被其他函数调用，甚至<code>可</code>以被<code>自身调用</code>，此时成为递归调用。</p>
</li>
<li><p>例：利用函数文件，实现直角坐标（x,y）到极坐标(r,θ)转换；建立   <code>bs_07_01.m</code></p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[r,theta]</span> = <span class="title">bs_07_01</span><span class="params">(x,y)</span></span></span><br><span class="line">r = <span class="built_in">sqrt</span>(x^<span class="number">2</span>+y^<span class="number">2</span>);</span><br><span class="line">theta = <span class="built_in">atan</span>(y/x);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">储存为 bs_07_01.m 文件 ，然后在命令行窗口输入：[r,theta]=bs_07_01(<span class="number">3</span>,<span class="number">4</span>) </span><br></pre></td></tr></table></figure>

<p>例：编写递归调用函数，求n！</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span> = <span class="title">bs_07_02</span><span class="params">(n)</span></span></span><br><span class="line"><span class="keyword">if</span> n&lt;=<span class="number">1</span></span><br><span class="line">    f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    f=bs_07_02(n<span class="number">-1</span>)*n;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">储存为 bs_07_02.m 文件 ，然后在命令行窗口输入：bs_07_02(<span class="number">5</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="（3）主函数与子函数"><a href="#（3）主函数与子函数" class="headerlink" title="（3）主函数与子函数"></a>（3）主函数与子函数</h4><p>（1）一个M文件可以包含多个函数，第一个函数为主函数，其他为子函数</p>
<p>（2）主函数必须方在最前边，子函数次序可以随意改变</p>
<p>（3）子函数仅能备注函数或同一文件的其他子函数所调用</p>
<p>（4）子函数仅能在主函数中编辑</p>
<ul>
<li><p>例</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span> = <span class="title">bs_07_03</span><span class="params">(a,b)</span></span></span><br><span class="line">c = fun1(a,b) *fun2(a,b);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span> = <span class="title">fun1</span><span class="params">(a,b)</span></span></span><br><span class="line">c = a^<span class="number">2</span>+b^<span class="number">2</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span> = <span class="title">fun2</span><span class="params">(a,b)</span></span></span><br><span class="line">c = a^<span class="number">2</span>-b^<span class="number">2</span>;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>02_MATLAB程序设计</category>
      </categories>
      <tags>
        <tag>MATLAB学习</tag>
      </tags>
  </entry>
  <entry>
    <title>01_二维绘图功能</title>
    <url>/2022/04/06/MATLAB%E5%AD%A6%E4%B9%A0/03_MATLAB%E7%9A%84%E9%9D%99%E6%80%81%E4%B8%8E%E5%8A%A8%E6%80%81%E7%BB%98%E5%9B%BE%E5%8A%9F%E8%83%BD/01_%E4%BA%8C%E7%BB%B4%E7%BB%98%E5%9B%BE%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h1 id="一、二维绘图功能"><a href="#一、二维绘图功能" class="headerlink" title="一、二维绘图功能"></a>一、二维绘图功能</h1><h2 id="1、绘制一般函数曲线"><a href="#1、绘制一般函数曲线" class="headerlink" title="1、绘制一般函数曲线"></a>1、绘制一般函数曲线</h2><h4 id="（1）plot命令"><a href="#（1）plot命令" class="headerlink" title="（1）plot命令"></a>（1）<code>plot</code>命令</h4><p><strong>MATLAB 的plot函数是二维图形最基本的函数之一，它可以针对向量或矩阵绘制出以 x 轴和 y 轴为线性尺度和直角坐标曲线</strong></p>
<ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">plot</span>(x1,y1,option1,x2,y2,option2,...)  <span class="comment">% 使用该命令可以画一条或多条曲线</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>x1,y1,x2,y2 给出的数据分别为 x轴和y轴坐标值</li>
<li>option 定义了图形曲线的颜色、字符、线型</li>
<li>若 x1,y1 都是数组，则按列 取坐标数据绘制</li>
</ul>
</blockquote>
</li>
<li><p>使用 option 来定义图形的颜色、字符 、线型 ，其见表1，表2，表3</p>
<ul>
<li>【表1】 颜色表示：</li>
</ul>
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>‘r’</td>
<td>红色</td>
</tr>
<tr>
<td>‘w’</td>
<td>白色</td>
</tr>
<tr>
<td>‘k’</td>
<td>黑色</td>
</tr>
<tr>
<td>‘g’</td>
<td>绿色</td>
</tr>
<tr>
<td>‘y’</td>
<td>黄色</td>
</tr>
<tr>
<td>‘m’</td>
<td>锰紫色</td>
</tr>
<tr>
<td>‘b’</td>
<td>蓝色</td>
</tr>
<tr>
<td>‘c’</td>
<td>亮青色</td>
</tr>
</tbody></table>
<ul>
<li>【表2】 字符表示：</li>
</ul>
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>‘.’</td>
<td>画点号</td>
</tr>
<tr>
<td>‘*’</td>
<td>画星号</td>
</tr>
<tr>
<td>‘x’</td>
<td>画叉号</td>
</tr>
<tr>
<td>‘^’</td>
<td>画上三角</td>
</tr>
<tr>
<td>‘V’</td>
<td>画左三角</td>
</tr>
<tr>
<td>‘&lt;’</td>
<td>画右三角</td>
</tr>
<tr>
<td>‘&gt;’</td>
<td>画下三角</td>
</tr>
<tr>
<td>‘o’</td>
<td>画圈符</td>
</tr>
<tr>
<td>‘+’</td>
<td>画十字符</td>
</tr>
<tr>
<td>‘s’</td>
<td>画方块符</td>
</tr>
<tr>
<td>‘d’</td>
<td>画菱形符</td>
</tr>
<tr>
<td>‘p’</td>
<td>画五角符</td>
</tr>
<tr>
<td>‘h’</td>
<td>画六角形符</td>
</tr>
</tbody></table>
<ul>
<li>【表3】 线型表示</li>
</ul>
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>‘-‘</td>
<td>画实线</td>
</tr>
<tr>
<td>‘–’</td>
<td>画虚线</td>
</tr>
<tr>
<td>‘.-‘</td>
<td>点画线</td>
</tr>
<tr>
<td>‘:’</td>
<td>花点线</td>
</tr>
</tbody></table>
</li>
<li><p>例：绘制函数曲线 <img src="https://s2.loli.net/2022/04/04/5gOjae4JiEQG8vB.jpg" alt="0ae94178ac903a070336b56d957020e.jpg" style="zoom:33%;" /></p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">t =<span class="number">0</span>:<span class="built_in">pi</span>/<span class="number">100</span>:<span class="number">2</span>*<span class="built_in">pi</span>;</span><br><span class="line">y1=<span class="number">2</span>*<span class="built_in">exp</span>(<span class="number">-0.5</span>*t).*<span class="built_in">sin</span>(<span class="number">2</span>*<span class="built_in">pi</span>*t);     <span class="comment">% exp指数</span></span><br><span class="line">y2=<span class="built_in">sin</span>(t);</span><br><span class="line"><span class="built_in">plot</span>(t,y1,<span class="string">&#x27;b-&#x27;</span>,t,y2,<span class="string">&#x27;r-o&#x27;</span>);        <span class="comment">% pplot二维线图</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/04/04/b1tOsMjGEeFuhm8.png" alt="image-20220404224129628"></p>
</li>
<li><p>例：绘制函数曲线 <code>x=tsin3t,y=tsintsint</code></p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">t=<span class="number">0</span>:<span class="number">0.1</span>:<span class="number">2</span>*<span class="built_in">pi</span>;</span><br><span class="line">x=t.*<span class="built_in">sin</span>(<span class="number">3</span>*t);</span><br><span class="line">y=t.*<span class="built_in">sin</span>(t).*<span class="built_in">sin</span>(t);</span><br><span class="line"><span class="built_in">plot</span>(x,y,<span class="string">&#x27;r-p&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/04/04/ZB73CfPAURGDrYF.png" alt="image-20220404224159004"></p>
</li>
</ul>
<h4 id="（2）图形屏幕控制命令"><a href="#（2）图形屏幕控制命令" class="headerlink" title="（2）图形屏幕控制命令"></a>（2）图形屏幕控制命令</h4><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>figure</td>
<td>打开图形窗口</td>
</tr>
<tr>
<td>clf</td>
<td>清除当前图形窗口的内容</td>
</tr>
<tr>
<td>hold</td>
<td>保持当前图形窗口的内容</td>
</tr>
<tr>
<td>hold on</td>
<td>再次使用hold就解除保持状态</td>
</tr>
<tr>
<td>grid on</td>
<td>给图形加上栅格线</td>
</tr>
<tr>
<td>grid off</td>
<td>删除图形中的栅格线</td>
</tr>
<tr>
<td>box on</td>
<td>在当前坐标系中显示一个边框</td>
</tr>
<tr>
<td>box off</td>
<td>在当前坐标系中去掉边框</td>
</tr>
<tr>
<td>close</td>
<td>关闭当前图形窗口</td>
</tr>
<tr>
<td>close all</td>
<td>关闭所有图形窗口</td>
</tr>
</tbody></table>
<ul>
<li><p>例：在不同窗口绘制图形</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">t = <span class="number">0</span>:<span class="built_in">pi</span>/<span class="number">100</span>:<span class="number">2</span>*<span class="built_in">pi</span>;</span><br><span class="line">y1=<span class="built_in">cos</span>(t);</span><br><span class="line">y2=<span class="built_in">sin</span>(t);</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">3</span>);<span class="built_in">plot</span>(t,y1,<span class="string">&#x27;g-p&#x27;</span>);box on</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">4</span>);<span class="built_in">plot</span>(t,y2,<span class="string">&#x27;r-o&#x27;</span>);grid on</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/04/05/UcWw5tLuySO7kdf.png" alt="image-20220405000607642"></p>
</li>
</ul>
<h4 id="（3）图形标注命令"><a href="#（3）图形标注命令" class="headerlink" title="（3）图形标注命令"></a>（3）图形标注命令</h4><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>title</td>
<td>图题标注</td>
</tr>
<tr>
<td>sgtitle</td>
<td>总标题</td>
</tr>
<tr>
<td>xlabel</td>
<td>x轴说明</td>
</tr>
<tr>
<td>ylabel</td>
<td>y轴说明</td>
</tr>
<tr>
<td>zlabel</td>
<td>z轴说明</td>
</tr>
<tr>
<td>text</td>
<td>在图形中指定的位置（x,y）上显示字符串string,例如text(x,y,’string’)</td>
</tr>
<tr>
<td>annotation</td>
<td>线条、剪头和图框标注，例如：annotation(‘arrow’,[0.1,0.45],[0.3,0.5])</td>
</tr>
<tr>
<td>legend</td>
<td>图例标注</td>
</tr>
</tbody></table>
<blockquote>
<p>legend 函数用于绘制曲线所用线型、颜色或数据点标记图例，用法如下：</p>
<ul>
<li><code>legend(&#39;字符串&#39;,&#39;字符串&#39;,…);</code>指定字符串标记当前轴的图例</li>
<li><code>legend(句柄,&#39;字符串1&#39;,&#39;字符串2&#39;,...)</code>指定字符串换标记句柄图形对象图例</li>
<li><code>legend(M)</code>用字符M矩阵的每一行字符串作为图像对象标记图里</li>
<li><code>legend(句柄,M)</code>用字符M矩阵的每一行字符串作为指定句柄的图形对象标签标记图例</li>
</ul>
</blockquote>
<h4 id="（4）注释的字体属性"><a href="#（4）注释的字体属性" class="headerlink" title="（4）注释的字体属性"></a>（4）注释的字体属性</h4><table>
<thead>
<tr>
<th>属性名</th>
<th>注释</th>
</tr>
</thead>
<tbody><tr>
<td>FontName</td>
<td>字体名称</td>
</tr>
<tr>
<td>FonSize</td>
<td>字体大小</td>
</tr>
<tr>
<td>FontWeight</td>
<td>字形</td>
</tr>
<tr>
<td>FontAngle</td>
<td>字体角度</td>
</tr>
<tr>
<td>FonUnits</td>
<td>字体大小单位</td>
</tr>
<tr>
<td>Rotation</td>
<td>字体旋转角度</td>
</tr>
<tr>
<td>BackgroundColor</td>
<td>背景色</td>
</tr>
<tr>
<td>EdgeColor</td>
<td>边框颜色</td>
</tr>
<tr>
<td>HorizontalAlignment</td>
<td>文本相对位置</td>
</tr>
</tbody></table>
<blockquote>
<ul>
<li><code>FontName</code>属性定义名称，取值是系统支持的一种字体名</li>
<li><code>FonSize</code>属性设置文本对象大小，其单位有<code>FonUnits</code>属性决定，默认为10磅</li>
<li><code>FontWeight</code>  属性设置字体粗细，取值可以是<code>normal(默认值)、bold、light、demi</code></li>
<li><code>FontAngle</code>属性设置斜体文字模式，取值可以是 <code>normal(默认值),iitalic、oblique</code></li>
<li><code>Rotation</code>属性设置字体旋转角，去只是数值量，默认为0。<ul>
<li>取正值时表示逆时针方向旋转</li>
<li>取负值时表示顺时针方向旋转</li>
</ul>
</li>
<li><code>BackgroundColor</code>和<code>EdgeColor</code>属性设置文本对象的背景颜色，可取值为 <code>none(默认值)、ColorSpec</code></li>
<li><code>HorizontalAlignment</code>属性设置文本与指定点的相对位置，取值为 <code>left(默认值)、center、right</code></li>
</ul>
</blockquote>
<h4 id="（5）axis用法"><a href="#（5）axis用法" class="headerlink" title="（5）axis用法"></a>（5）axis用法</h4><ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">axis([xₘᵢₙ,xₘₐₓ,yₘᵢₙ,yₘₐₓ])或 axis([xₘᵢₙ,xₘₐₓ,yₘᵢₙ,yₘₐₓ,zₘᵢₙ,zₘₐₓ])</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：</p>
<p>该函数用来输出图形或曲线的坐标范围。</p>
<ul>
<li><p>提前给出4个参数绘制二维曲线</p>
</li>
<li><p>给出所有参数绘制三维图形</p>
</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th>用法有：</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>axis equal</td>
<td>将两坐标轴设为相等</td>
<td></td>
</tr>
<tr>
<td>axis on(off)</td>
<td>显示（关闭）坐标轴</td>
<td></td>
</tr>
<tr>
<td>axis auto</td>
<td>将坐标轴设置为默认值</td>
<td></td>
</tr>
<tr>
<td>axis squre</td>
<td>产生正方形坐标系</td>
<td></td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="（6）子图分割"><a href="#（6）子图分割" class="headerlink" title="（6）子图分割"></a>（6）子图分割</h4><ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">subplot(n,m,p)   <span class="comment">% 在各个分块位置创建坐标区</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>n表示行数，m表示列数，p表示绘图序号</li>
<li>按从左至右、从上至下排列，把图形窗口分为<code>n*m</code>个子图，在第<code>p</code>子图处绘制图形</li>
</ul>
</blockquote>
</li>
<li><p>例：绘制正弦和余弦函数曲线</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">t = <span class="number">0</span>:<span class="built_in">pi</span>/<span class="number">100</span>:<span class="number">2</span>*<span class="built_in">pi</span>;</span><br><span class="line">y1 = <span class="built_in">sin</span>(t);</span><br><span class="line">y2 = <span class="built_in">cos</span>(t);</span><br><span class="line">y3 = <span class="built_in">sin</span>(t).^<span class="number">2</span>;</span><br><span class="line">y4 = <span class="built_in">cos</span>(t).^<span class="number">2</span>;</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>),<span class="built_in">plot</span>(t,y1);title(<span class="string">&quot;sin(t)&quot;</span>)           <span class="comment">% title()  添加标题</span></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>),<span class="built_in">plot</span>(t,y2,<span class="string">&#x27;g-p&#x27;</span>);title(<span class="string">&#x27;cos(t)&#x27;</span>)</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>),<span class="built_in">plot</span>(t,y3,<span class="string">&#x27;r-o&#x27;</span>);title(<span class="string">&#x27;sin^2(t)&#x27;</span>)</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>),<span class="built_in">plot</span>(t,y4,<span class="string">&#x27;k-h&#x27;</span>);title(<span class="string">&#x27;cos^2(t)&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/04/05/t4iQBOmEoabPlw7.png" alt="image-20220405165957238.png">)</p>
</li>
</ul>
<h2 id="2、图形对象及其句柄"><a href="#2、图形对象及其句柄" class="headerlink" title="2、图形对象及其句柄"></a>2、图形对象及其句柄</h2><h4 id="（1）设置图形对象属性"><a href="#（1）设置图形对象属性" class="headerlink" title="（1）设置图形对象属性"></a>（1）设置图形对象属性</h4><ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">set(句柄，属性名<span class="number">1</span>，属性值<span class="number">1</span>，属性名<span class="number">2</span>，属性值<span class="number">2</span>，...)</span><br><span class="line"><span class="comment">% set 设置图形对象属性</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>句柄  用于指明要操作的图形对象。</li>
<li>如果在调用set函数时省略全部属性名和属性值，则将显示出句柄所有允许的属性</li>
</ul>
</blockquote>
</li>
</ul>
<h4 id="（2）获取图像对象属性"><a href="#（2）获取图像对象属性" class="headerlink" title="（2）获取图像对象属性"></a>（2）获取图像对象属性</h4><ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">V = get(句柄，属性名)</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>V是返回的属性值</li>
<li>如果在调用  get 函数时省略属性名，则将返回句柄所有的属性值<ul>
<li>例如：col &#x3D; get(h,’Color’)用来获得曲线的颜色属性值</li>
</ul>
</li>
</ul>
</blockquote>
</li>
</ul>
<h4 id="（3）建立曲线对象"><a href="#（3）建立曲线对象" class="headerlink" title="（3）建立曲线对象"></a>（3）建立曲线对象</h4><p><strong>曲线对向是坐标州的子对象，它既可以定义在二维坐标系中，也可以定义在三维坐标系中。建立曲线对象使用  line 函数</strong></p>
<ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">句柄变量 = line(x,y,属性名<span class="number">1</span>,属性值<span class="number">1</span>，属性名<span class="number">2</span>,属性值<span class="number">2</span>，...)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>曲线对象的常用属性如下：</p>
<ul>
<li>LineStyle 属性：定义曲型</li>
<li>LinWidth属性：定义线宽，默认值为0.5磅</li>
<li>MarKer属性：定义数据点标记符号的大小，默认值为6磅</li>
<li>XData、YData、ZData属性：这 3 种属性的取值都是数值向量或矩阵，分别代表曲线对象的 3 个坐标轴数据</li>
</ul>
</blockquote>
</li>
<li><p>例：利用曲线对象绘制曲线<img src="https://s2.loli.net/2022/04/05/bka2JCdK9g7T1us.jpg" alt="image-20220407170001568" style="zoom:33%;" /></p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">t=<span class="number">0</span>:<span class="built_in">pi</span>/<span class="number">100</span>:<span class="built_in">pi</span>;</span><br><span class="line">y=<span class="built_in">sin</span>(<span class="number">2</span>*<span class="built_in">pi</span>*t).*<span class="built_in">exp</span>(-t);                               <span class="comment">% exp指数</span></span><br><span class="line">title(<span class="string">&quot;修改颜色和线宽&quot;</span>);                              <span class="comment">% title修改标题</span></span><br><span class="line">h1=line(<span class="string">&#x27;XData&#x27;</span>,t,<span class="string">&#x27;YData&#x27;</span>,y,<span class="string">&#x27;Marker&#x27;</span>,<span class="string">&#x27;*&#x27;</span>);            <span class="comment">% 创建基本线条</span></span><br><span class="line">text(<span class="number">1</span>,<span class="number">0.6</span>,<span class="string">&#x27;y=e^&#123;-t&#125;sin(2&#123;\pi&#125;t)&#x27;</span>,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">16</span>)      </span><br><span class="line"><span class="comment">%&#123; </span></span><br><span class="line"><span class="comment">text 在图形中指定的位置（1,0.6）上显示字符串【y=e^&#123;-t&#125;sin(2&#123;\pi&#125;t)】</span></span><br><span class="line"><span class="comment">【FontSize】为属性名:字符大小 属性值为【16】</span></span><br><span class="line"><span class="comment">%&#125;    </span></span><br><span class="line">set(h1,<span class="string">&#x27;Color&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;lineWidth&#x27;</span>,<span class="number">3</span>)                     <span class="comment">% 设置图形对象属性</span></span><br><span class="line">xlabel(<span class="string">&#x27;时间&#x27;</span>,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">20</span>)                          <span class="comment">% 为x轴添加标签</span></span><br><span class="line">ylabel(<span class="string">&#x27;幅度&#x27;</span>,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">20</span>)                          <span class="comment">% 为y轴添加标签</span></span><br><span class="line">grid on</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/04/05/h5vd7QrlOI9FPsw.png" alt="image-20220405200350606"></p>
</li>
</ul>
<h4 id="（4）矩阵对象"><a href="#（4）矩阵对象" class="headerlink" title="（4）矩阵对象"></a>（4）矩阵对象</h4><p><strong>在MATLAB中，矩形、椭圆以及二者之间的过渡图形（如圆角矩阵）都称为矩形对象。</strong></p>
<ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">rectangle（属性名<span class="number">1</span>，属性值<span class="number">1</span>，属性名<span class="number">2</span>，属性值<span class="number">2</span>，...） <span class="comment">% rectangle创建矩阵对象的函数</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th><strong>矩阵对象的常用属性如下：</strong></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>Position属性</td>
<td>定义相对坐标原点的矩阵位置</td>
</tr>
<tr>
<td>Curvature属性</td>
<td>定义矩形边的曲率</td>
</tr>
<tr>
<td>LineStyle属性</td>
<td>定义线型</td>
</tr>
<tr>
<td>LineWidth属性</td>
<td>定义线宽，默认值为0.5磅</td>
</tr>
<tr>
<td>EdgeColor属性</td>
<td>定义边框线的颜色</td>
</tr>
</tbody></table>
</li>
<li><p>例：在同一坐标轴上绘制矩形、圆角矩形和圆</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">rectangle(<span class="string">&#x27;Position&#x27;</span>,[<span class="number">6</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">3</span>],<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">5</span>,<span class="string">&#x27;EdgeColor&#x27;</span>,<span class="string">&#x27;b&#x27;</span>)             <span class="comment">% 创建带有尖角或圆角的矩形</span></span><br><span class="line">rectangle(<span class="string">&#x27;Position&#x27;</span>,[<span class="number">10.5</span>,<span class="number">4.1</span>,<span class="number">1.1</span>,<span class="number">9</span>],<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">3</span>,<span class="string">&#x27;EdgeColor&#x27;</span>,<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">x=[<span class="number">11</span>,<span class="number">9</span>,<span class="number">7</span>];y=[<span class="number">8</span>,<span class="number">10</span>,<span class="number">10</span>];</span><br><span class="line">px=[x,x(<span class="number">1</span>)];py=[y,y(<span class="number">1</span>)];line(px,py,<span class="string">&#x27;Color&#x27;</span>,<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">x=[<span class="number">15</span>,<span class="number">12</span>,<span class="number">11.5</span>];y=[<span class="number">13</span>,<span class="number">11</span>,<span class="number">9</span>];</span><br><span class="line">px=[x,x(<span class="number">1</span>)];py=[y,y(<span class="number">1</span>)];line(px,py,<span class="string">&#x27;Color&#x27;</span>,<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">rectangle(<span class="string">&#x27;Position&#x27;</span>,[<span class="number">1</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="number">18</span>],<span class="string">&#x27;Curvature&#x27;</span>,<span class="number">0.4</span>,<span class="string">&#x27;LineStyle&#x27;</span>,<span class="string">&#x27;-.&#x27;</span>)</span><br><span class="line">rectangle(<span class="string">&#x27;Position&#x27;</span>,[<span class="number">10</span>,<span class="number">15</span>,<span class="number">2</span>,<span class="number">2</span>],<span class="string">&#x27;Curvature&#x27;</span>,[<span class="number">1</span>,<span class="number">1</span>],<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;EdgeColor&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">rectangle(<span class="string">&#x27;Position&#x27;</span>,[<span class="number">9</span>,<span class="number">16.7</span>,<span class="number">2</span>,<span class="number">2</span>],<span class="string">&#x27;Curvature&#x27;</span>,[<span class="number">1</span>,<span class="number">1</span>],<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;EdgeColor&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">rectangle(<span class="string">&#x27;Position&#x27;</span>,[<span class="number">11</span>,<span class="number">16.7</span>,<span class="number">2</span>,<span class="number">2</span>],<span class="string">&#x27;Curvature&#x27;</span>,[<span class="number">1</span>,<span class="number">1</span>],<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;EdgeColor&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">rectangle(<span class="string">&#x27;Position&#x27;</span>,[<span class="number">8.05</span>,<span class="number">14.7</span>,<span class="number">2</span>,<span class="number">2</span>],<span class="string">&#x27;Curvature&#x27;</span>,[<span class="number">1</span>,<span class="number">1</span>],<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;EdgeColor&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">rectangle(<span class="string">&#x27;Position&#x27;</span>,[<span class="number">12</span>,<span class="number">14.7</span>,<span class="number">2</span>,<span class="number">2</span>],<span class="string">&#x27;Curvature&#x27;</span>,[<span class="number">1</span>,<span class="number">1</span>],<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;EdgeColor&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">rectangle(<span class="string">&#x27;Position&#x27;</span>,[<span class="number">11</span>,<span class="number">13</span>,<span class="number">2</span>,<span class="number">2</span>],<span class="string">&#x27;Curvature&#x27;</span>,[<span class="number">1</span>,<span class="number">1</span>],<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;EdgeColor&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">rectangle(<span class="string">&#x27;Position&#x27;</span>,[<span class="number">9</span>,<span class="number">13</span>,<span class="number">2</span>,<span class="number">2</span>],<span class="string">&#x27;Curvature&#x27;</span>,[<span class="number">1</span>,<span class="number">1</span>],<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;EdgeColor&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">axis equal  <span class="comment">% 将两坐标设为相等</span></span><br><span class="line"><span class="comment">% axis设置坐标轴范围和纵横比  equal坐标范围和尺寸 </span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3、绘制对数坐标图"><a href="#3、绘制对数坐标图" class="headerlink" title="3、绘制对数坐标图"></a>3、绘制对数坐标图</h2><p><strong>在实际应用中，常常使用到对数坐标，MATLAB提供了绘制对数和半对数坐标曲线的函数</strong></p>
<ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">semilogx(x1,y2,选项<span class="number">1</span>,x2,y2,选项<span class="number">2</span>，...)</span><br><span class="line">semilogy(x1,y2,选项<span class="number">1</span>,x2,y2,选项<span class="number">2</span>，...)</span><br><span class="line">loglog(x1,y2,选项<span class="number">1</span>,x2,y2,选项<span class="number">2</span>，...)</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>这些函数中的选项的定义与 plot 函数完全一样所不同的是坐标轴的选取<ul>
<li>plot 函数<ul>
<li>x1,y1,x2,y2 给出的数据分别为 x轴和y轴坐标值</li>
<li>option 定义了图形曲线的颜色、字符、线型</li>
<li>若 x1,y1 都是数组，则按列 取坐标数据绘制</li>
</ul>
</li>
</ul>
</li>
<li>semilogx 函数使用半对数坐标，x 轴为对数刻度，而 y 轴仍保持线性刻度：</li>
<li>semilogy 函数使用半对数坐标，y 轴为对数刻度，而 x 轴仍保持线性刻度；<code>恰好和 semilogx 相反；</code></li>
<li>loglog 函数 使用全对数坐标， x、y轴均采用对数刻度</li>
</ul>
</blockquote>
</li>
<li><p>例： 绘制不同坐标曲线</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x=<span class="number">0</span>:<span class="number">0.1</span>:<span class="number">10</span>;</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>);<span class="built_in">plot</span>(x,<span class="number">2.</span>^x,<span class="string">&#x27;b-*&#x27;</span>);title(<span class="string">&#x27;双线性坐标&#x27;</span>)         <span class="comment">% 在各个坐标位置创建坐标区</span></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>);semilogy(x,<span class="number">2.</span>^x,<span class="string">&#x27;b-*&#x27;</span>);title(<span class="string">&#x27;x线性y对数坐标&#x27;</span>) <span class="comment">% semilogx 半对数图(y轴有对数刻度)</span></span><br><span class="line">x=<span class="built_in">logspace</span>(<span class="number">-1</span>,<span class="number">2</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>);semilogx(x,<span class="number">1.</span>/x);title(<span class="string">&#x27;y线性对数坐标&#x27;</span>)        <span class="comment">% semilogy 半对数图(x轴有对数刻度)</span></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>);loglog(x,<span class="built_in">exp</span>(x),<span class="string">&#x27;-s&#x27;</span>);title(<span class="string">&#x27;双对数坐标&#x27;</span>)      <span class="comment">% loglog 双对数刻度图</span></span><br><span class="line">grid on                                                       <span class="comment">% grid显示或隐藏坐标区域网格</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="4、绘制特殊二维图形函数曲线"><a href="#4、绘制特殊二维图形函数曲线" class="headerlink" title="4、绘制特殊二维图形函数曲线"></a>4、绘制特殊二维图形函数曲线</h2><ul>
<li><p>特殊二维图形函数见表</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>bar</td>
<td>条形图</td>
</tr>
<tr>
<td>polar</td>
<td>极坐标图</td>
</tr>
<tr>
<td>stairs</td>
<td>阶梯图</td>
</tr>
<tr>
<td>stem</td>
<td>火柴杆图</td>
</tr>
<tr>
<td>fill</td>
<td>实心图</td>
</tr>
</tbody></table>
</li>
<li><p>例：绘制特殊二维图形函数曲线</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% 二维绘图功能——绘制特殊二维图形函数曲线</span></span><br><span class="line">t = <span class="number">0</span>:<span class="number">0.2</span>:<span class="number">2</span>*<span class="built_in">pi</span>;</span><br><span class="line">y = <span class="built_in">sin</span>(t);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>),stairs(t,y);title(<span class="string">&#x27;stairs&#x27;</span>)<span class="comment">% stairs 阶梯图</span></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>),stem(t,y);title(<span class="string">&#x27;stem&#x27;</span>)</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>),bar(t,y);title(<span class="string">&#x27;bar&#x27;</span>)</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>),polar(t,y);title(<span class="string">&#x27;polar&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/04/06/JlsIHTWz9A4EBQF.png" alt="image-20220406005539355"></p>
</li>
</ul>
<h2 id="5、绘制符号函数曲线"><a href="#5、绘制符号函数曲线" class="headerlink" title="5、绘制符号函数曲线"></a>5、绘制符号函数曲线</h2><h4 id="（1）绘制符号函数（显函数、隐函数、参数方程）曲线"><a href="#（1）绘制符号函数（显函数、隐函数、参数方程）曲线" class="headerlink" title="（1）绘制符号函数（显函数、隐函数、参数方程）曲线"></a>（1）<strong>绘制符号函数</strong>（显函数、隐函数、参数方程）<strong>曲线</strong></h4><ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">ezplot(<span class="string">&#x27;f(x)&#x27;</span>,[a,b])  <span class="comment">% 表示在 a&lt;x&lt;b 绘制显函数f=f(x)的函数图</span></span><br><span class="line">ezplot(f,[xminx,xmax],<span class="built_in">figure</span>(n))<span class="comment">% 指定绘图窗口绘图</span></span><br><span class="line">ezplot(<span class="string">&#x27;f(x,y)&#x27;</span>,[xminx,xmax,ymin,ymax])<span class="comment">% 表示在区间xmin&lt;x&lt;xmax 和 ymin&lt;y&lt;ymax 绘制隐函数f(x,y)=0 的函数图</span></span><br><span class="line">ezplot(<span class="string">&#x27;x(t)&#x27;</span>,<span class="string">&#x27;y(t)&#x27;</span>,[tmin,tmax])<span class="comment">% 表示在区间 tmin&lt;t&lt;tmax  绘制方程 x=x(t),y=y(t)的函数图</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>例：使用explot在[-10,10]区间绘制函数 <img src="https://s2.loli.net/2022/04/06/h5H1SkbiCGpFy9n.png" alt="a00561c2cf1680e7f5d63ab438c47b0.png" style="zoom:50%;" />曲线</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">ezplot(<span class="string">&#x27;sin(sqrt(2.*x.^2))/sqrt(2.*x.^2)&#x27;</span>,[<span class="number">-10</span>,<span class="number">10</span>]);</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/04/06/BYO5ofJbA6j8Udi.png" alt="image-20220406102209676"></p>
</li>
<li><p>例： 在[0,2*pi]区间绘制函数 y&#x3D;cos(t),x&#x3D;sin3(t)的星形图</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">ezplot(<span class="string">&#x27;cos(t)^3&#x27;</span>,<span class="string">&#x27;sin(t)^3&#x27;</span>,[<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">pi</span>]);         <span class="comment">% ezplot易用的函数绘图函数</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/04/06/ViYSLq6K81uWp4A.png" alt="image-20220406102244651"></p>
</li>
</ul>
<h4 id="（2）函数图函数"><a href="#（2）函数图函数" class="headerlink" title="（2）函数图函数"></a>（2）函数图函数</h4><ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">fplot(fun,lims);				<span class="comment">% 绘制函数 fun 在区间 lims= [xmin,xmax]的函数图</span></span><br><span class="line">fplot(fun,lims,<span class="string">&#x27;corline&#x27;</span>)		<span class="comment">% 以指定线性绘图</span></span><br><span class="line">[x,y]=fplot(fun,lims)		<span class="comment">% 只返回绘图点的值二不绘图，需用 plot(x,y)来绘图</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：</p>
<ul>
<li>fun 必须是 M 文件的函数名或是独立变量为 x 的字符串</li>
<li>fplot函数不能画参数方程和隐函数图形，但可以在一个图上画多个图形</li>
</ul>
</blockquote>
</li>
<li><p>例：建立函数文件 bs_10.m，在[-1,2] 区间上绘制 <code>y = e^2x+sin(3x^2)</code> 曲线</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Y</span>=<span class="title">bs_10_07</span><span class="params">(x)</span></span></span><br><span class="line">Y=<span class="built_in">exp</span>(<span class="number">2</span>*x)+<span class="built_in">sin</span>(<span class="number">3</span>*x.^<span class="number">2</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">% 在命令窗口输入命令 fplot(&#x27;bs_10_07&#x27;,[-1,2])</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/04/06/tKhgP8f2Vnwe5UC.png" alt="image-20220406015727263"></p>
</li>
<li><p>例：绘制函数 <code>sin(x)</code> 和 <code>tan(x)cos(x)</code>  在<code>[-2*pi,2*pi]</code>区间的曲线</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">fplot(<span class="string">&#x27;[sin(x),tan(x),cos(x)]&#x27;</span>,<span class="number">2</span>*<span class="built_in">pi</span>*[<span class="number">-1</span> <span class="number">1</span> <span class="number">-1</span> <span class="number">1</span>],<span class="string">&#x27;r-p&#x27;</span>) 		<span class="comment">% fplot绘制表达式或函数</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/04/06/3ybvIigqXBELZdY.png" alt="image-20220406101059060"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>03_MATLAB的静态与动态绘图功能</category>
      </categories>
      <tags>
        <tag>MATLAB学习</tag>
      </tags>
  </entry>
  <entry>
    <title>04_图像动画</title>
    <url>/2022/04/13/MATLAB%E5%AD%A6%E4%B9%A0/03_MATLAB%E7%9A%84%E9%9D%99%E6%80%81%E4%B8%8E%E5%8A%A8%E6%80%81%E7%BB%98%E5%9B%BE%E5%8A%9F%E8%83%BD/04_%E5%9B%BE%E5%83%8F%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<h1 id="四、图像动画"><a href="#四、图像动画" class="headerlink" title="四、图像动画"></a>四、图像动画</h1><h2 id="1、图像文件操作"><a href="#1、图像文件操作" class="headerlink" title="1、图像文件操作"></a>1、图像文件操作</h2><h4 id="（1）imread-和-imwrite-函数"><a href="#（1）imread-和-imwrite-函数" class="headerlink" title="（1）imread  和 imwrite 函数"></a>（1）<code>imread</code>  和 <code>imwrite</code> 函数</h4><p><strong>imread 和 imwrite 函数分别用于将图像文件读入 MATLAB 工作空间，以及将图像数据和色图数据一起写入一定格式的图像文件。MATLAB支持多种图像文件格式，包括 <code>.bmp  .jpg  .jepg  .tif</code></strong></p>
<h4 id="（2）image-和-imagesc-函数"><a href="#（2）image-和-imagesc-函数" class="headerlink" title="（2）image 和 imagesc 函数"></a>（2）<code>image</code> 和 <code>imagesc</code> 函数</h4><p><strong>image 和 imagesc 函数用于图像显示。为了保证图像效果，一般还应使用 colormap 函数设置图像色图</strong></p>
<ul>
<li><p>例：在图形窗口显示图像文件 bb.jpg</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">[x,cmap]=imread(<span class="string">&#x27;D:\Users\lichaikui\Pictures\联想安卓照片\bb.jpg&#x27;</span>);  <span class="comment">% 读取图像的数据阵和色图阵</span></span><br><span class="line">image(x);title(<span class="string">&#x27;在图形窗口显示图像文件 bb.jpg&#x27;</span>)            <span class="comment">% 放图</span></span><br><span class="line">colormap(cmap);      <span class="comment">% 保持颜色</span></span><br><span class="line">axis image off       <span class="comment">% 保持高度比并取消坐标轴</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2、播放电影动画"><a href="#2、播放电影动画" class="headerlink" title="2、播放电影动画"></a>2、播放电影动画</h2><p><strong>从不同的视角拍下一系列对象的图像，并保存到变量中，然后按照一定的顺序像电影一样播放</strong></p>
<ul>
<li><p>例：设图片文件是五幅圣诞老人图片，编写程序播放动画</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">close;theta=<span class="number">0</span>:<span class="number">0.1</span>:<span class="number">2</span>*<span class="built_in">pi</span>;</span><br><span class="line">r1 =<span class="number">3</span>;clear;clc;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">4</span></span><br><span class="line">    c=strcat(<span class="string">&#x27;D:\Users\lichaikui\Pictures\2\old&#x27;</span>,num2str(<span class="built_in">i</span>),<span class="string">&#x27;.jpg&#x27;</span>);  <span class="comment">% strcat 水平串联字符串</span></span><br><span class="line">    [n,cmap]=imread(c);                             <span class="comment">% imread 从图形文件读取图片</span></span><br><span class="line">    image(n);colormap(cmap);                        <span class="comment">% image  从数组显示图像</span></span><br><span class="line">    axis off;                                       <span class="comment">% 隐藏图片坐标轴</span></span><br><span class="line">    m(:,<span class="built_in">i</span>)=getframe;                                <span class="comment">% getframe 捕获坐标区或图窗作为影片帧</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">movie(m,<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3、电影动画文件保存"><a href="#3、电影动画文件保存" class="headerlink" title="3、电影动画文件保存"></a>3、电影动画文件保存</h2><ul>
<li>保样电影动画是指将动画一帧一帧地保存下来，它可以脱离MTLAB环境运行</li>
<li><code>videoWrite</code>与<code>open</code>、<code>writeVideo</code>和<code>close</code>函数配合，可从图像(figure)中创建视频和图片文件,也可以创建MPEG-4文件,在Window平台或其他平台上播故。</li>
<li>Video-Write 函数支持大于2GB的视频文件。</li>
<li>写人视频的前提是不断获取图像帧，而这一步骤则是每次更新<code>figure</code>上的图像来完成。即在绘图循环中，所有图像重绘结束后，使用<code>getframe</code>方法获取当前<code>figure</code>上的图像并写人打开的视频文件，VideoWrite函数可设置加上.avi 、.mj2、.mp4、m4v的拓展名，函数默认保存为.avi文件</li>
</ul>
<h4 id="（1）open-打开视频写人对象"><a href="#（1）open-打开视频写人对象" class="headerlink" title="（1）open:打开视频写人对象"></a>（1）open:打开视频写人对象</h4><ul>
<li><p>调用格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">open(myObj)</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="（2）clos-关闭视频写入对象，与open-对应"><a href="#（2）clos-关闭视频写入对象，与open-对应" class="headerlink" title="（2）clos:关闭视频写入对象，与open 对应"></a>（2）clos:关闭视频写入对象，与open 对应</h4><ul>
<li><p>调用格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">close(myOnj)</span><br></pre></td></tr></table></figure>

<p>这两个函数分别在写入视频对象前和写入完成后使用</p>
</li>
</ul>
<h4 id="（3）getProfiles-获取在该系统平台下，VideoWriter-可以支持写入的视频类型"><a href="#（3）getProfiles-获取在该系统平台下，VideoWriter-可以支持写入的视频类型" class="headerlink" title="（3）getProfiles:获取在该系统平台下，VideoWriter 可以支持写入的视频类型"></a>（3）getProfiles:获取在该系统平台下，VideoWriter 可以支持写入的视频类型</h4><ul>
<li><p>调用格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">profiles=VidepWriter.getProfiles()</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="（4）writerVideo-写入视频帧"><a href="#（4）writerVideo-写入视频帧" class="headerlink" title="（4）writerVideo:写入视频帧"></a>（4）writerVideo:写入视频帧</h4><ul>
<li><p>调用格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">weriteVideo(myObj,frame)  <span class="comment">% 将以智能图像framre 写入视频对象中，frame可以通过getframe获得</span></span><br><span class="line">writeVideo(myObj,mov)     <span class="comment">% 将MATLAB对象写入视频中，mov是一个帧结构序列，每一个结构包括  mov.cadta 和 mov.colormap</span></span><br><span class="line">writeVideo(myObj,img)	  <span class="comment">% 将一个图像写入视频对象中</span></span><br><span class="line">writeVideo(myObj,images)  <span class="comment">% 将一序列图像写入视频对象中</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>例：保存上一个例子为视频文件</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">myObj=VideoWriter(<span class="string">&#x27;newfile.avi&#x27;</span>);</span><br><span class="line">open(myObj);</span><br><span class="line">t=<span class="number">0</span>:<span class="number">0.1</span>:<span class="built_in">pi</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">4</span></span><br><span class="line">    c=strcat(<span class="string">&#x27;D:\Users\lichaikui\Pictures\2\old&#x27;</span>,num2str(<span class="built_in">i</span>),<span class="string">&#x27;.jpg&#x27;</span>);  <span class="comment">% strcat 水平串联字符串</span></span><br><span class="line">    frame=imread(c);                             <span class="comment">% imread 从图形文件读取图片</span></span><br><span class="line">    newFrame = imresize(frame,[<span class="number">203</span> <span class="number">416</span>]);        <span class="comment">% 改变不同帧图片分辨路大小防止报错</span></span><br><span class="line">    writeVideo(myObj,newFrame)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>03_MATLAB的静态与动态绘图功能</category>
      </categories>
      <tags>
        <tag>MATLAB学习</tag>
      </tags>
  </entry>
  <entry>
    <title>04_文件操作</title>
    <url>/2022/04/04/MATLAB%E5%AD%A6%E4%B9%A0/02_MATLAB%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/04_%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="四、文件操作"><a href="#四、文件操作" class="headerlink" title="四、文件操作"></a>四、文件操作</h1><p>MATLAB文件有两种格式；二进制文件（b）和文本文件（t）。打开文件默认是二进制格式，如果要以文本格式打开，则必须在打开方式中能加上字符串“t”</p>
<p>文件操作是以一种重要的输入输出方式，MAtLAB提供了一系列输入输出函数，专门用于文件操作。MATLAB文件操作主要有3个步骤：首先打开文件，然后对文件进行读写操作，最后关闭文件</p>
<h2 id="1、文件的打开"><a href="#1、文件的打开" class="headerlink" title="1、文件的打开"></a>1、文件的打开</h2><ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">fid = fopen(文件名，打开方式)  </span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>打开文件或获得有关文件的信息</li>
<li>fid 为文件句柄，其他函数可以用它对该文件进行操作<ul>
<li>如果句柄值大于0，则表示文件打开成功</li>
<li>若打开失败，fid的返回值为-1</li>
</ul>
</li>
<li>文件名用字符串形式表示（可带路径名）</li>
</ul>
</blockquote>
</li>
</ul>
<h2 id="2、二进制文件的读写"><a href="#2、二进制文件的读写" class="headerlink" title="2、二进制文件的读写"></a>2、二进制文件的读写</h2><p>文件的读写操作分为  “<strong>只读</strong>”    “<strong>只写</strong>”    “<strong>可读可写</strong>”   “<strong>可读可写可添加</strong>”   等，其操作符号可见表</p>
<table>
<thead>
<tr>
<th>表 示</th>
<th>说 明</th>
</tr>
</thead>
<tbody><tr>
<td>r</td>
<td>只读，【文件必须存在】(默认的打开方式)</td>
</tr>
<tr>
<td>w</td>
<td>只写，若文件已存在则原内容将被覆盖;【若文件不存在则新建一个】</td>
</tr>
<tr>
<td>a</td>
<td>在文件末尾添加，【若文件不存在则新建一个】</td>
</tr>
<tr>
<td>r+</td>
<td>可读可写，【文件必须存在 】</td>
</tr>
<tr>
<td>w+</td>
<td>可读可写，若文件已存在则原内容将被覆盖;【若文件不存在则新建一个 】</td>
</tr>
<tr>
<td>a+</td>
<td>可读可写可添加，【若文件不存在则新建一个】</td>
</tr>
</tbody></table>
<p>读写文件必须先要打开文件，有两个标准代码文件，不需要打开就可以直接使用，分别为：fid&#x3D;1（标准输出文件） 和  fid&#x3D;2 （标准错误文件。若不指定打开方式，则表示只读</p>
<h4 id="（1）二进制文件的读操作"><a href="#（1）二进制文件的读操作" class="headerlink" title="（1）二进制文件的读操作"></a>（1）二进制文件的读操作</h4><ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">[A,count]=fread(fid,<span class="built_in">size</span>,precision) </span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><a href="%5B(1%E6%9D%A1%E6%B6%88%E6%81%AF">fread</a> MATLAB fread_yangqoor的博客-CSDN博客](<a href="https://blog.csdn.net/yangqoor/article/details/84940030))%E8%AF%BB%E5%8F%96%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE">https://blog.csdn.net/yangqoor/article/details/84940030))读取二进制文件中的数据</a></li>
<li>A用来存放读取数据</li>
<li>count为返回读取数据的个数，是可选项（<a href="https://blog.csdn.net/weixin_45837461/article/details/105894042">count计算字符串中模式出现的次数</a>）</li>
<li>fid为文件句柄;</li>
<li>size为可选项，默认为读取整个文件,输出数据是列向量，文件中每一个元素对应一个值<ul>
<li>取值选择是 <ul>
<li>“     Inf	  “ :读取整个文件</li>
<li>“       N      “ :读取N个数据到一个列向量;</li>
<li>“   [m,n]   “ :读取m×n个数据到一个 m×n矩阵 中并按列存放 （n可以取Inf，但m不可以）</li>
</ul>
</li>
</ul>
</li>
<li>precision代表读取的数据类型</li>
</ul>
</blockquote>
</li>
<li><p>例：设已有二进制数据文件 output.dat,从文件中读入二进制数据</p>
<p>程序命令:</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">fid = fopen(<span class="string">&#x27;bs_08_01.dat&#x27;</span>,<span class="string">&#x27;r&#x27;</span>);	</span><br><span class="line">A = fread(fid,<span class="number">100</span>,<span class="string">&#x27;double&#x27;</span>);                <span class="comment">% 从文件中读取二进制数据</span></span><br><span class="line">status = fclose(fid);</span><br><span class="line">fid = fopen(<span class="string">&quot;bs_08_01.dat&quot;</span>,<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">[A,count] = fread(fid,[<span class="number">100</span>,<span class="number">100</span>],<span class="string">&#x27;double&#x27;</span>);</span><br><span class="line">status = fclose(fid);</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="（2）二进制文件的写操作"><a href="#（2）二进制文件的写操作" class="headerlink" title="（2）二进制文件的写操作"></a>（2）二进制文件的写操作</h4><ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">count = fwrite(fid,A,precision)  </span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>fwrite将数据写入二进制文件</li>
<li>A按指定的数据类型将矩阵A中的元素写入到文件中</li>
<li>count为返回所写入的数据元素个数，可选项</li>
<li>fid为文件句柄</li>
<li>A用来存放写入文件的数据</li>
<li>precision 代表数据类型<ul>
<li>常用的数据类型有  <ul>
<li>char、uchar、int、long、flot、double等，</li>
<li>默认数据类型为 uchar,即无符号字符</li>
</ul>
</li>
</ul>
</li>
</ul>
</blockquote>
</li>
<li><p>例：将4×4帕斯卡进去数据写入文件 </p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clc;A = <span class="built_in">pascal</span>(<span class="number">4</span>);                     <span class="comment">% pascal帕斯卡矩阵</span></span><br><span class="line">fid = fopen(<span class="string">&#x27;bs_08_02_1.1.dat&#x27;</span>,<span class="string">&#x27;w&#x27;</span>);        <span class="comment">% fopen打开文件或获得有关文件的信息</span></span><br><span class="line">fwrite(fid,A,<span class="string">&#x27;int8&#x27;</span>)                   <span class="comment">% 用8位整形数把二进制数据写入文件 ； fwrite将数据写入二进制文是的</span></span><br><span class="line">fclose(fid);                           <span class="comment">% 关闭一个或所有打开文件</span></span><br><span class="line">fid=fopen(<span class="string">&#x27;bs_08_02_1.1.dat&#x27;</span>,<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">[B,count] = fread(fid,[<span class="number">4</span>,<span class="built_in">inf</span>],<span class="string">&#x27;int8&#x27;</span>); <span class="comment">% 打开二进文件中的数据</span></span><br><span class="line">fclose(fid);</span><br><span class="line">B</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3、文件的关闭"><a href="#3、文件的关闭" class="headerlink" title="3、文件的关闭"></a>3、文件的关闭</h2><p>当不需要对文件进行操作之后，要使用fclose函数对这个文件进行关闭。以免数据丢失</p>
<ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">status = fclose(fid) </span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>fid为所需要关闭文件的句柄我；</li>
<li>satatus为关闭文件的返回代码，若关闭成功则为0 ，否则为 -1</li>
</ul>
</blockquote>
</li>
<li><p>例：文件的读写操作，将5×5魔方阵存入二进制中，并读取输出。</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">fid = fopen(<span class="string">&#x27;bs_08_03_1.1.dat&#x27;</span>,<span class="string">&#x27;w&#x27;</span>);</span><br><span class="line">a= <span class="built_in">magic</span>(<span class="number">5</span>);                  <span class="comment">% magic 魔方（幻）方矩阵</span></span><br><span class="line">fwrite(fid,a,<span class="string">&#x27;long&#x27;</span>);         <span class="comment">% 用长整形数把二进制数据写入文件</span></span><br><span class="line">fclose(fid);</span><br><span class="line">fid = fopen(<span class="string">&#x27;bs_08_03_1.1.dat&#x27;</span>,<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">[A,count] = fread(fid,[<span class="number">5</span>,<span class="built_in">inf</span>],<span class="string">&#x27;long&#x27;</span>);  <span class="comment">% 其中[5,inf] 为size的[m×n]方法 按列向量排列的m行所有（inf）列的矩阵</span></span><br><span class="line">fclose(fid);</span><br><span class="line">A</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="4、文本文件的读写"><a href="#4、文本文件的读写" class="headerlink" title="4、文本文件的读写"></a>4、文本文件的读写</h2><h4 id="（1）文本文件的读操作"><a href="#（1）文本文件的读操作" class="headerlink" title="（1）文本文件的读操作"></a>（1）文本文件的读操作</h4><ul>
<li><p>语法格式</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">[A,count]=fscanf(fid,format,<span class="built_in">size</span>) </span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>fscanf读取文本文件中的数据 ;</li>
<li>A用来存放读取的数据</li>
<li>count表示返回读取数据的个数（count函数：计算字符串中模式出现的次数）</li>
<li>fid为文件句柄</li>
<li>format用来控制读取的数据格式（format函数：设置命令输出显示格式）<ul>
<li>由  % 加上格式符组成，常见格式符由：<ul>
<li>d 整型</li>
<li>f 浮点型</li>
<li>s 字符串型</li>
<li>c  字符型             等</li>
</ul>
</li>
<li>在  %  与格式符之间还可以附加格式说明符，如数据宽度说明等</li>
</ul>
</li>
<li>size为可选项，表示矩阵A中数据的排列形式，他可以取下列值：<ul>
<li>n    读取n个元素到一个列向量</li>
<li>inf 读取整个文件</li>
<li>[m×n] 读取数据到m×n矩阵中，数据按列存放</li>
</ul>
</li>
</ul>
</blockquote>
</li>
<li><p>例：使用fprintf 读取文本文件文件 ，计算x &#x3D;[0,1]时  f(x)&#x3D;exp的值，并将结果写入到文件  bs_08.txt 中，最后显示到命令行窗口中</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x = <span class="number">0</span>:<span class="number">0.1</span>:<span class="number">1</span>;  y = [x;<span class="built_in">exp</span>(x)];   <span class="comment">% y 有两行数据</span></span><br><span class="line">fid = fopen(<span class="string">&#x27;bs_08.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>);</span><br><span class="line">fprintf(fid,<span class="string">&#x27;%6.2f %12.8f\n&#x27;</span>,y);</span><br><span class="line">fclose(fid);fid=fopen(<span class="string">&#x27;bs_08.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">[a,count]=fscanf(fid,<span class="string">&#x27;%f %f&#x27;</span>,[<span class="number">2</span> <span class="built_in">inf</span>]);</span><br><span class="line">fprintf(<span class="number">1</span>,<span class="string">&#x27;%f %f\n&#x27;</span>,a);fclose(fid);</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="（2）文本文件的写操作"><a href="#（2）文本文件的写操作" class="headerlink" title="（2）文本文件的写操作"></a>（2）文本文件的写操作</h4><ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">fprintf(fid,format,A)  <span class="comment">% 将数据按照指定格式写入到文本文件中</span></span><br></pre></td></tr></table></figure>

<p>也可以使用 : <code>dlmwrite(&#39;filename&#39;,M)</code>将<code>矩阵M</code>写入文本文件<code>filename</code>中</p>
<blockquote>
<ul>
<li><p>fid 为文本句柄指定要写入数据的文件；</p>
</li>
<li><p>format用来控制所写数据格式的格式符与  fscanf函数相同 （format函数：设置命令输出显示格式  fscanf函数：读取文本文件的数据）</p>
<ul>
<li><p>由  % 加上格式符组成，常见格式符由：</p>
<ul>
<li>d 整型</li>
<li>f 浮点型</li>
<li>s 字符串型</li>
<li>c  字符型             等</li>
</ul>
</li>
<li><p>在  %  与格式符之间还可以附加格式说明符，如数据宽度说明等</p>
</li>
<li></li>
</ul>
</li>
<li><p>A是用来存放数据的矩阵</p>
</li>
</ul>
</blockquote>
</li>
<li><p>例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = [1,2,3;4,5,6;7,8,9];</span><br><span class="line">dlmwrite(&#x27;bs_08.txt&#x27;,a);</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="5、文件定位和文件状态"><a href="#5、文件定位和文件状态" class="headerlink" title="5、文件定位和文件状态"></a>5、文件定位和文件状态</h2><h4 id="（1）检测文件是否已经结束"><a href="#（1）检测文件是否已经结束" class="headerlink" title="（1）检测文件是否已经结束"></a>（1）检测文件是否已经结束</h4><ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">status = feof(fid);           <span class="comment">% feof检测文件末尾</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>函数<code>feof(fid)</code> 用法：<ul>
<li>文件指针 fid 到达文件末尾时返回“真”值；否则返回“假”；</li>
<li>~feof 是在 feof 前加了“非”</li>
<li>是逻辑表达式：<ul>
<li>文件指针到达文件末尾时 该表达式值为“假”；</li>
<li>否则为“真”；</li>
</ul>
</li>
<li>while ~feof 表示 若 未读到文件末尾 则 继续 循环</li>
</ul>
</li>
<li>fid 为文件句柄</li>
<li>status 为状态逻辑值，若结束 status 返回值为 0 ，否则返回值为 -1</li>
</ul>
</blockquote>
</li>
</ul>
<h4 id="（2）查询文件的输入、输出错误信息"><a href="#（2）查询文件的输入、输出错误信息" class="headerlink" title="（2）查询文件的输入、输出错误信息"></a>（2）查询文件的输入、输出错误信息</h4><ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">ioerror = ferror(fid)   <span class="comment">% ferror 文件1/0错误信息</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>fid 文件句柄</li>
<li>ioerror 为逻辑值，若文件的输入、输出 有错误则返回0 ，否则为1</li>
</ul>
</blockquote>
</li>
</ul>
<h4 id="（3）使位置指针重新返回文件的开头"><a href="#（3）使位置指针重新返回文件的开头" class="headerlink" title="（3）使位置指针重新返回文件的开头"></a>（3）使位置指针重新返回文件的开头</h4><ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">start = frewind(fid)   <span class="comment">% frewind(fileID) 将文件位置指针设置到文件的开头</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>fid 为文件句柄</li>
<li>start 为逻辑值，返回文件开头 start &#x3D; 0 ，否则为-1</li>
</ul>
</blockquote>
</li>
</ul>
<h4 id="（4）设置文件的位置指针"><a href="#（4）设置文件的位置指针" class="headerlink" title="（4）设置文件的位置指针"></a>（4）设置文件的位置指针</h4><ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">status = fseek(fid,offset,origin) <span class="comment">% fseek 移动至文件的指定位置</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>若成功 ，startus 返回值为 0 ，否则返回值为 -1</li>
<li>fid 为文件句柄 </li>
<li>offset 为位置指针相对移动的字节数；</li>
<li>origin 表示位置指针移动的参照位置，可取值：<ul>
<li><code>&#39;cof&#39;</code>表示当前位置</li>
<li><code>&#39;bof&#39;</code>表示文件的开始位置</li>
<li><code>&#39;eof&#39;</code>表示文件末尾</li>
</ul>
</li>
</ul>
</blockquote>
</li>
</ul>
<h4 id="（5）查询当前文件指针的位置"><a href="#（5）查询当前文件指针的位置" class="headerlink" title="（5）查询当前文件指针的位置"></a>（5）查询当前文件指针的位置</h4><ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">position = ftell(fid);  <span class="comment">% ftell 当前位置</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>fid为文件句柄</li>
<li>position 返回值为从文件开始到当前指针位置的字节数<ul>
<li>若返回值为- 1 ，则表示获取文件当前位置失败</li>
</ul>
</li>
</ul>
</blockquote>
</li>
</ul>
<p>例：读取 bs_08.txt文件，查询文件的文件大小和当前指针位置</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">fid = fopen(<span class="string">&quot;bs_08.txt&quot;</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">fseek(fid,<span class="number">0</span>,<span class="string">&#x27;eof&#x27;</span>); x = ftell(fid);</span><br><span class="line">fprintf(<span class="number">1</span>,<span class="string">&#x27;File Size = % d\n&#x27;</span>,x);</span><br><span class="line">frewind(fid); x = ftell(fid);</span><br><span class="line">fprintf(<span class="number">1</span>,<span class="string">&#x27;File Position = %d\n&#x27;</span>,x);</span><br><span class="line">fclose(fid);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>1为文件句柄，指定要写入数据的文件</p>
<ul>
<li><blockquote>
<p><strong><code>fileID</code> – 文件标识符<br><code> 1</code> （默认） | <code>2</code> | 标量</strong></p>
</blockquote>
<p>文件标识符，指定为下列值之一：</p>
<ul>
<li>从fopen获取的文件标识符。</li>
<li><code>1</code> 表示标准输出（屏幕）。</li>
<li><code>2</code> 表示标准错误</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="6、按行读取数据"><a href="#6、按行读取数据" class="headerlink" title="6、按行读取数据"></a>6、按行读取数据</h2><h4 id="（1）fgetl函数"><a href="#（1）fgetl函数" class="headerlink" title="（1）fgetl函数"></a>（1）<code>fgetl</code>函数</h4><ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">tline = fgetl(fid)   <span class="comment">% fgetl 从  fid 文件中读取一行数据并丢弃其中的字符串</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>fid 为文件句柄</li>
<li>fgetl 从  fid 文件中读取一行数据并丢弃其中的字符串</li>
<li>如果读取成功 ，tline 容纳了读取到的文本字符串；</li>
<li>如果遇到文件末尾的结束标志（EOF），则函数返回-1，即 tline 值为 -1</li>
</ul>
</blockquote>
</li>
</ul>
<h4 id="（2）fgets函数"><a href="#（2）fgets函数" class="headerlink" title="（2）fgets函数"></a>（2）<code>fgets</code>函数</h4><ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">tline = fgets(fid)       <span class="comment">% 读取文件的下一行，包括换行符</span></span><br><span class="line">tline = fgets(fid,nchar) <span class="comment">% 返回文件标识符，指向的一行，最多 nchar 个字符</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：</p>
<ul>
<li><p><code>fgets</code>读取文件中的行，并保留换行符</p>
</li>
<li><p>读取一行数据，包括终止符</p>
</li>
</ul>
</blockquote>
</li>
<li><p>例：编写一个程序，用于读取生成的矩阵数据</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">fid=fopen(<span class="string">&quot;bs_08.txt&quot;</span>,<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span>~feof(fid)              <span class="comment">% 在文件没有结束时按行读取数据</span></span><br><span class="line">s = fgets(fid);fprintf(<span class="number">1</span>,<span class="string">&#x27;%s&#x27;</span>,s);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">fclose(fid);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>while ~feof 表示 若 未读到文件末尾 则 继续 循环</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>02_MATLAB程序设计</category>
      </categories>
      <tags>
        <tag>MATLAB学习</tag>
      </tags>
  </entry>
  <entry>
    <title>02_三维绘图功能</title>
    <url>/2022/04/09/MATLAB%E5%AD%A6%E4%B9%A0/03_MATLAB%E7%9A%84%E9%9D%99%E6%80%81%E4%B8%8E%E5%8A%A8%E6%80%81%E7%BB%98%E5%9B%BE%E5%8A%9F%E8%83%BD/02_%E4%B8%89%E7%BB%B4%E7%BB%98%E5%9B%BE%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h1 id="二、三维绘图功能"><a href="#二、三维绘图功能" class="headerlink" title="二、三维绘图功能"></a>二、三维绘图功能</h1><h2 id="1、绘制三维空间曲线"><a href="#1、绘制三维空间曲线" class="headerlink" title="1、绘制三维空间曲线"></a>1、绘制三维空间曲线</h2><p><strong>与plot类似，可以使用<code>plot3函数</code>来绘制一条三维空间的曲线</strong></p>
<ul>
<li><p>语法格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plot3(x,y,option)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>与 plot 函数 中，x、y和  option类似，多了一个 z 坐标轴。option 指定曲线的颜色、线形等</p>
</blockquote>
</li>
<li><p>例：绘制三维曲线并标注坐标</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">close;</span><br><span class="line">t=<span class="number">0</span>:<span class="built_in">pi</span>/<span class="number">10</span>:<span class="number">20</span>*<span class="built_in">pi</span>;</span><br><span class="line">x=<span class="built_in">sin</span>(t);</span><br><span class="line">y=<span class="built_in">cos</span>(t);</span><br><span class="line">z=t.*<span class="built_in">sin</span>(t).*<span class="built_in">cos</span>(t);</span><br><span class="line"><span class="built_in">plot3</span>(x,y,z,<span class="string">&#x27;m:p&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;线性三维空间&#x27;</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;x轴&#x27;</span>);ylabel(<span class="string">&#x27;y轴&#x27;</span>);zlabel(<span class="string">&#x27;z轴&#x27;</span>);</span><br><span class="line">grid on</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/04/08/5fYjDgIszH9UVWa.png" alt="image-20220408134048928"></p>
</li>
</ul>
<h2 id="2、绘制网格矩阵"><a href="#2、绘制网格矩阵" class="headerlink" title="2、绘制网格矩阵"></a>2、绘制网格矩阵</h2><p><strong>meshgrid 函数 产生二维阵和三维阵列。使用该函数时，用户需要知道各个四边形顶点的三维坐标值</strong></p>
<ul>
<li><p>语法格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[X,Y]=meshgrid(x,y)   % 向量x,y得别指定X轴和Y轴的数据点。当x为n维向量，y为m维向量时</span><br><span class="line">[X,Y,Z]=meshgrid(x,y,z)</span><br></pre></td></tr></table></figure>
</li>
<li><p>例：利用meshgrid函数绘制三维函数曲线 z&#x3D;tan(x&#x2F;y)</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a=<span class="number">-30</span>:<span class="number">1</span>:<span class="number">30</span>;</span><br><span class="line">b=<span class="number">-30</span>:<span class="number">1</span>:<span class="number">30</span>;</span><br><span class="line">[x,y]=<span class="built_in">meshgrid</span>(a,b);</span><br><span class="line">z=<span class="built_in">atan</span>(x./y);</span><br><span class="line"><span class="built_in">plot3</span>(x,y,z);</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/04/08/kBYlbnTmFpq5AGw.png" alt="image-20220408161700205"></p>
</li>
<li><p>例：利用 plot3函数 绘制三维曲线</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x=<span class="number">0</span>:<span class="number">0.1</span>:<span class="number">2</span>*<span class="built_in">pi</span>;</span><br><span class="line">[x,y]=<span class="built_in">meshgrid</span>(x);</span><br><span class="line">z=<span class="built_in">sin</span>(y).*<span class="built_in">cos</span>(x);</span><br><span class="line"><span class="built_in">plot3</span>(x,y,z);</span><br><span class="line">xlabel(<span class="string">&#x27;x-axis&#x27;</span>),ylabel(<span class="string">&#x27;y-axis&#x27;</span>);</span><br><span class="line">zlabel(<span class="string">&#x27;z-axis&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;三维曲线&#x27;</span>);</span><br><span class="line">grid on;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/04/08/Ncqwn2PRhGTsXEO.png" alt="image-20220408161740059"></p>
</li>
</ul>
<h2 id="3、绘制常用三维图形"><a href="#3、绘制常用三维图形" class="headerlink" title="3、绘制常用三维图形"></a>3、绘制常用三维图形</h2><h4 id="（1）bar3"><a href="#（1）bar3" class="headerlink" title="（1）bar3"></a>（1）bar3</h4><ul>
<li>bar3为绘制三维条形图，语法格式为：</li>
</ul>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">bar3(y)   	<span class="comment">% y的每个元素对应于一个条形图</span></span><br><span class="line">bar3(x,y)   <span class="comment">% 在x 指定的位置上绘制y中元素的条形图</span></span><br></pre></td></tr></table></figure>

<h4 id="（2）stem3"><a href="#（2）stem3" class="headerlink" title="（2）stem3"></a>（2）stem3</h4><ul>
<li>stem3为绘制针状形图，语法格式为：</li>
</ul>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">stem3(z)    <span class="comment">% 将数据序列z表示为从xy平面向上延伸的杆形图，x和y自动生成</span></span><br><span class="line">stem3(x,y)  <span class="comment">% 在x指定的位置上绘制y中元素的条形图</span></span><br></pre></td></tr></table></figure>

<h4 id="（3）pie3"><a href="#（3）pie3" class="headerlink" title="（3）pie3"></a>（3）pie3</h4><ul>
<li>pie3为函数绘制三维饼图，语法格式为：</li>
</ul>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">pie3(x)     <span class="comment">% x为向量，用x 中的数据绘制一个三维饼图</span></span><br></pre></td></tr></table></figure>

<h4 id="（4）fill3"><a href="#（4）fill3" class="headerlink" title="（4）fill3"></a>（4）fill3</h4><ul>
<li>fill3为函数可在三维空间内绘制出填充过的多边形，语法格式为：</li>
</ul>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">fill3(x,y,z,c)  <span class="comment">% 用x、y、z做多边形的顶点，而c指定了填充的颜色</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>例：绘制三维条形图和三维杆形图</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">t=<span class="number">0</span>:<span class="number">.1</span>:<span class="number">2</span>*<span class="built_in">pi</span>;</span><br><span class="line">x=t.^<span class="number">3.</span>*<span class="built_in">sin</span>(<span class="number">3</span>*t).*<span class="built_in">exp</span>(-t);</span><br><span class="line">y=t.^<span class="number">3.</span>*<span class="built_in">cos</span>(<span class="number">3</span>*t).*<span class="built_in">exp</span>(-t);</span><br><span class="line">z=t.^<span class="number">2</span>;</span><br><span class="line"><span class="built_in">plot3</span>(x,y,z);<span class="built_in">hold</span> on;<span class="comment">% 添加新绘制图时保留当前绘图</span></span><br><span class="line">stem3(x,y,z);<span class="built_in">hold</span> on;</span><br><span class="line">bar3(x,y,z);<span class="built_in">hold</span> on;</span><br><span class="line">xlabel(<span class="string">&#x27;x轴&#x27;</span>);ylabel(<span class="string">&#x27;y轴&#x27;</span>);zlabel(<span class="string">&#x27;z轴&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/04/08/rbQhnz92BNkyqST.png" alt="image-20220408161902325"></p>
</li>
<li><p>例：子图的使用和绘制，有排球：</p>
<ul>
<li>绘制魔方矩阵的三维线形图；</li>
<li>绘制曲线y&#x3D;2sinx 的三维条形图</li>
<li>已知 x&#x3D;[2347,1827,2043,3025],绘制三维饼图</li>
<li>用随机的顶点坐标值画出5个黄色三角形</li>
</ul>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>);bar3(<span class="built_in">magic</span>(<span class="number">4</span>));</span><br><span class="line">title(<span class="string">&#x27;魔方矩阵的三维条形图&#x27;</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>);y=<span class="number">2</span>*<span class="built_in">sin</span>(<span class="number">0</span>:<span class="built_in">pi</span>/<span class="number">6</span>:<span class="number">2</span>*<span class="built_in">pi</span>);</span><br><span class="line">stem3(y);title(<span class="string">&#x27;三维杆形图&#x27;</span>);<span class="comment">% 绘制三维离散序列数据</span></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>);pie3([<span class="number">25</span>,<span class="number">20</span>,<span class="number">22</span>,<span class="number">23</span>]);</span><br><span class="line">title(<span class="string">&#x27;饼形图&#x27;</span>);subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line">fill3(<span class="built_in">rand</span>(<span class="number">3</span>,<span class="number">5</span>),<span class="built_in">rand</span>(<span class="number">3</span>,<span class="number">5</span>),<span class="built_in">rand</span>(<span class="number">3</span>,<span class="number">5</span>),<span class="string">&#x27;y&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;随机数填充图&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/04/08/k62HtpxbnNo5TzE.png" alt="image-20220408161801568"></p>
</li>
</ul>
<h2 id="4、绘制三维曲面图"><a href="#4、绘制三维曲面图" class="headerlink" title="4、绘制三维曲面图"></a>4、绘制三维曲面图</h2><h4 id="（1）三维网格曲面图"><a href="#（1）三维网格曲面图" class="headerlink" title="（1）三维网格曲面图"></a>（1）三维网格曲面图</h4><p><strong>三维网格是有一些四边形相互连接在一起构建成的一种曲面图</strong></p>
<ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">mesh(x,y,z,c)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：</p>
<ul>
<li>x、y、z 是维数同样的矩阵，x、y是网格坐标矩阵，z是网格电商的高度矩阵，c用于指定在不同高度下的颜色范围</li>
<li>c省略时，c&#x3D;z 即颜色的设定是正比于图形的高度</li>
<li>当 x、y是向量时，要求 **<code>x 的长度必须等于z矩阵的列，y的长度必须等于z的行</code>**。x、y相邻两元素的组合构成网格点的 x、y坐标，z坐标则取自z矩阵，然后绘制三维曲线</li>
</ul>
</blockquote>
</li>
<li><p>例：根据函数 z&#x3D; f(x,y)的x和y坐标找出z的高度，绘制<code>z=x^2+y^2</code>的三维网格图</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x=<span class="number">-5</span>:<span class="number">5</span>;y=x;</span><br><span class="line">[x,y]=<span class="built_in">meshgrid</span>(x,y);   <span class="comment">% 只会返回绘图点的值而不绘图</span></span><br><span class="line">z=x.^<span class="number">2</span>+y.^<span class="number">2</span>;</span><br><span class="line">mesh(x,y,z)</span><br><span class="line">xlabel(<span class="string">&#x27;x轴&#x27;</span>);ylabel(<span class="string">&#x27;y轴&#x27;</span>);zlabel(<span class="string">&#x27;z轴&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/04/08/MrsyDawqkHTBjXU.png" alt="image-20220408161830617"></p>
</li>
<li><p>例：利用 mesh( )函数 绘制 z&#x3D;sin(x)cos(x) 的三维网格图</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x=<span class="number">0</span>:<span class="number">0.1</span>:<span class="number">2</span>*<span class="built_in">pi</span>;</span><br><span class="line">[x,y]=<span class="built_in">meshgrid</span>(x);</span><br><span class="line">z=<span class="built_in">sin</span>(y).*<span class="built_in">cos</span>(x);</span><br><span class="line">mesh(x,y,z);</span><br><span class="line">xlabel(<span class="string">&#x27;x-axis&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;y-axis&#x27;</span>);</span><br><span class="line">zlabel(<span class="string">&#x27;z-axis&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;mesh&#x27;</span>);pause  <span class="comment">% pause 暂时停止执行MATLAB</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/04/08/FdT6UIlPygbGsfx.png" alt="image-20220408155742391"></p>
</li>
<li><p>例：绘制函数   z &#x3D; sin(x+sin(y))-x&#x2F;10 在 （0,4π) 的三维网格图</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">close;</span><br><span class="line">[x,y]=<span class="built_in">meshgrid</span>(<span class="number">0</span>:<span class="number">0.25</span>:<span class="number">4</span>*<span class="built_in">pi</span>);</span><br><span class="line">z=<span class="built_in">sin</span>(x+<span class="built_in">sin</span>(y))-x/<span class="number">10</span>;</span><br><span class="line">mesh(x,y,z);</span><br><span class="line">axis([<span class="number">0</span> <span class="number">4</span>*<span class="built_in">pi</span> <span class="number">0</span> <span class="number">4</span>*<span class="built_in">pi</span> <span class="number">-2.5</span> <span class="number">1</span>]);</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/04/08/minar1OTb6kKwtj.png" alt="image-20220408163437395"></p>
</li>
</ul>
<h4 id="（2）三维阴影曲面图"><a href="#（2）三维阴影曲面图" class="headerlink" title="（2）三维阴影曲面图"></a>（2）三维阴影曲面图</h4><ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">surf(x,y,z,c)  </span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>x、y、z 含义与mesh相同<ul>
<li>x、y、z 是维数同样的矩阵，x、y是网格坐标矩阵，z是网格电商的高度矩阵，c用于指定在不同高度下的颜色范围</li>
<li>c省略时，c&#x3D;z 即颜色的设定是正比于图形的高度</li>
<li>当 x、y是向量时，要求 **<code>x 的长度必须等于z矩阵的列，y的长度必须等于z的行</code>**。x、y相邻两元素的组合构成网格点的 x、y坐标，z坐标则取自z矩阵，然后绘制三维曲线</li>
</ul>
</li>
<li>他们均使用网格矩阵 messhgrid 函数产生坐标，然后回图自动着色。</li>
<li>其三维阴影曲面 surf 函数各个四边形的表面颜色分部通过 shading 命令指定</li>
</ul>
</blockquote>
</li>
<li><p>例：绘制函数 z&#x3D;sin(x+sin(y))-x&#x2F;10 在（0,4π）的三维曲面图</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">[x,y]=<span class="built_in">meshgrid</span>(<span class="number">0</span>:<span class="number">0.25</span>:<span class="number">4</span>*<span class="built_in">pi</span>);</span><br><span class="line">z=<span class="built_in">sin</span>(x+<span class="built_in">sin</span>(y))-x/<span class="number">10</span>;</span><br><span class="line">surf(x,y,z);</span><br><span class="line">axis([<span class="number">0</span> <span class="number">4</span>*<span class="built_in">pi</span> <span class="number">0</span> <span class="number">4</span>*<span class="built_in">pi</span> <span class="number">-2.5</span> <span class="number">1</span>]);</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/04/08/5lNgHO4eBiqn27j.png" alt="image-20220408164028266"></p>
</li>
<li><p>例：绘制马铃函数 z&#x3D;f(x,y)&#x3D;x^2-y^2的三维曲画图</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x=<span class="number">-10</span>:<span class="number">0.1</span>:<span class="number">10</span>;</span><br><span class="line">[xx,yy]=<span class="built_in">meshgrid</span>(x);</span><br><span class="line">zz=xx.^<span class="number">2</span>-yy.^<span class="number">2</span>;</span><br><span class="line">surf(xx,yy,zz);</span><br><span class="line">title(<span class="string">&#x27;马铃面&#x27;</span>);xlable(<span class="string">&#x27;x轴&#x27;</span>)</span><br><span class="line">ylable(<span class="string">&#x27;y轴&#x27;</span>);zlable(<span class="string">&#x27;z轴&#x27;</span>);</span><br><span class="line">grid on;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/04/08/UPqZIDfSGrvlYTy.png" alt="image-20220408165042125"></p>
<p><img src="https://s2.loli.net/2022/04/08/I2hb4gYNWftZjnl.png" alt="image-20220408165153631"></p>
</li>
<li><p>例：绘制函数 z&#x3D;f(x,y)&#x3D;x+2y^2 的曲面函数</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">xx=<span class="built_in">linspace</span>(<span class="number">-1</span>,<span class="number">1</span>,<span class="number">50</span>); <span class="comment">% 生成线性间距变量</span></span><br><span class="line">yy=<span class="built_in">linspace</span>(<span class="number">-2</span>,<span class="number">2</span>,<span class="number">100</span>);</span><br><span class="line">[x,y]=<span class="built_in">meshgrid</span>(xx,yy);</span><br><span class="line">z=x.^<span class="number">2</span>+<span class="number">2</span>*y.^<span class="number">2</span>;</span><br><span class="line">surf(x,y,z);</span><br></pre></td></tr></table></figure>

<p><a href="https://fubaisen.github.io/2022/03/31/MATLAB%E5%AD%A6%E4%B9%A0/%E8%A1%A5%E5%85%85%E6%96%87%E4%BB%B6/15_linspace%E7%94%A8%E6%B3%95">linspace用法</a></p>
<p><img src="https://s2.loli.net/2022/04/08/9kmN1PufMlOhHvp.png" alt="image-20220408170127534"></p>
</li>
<li><p>例：绘制 <img src="https://s2.loli.net/2022/04/08/v4ms7KtkiEZogdl.jpg" alt="35d2de6eb4eba4be362eadb377d8cbb" style="zoom:25%;" />函数的网格图与网格面</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x=<span class="number">-10</span>:<span class="number">0.5</span>:<span class="number">10</span>;</span><br><span class="line">[xx,yy]=<span class="built_in">meshgrid</span>(x);</span><br><span class="line">R=<span class="built_in">sqrt</span>(xx.^<span class="number">2</span>+yy.^<span class="number">2</span>);</span><br><span class="line">zz=<span class="built_in">sin</span>(R)./R;</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>);mesh(xx,yy,zz);</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>);surf(xx,yy,zz);</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/04/08/cqCoQ3zIib8hgJD.png" alt="image-20220408170458185"></p>
<blockquote>
<p>区别：</p>
<p>　　　　（1）网线图：线条有颜色，内部是无颜色</p>
<p>　　　　（2）曲面图：线条是黑色的，内部有颜色（把线条之间的空挡填充颜色，沿z轴按每一网格变化）</p>
<p><img src="https://s2.loli.net/2022/04/09/MNi9qUH8goxXQvn.png" alt="image-20220409003850901.png"></p>
</blockquote>
</li>
</ul>
<h2 id="5、绘制三维立体图"><a href="#5、绘制三维立体图" class="headerlink" title="5、绘制三维立体图"></a>5、绘制三维立体图</h2><p><strong>MATLAB提供了球面和柱面等标准的三维曲面绘制函数，使用户可以很方便地得到标准三维曲面图</strong></p>
<h4 id="（1）球曲面"><a href="#（1）球曲面" class="headerlink" title="（1）球曲面"></a>（1）球曲面</h4><ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">spere(n)   <span class="comment">% 画n等分球面，n表示球面绘制的精度，默认半径=1 ，n=20</span></span><br><span class="line">[x,y,z]=spere(n)   <span class="comment">% 获取球面 x、y、z空间坐标位置</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>例：绘制 当 n&#x3D;4,6,20,40 时不同球面图</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>);sphere(<span class="number">4</span>);title(<span class="string">&#x27;n=4&#x27;</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>);sphere(<span class="number">6</span>);title(<span class="string">&#x27;n=6&#x27;</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>);sphere(<span class="number">20</span>);title(<span class="string">&#x27;n=20&#x27;</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>);sphere(<span class="number">40</span>);title(<span class="string">&#x27;n=40&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/04/08/1xpNtqHI7ahXzBS.png" alt="image-20220408231458781"></p>
</li>
</ul>
<h4 id="（2）柱面图"><a href="#（2）柱面图" class="headerlink" title="（2）柱面图"></a>（2）柱面图</h4><ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">cylinder(R,n)   <span class="comment">% R 为半径，n为煮面圆周等分数</span></span><br><span class="line">[x,y,z]=cylinder(R,n)  <span class="comment">% x,y,z代表空间坐标位置</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：</p>
<ul>
<li>若在调用该函数是不带输入参数，则直接绘制所需柱面</li>
<li>n决定了柱面的圆滑程度，其默认值为 20 。若 n 值取得比较小，则绘制出多面体的表面图</li>
</ul>
</blockquote>
</li>
<li><p>例：绘制当 n &#x3D; 3,6,20,50时的不同柱面图</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">t=<span class="built_in">linspace</span>(<span class="built_in">pi</span>/<span class="number">2</span>,<span class="number">3.5</span>*<span class="built_in">pi</span>,<span class="number">50</span>);</span><br><span class="line">R=<span class="built_in">cos</span>(t)+<span class="number">2</span>;</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>);cylinder(R,<span class="number">3</span>);title(<span class="string">&#x27;n=3&#x27;</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>);cylinder(R,<span class="number">6</span>);title(<span class="string">&#x27;n=6&#x27;</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>);cylinder(R,<span class="number">20</span>);title(<span class="string">&#x27;n=20&#x27;</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>);cylinder(R,<span class="number">50</span>);title(<span class="string">&#x27;n=50&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/04/08/bzmOkSGCEFWoxRa.png" alt="image-20220408231433535"></p>
</li>
<li><p>例：绘制函数 2+cos²t 的柱面图</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">figure</span>(<span class="number">2</span>)</span><br><span class="line">t=<span class="number">0</span>:<span class="built_in">pi</span>/<span class="number">10</span>:<span class="number">2</span>*<span class="built_in">pi</span>;</span><br><span class="line">[x,y,z]=cylinder(<span class="number">2</span>+(<span class="built_in">cos</span>(t).^<span class="number">2</span>));</span><br><span class="line">surf(x,y,z);</span><br><span class="line">axis square     <span class="comment">% 产生正方形坐标系</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/04/08/umGFUWdyIJvTowe.png" alt="image-20220408231416721"></p>
</li>
</ul>
<h4 id="（3）利用多峰函数绘图"><a href="#（3）利用多峰函数绘图" class="headerlink" title="（3）利用多峰函数绘图"></a>（3）利用多峰函数绘图</h4><ul>
<li><p><strong>多峰函数为：</strong><img src="https://s2.loli.net/2022/04/08/j1FpfYE5RNDKWib.jpg" alt="088acea2090df91417d2a5944b4ad06"></p>
</li>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">peaks(n)   		  <span class="comment">% 输出n×n 矩阵峰值函数图形</span></span><br><span class="line">[x,y,z]=peaks(n)  <span class="comment">% x,y,z代表空间坐标位置</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>例：绘制多峰函数</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">[x,y,z]=peaks(<span class="number">30</span>);</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>);surf(x,y,z)</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>);surfc(x,y,z)</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/04/08/UDKlgwuW6P9mO8i.png" alt="image-20220408231340317"></p>
</li>
</ul>
<h2 id="6、图形颜色的修饰"><a href="#6、图形颜色的修饰" class="headerlink" title="6、图形颜色的修饰"></a>6、图形颜色的修饰</h2><ul>
<li><p>MATLAB有极好的颜色表现功能</p>
</li>
<li><p><strong>colormap实际上是一个 m×3 矩阵，m为颜色维数。</strong></p>
</li>
<li><p>用 MAP矩阵映射当前图形的色图，<strong>每一行的3个值都为 0~1 之间的数，分别代表颜色组成的 RGB 值，</strong></p>
<ul>
<li>如[0 0 1]代表蓝色。</li>
</ul>
</li>
<li><p>系统自带了一些色图，例如输入 <strong>winter 就可以看到它是一个 63×3 的矩阵</strong>	</p>
</li>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clormap(MAP)   	   <span class="comment">% 色图设定函数，MAP为 m×3维色矩阵</span></span><br><span class="line">clolrmap([R,G,B])  <span class="comment">% 绘制当前颜色</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="（1）三基色调色"><a href="#（1）三基色调色" class="headerlink" title="（1）三基色调色"></a>（1）三基色调色</h4><table>
<thead>
<tr>
<th>三基色比例</th>
<th>颜色</th>
</tr>
</thead>
<tbody><tr>
<td>[0 0 0]</td>
<td>黑色</td>
</tr>
<tr>
<td>[0 0 1]</td>
<td>蓝色</td>
</tr>
<tr>
<td>[0 1 0]</td>
<td>绿色</td>
</tr>
<tr>
<td>[0 1 1]</td>
<td>浅蓝色</td>
</tr>
<tr>
<td>[1 0 0]</td>
<td>红色</td>
</tr>
<tr>
<td>[1 0 1]</td>
<td>品红色</td>
</tr>
<tr>
<td>[1 1 0]</td>
<td>黄色</td>
</tr>
<tr>
<td>[1 1 1]</td>
<td>白色</td>
</tr>
<tr>
<td>[0.5 0.5 0.5]</td>
<td>灰色</td>
</tr>
<tr>
<td>[0.5 0 0]</td>
<td>暗红色</td>
</tr>
<tr>
<td>[1 0.26 0.4]</td>
<td>铜色</td>
</tr>
<tr>
<td>[0.49 1 0.8]</td>
<td>浅绿色</td>
</tr>
<tr>
<td>[0.49 1 0.83]</td>
<td>宝石蓝</td>
</tr>
<tr>
<td>[1 0.5 0]</td>
<td>橘色</td>
</tr>
<tr>
<td>[0.667 0.667 1]</td>
<td>天蓝</td>
</tr>
<tr>
<td>[0.5 0 0.5]</td>
<td>紫色</td>
</tr>
</tbody></table>
<h4 id="（2）常见色图配置"><a href="#（2）常见色图配置" class="headerlink" title="（2）常见色图配置"></a>（2）常见色图配置</h4><table>
<thead>
<tr>
<th><code>色图函数名</code></th>
<th><code>颜色性质及说明</code></th>
</tr>
</thead>
<tbody><tr>
<td>bone</td>
<td>黑色渐变到白色</td>
</tr>
<tr>
<td>cool</td>
<td>青色渐变到品红色</td>
</tr>
<tr>
<td>copper</td>
<td>黑色渐变到亮铜色</td>
</tr>
<tr>
<td>flag</td>
<td>红-白-蓝-黑交错色</td>
</tr>
<tr>
<td>gray</td>
<td>线性灰度</td>
</tr>
<tr>
<td>hot</td>
<td>黑-红-黄-白交错色</td>
</tr>
<tr>
<td>hsv(默认值)</td>
<td>带饱和值的色图、颜色从红、黄、绿、青、蓝到品红，循环变化</td>
</tr>
<tr>
<td>line</td>
<td>产生由坐标系 ColoOrder特性和暗灰色指定的颜色</td>
</tr>
<tr>
<td>jet</td>
<td>色图是一种变体，颜色从蓝、红、青、黄到品红变化</td>
</tr>
<tr>
<td>pink</td>
<td>淡粉红色</td>
</tr>
<tr>
<td>prism</td>
<td>光谱，重复六种颜色：红、品红、黄、绿、蓝、雪青</td>
</tr>
<tr>
<td>spring</td>
<td>由品红和黄色构成的颜色</td>
</tr>
<tr>
<td>summer</td>
<td>由绿色和黄色构成的颜色</td>
</tr>
<tr>
<td>autumn</td>
<td>由红色渐变到黄色</td>
</tr>
<tr>
<td>winter</td>
<td>由蓝色和绿色构建的颜色</td>
</tr>
<tr>
<td>while</td>
<td>全白的单色色图</td>
</tr>
</tbody></table>
<ul>
<li><p>例：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">figure</span>;sphere(<span class="number">30</span>);colormap([<span class="number">1</span> <span class="number">1</span> <span class="number">0</span>])  <span class="comment">% colormap 查看并设置当前颜色图</span></span><br><span class="line"><span class="built_in">figure</span>;sphere(<span class="number">30</span>);colormap([<span class="number">0.5</span> <span class="number">0</span> <span class="number">0.5</span>])</span><br><span class="line"><span class="built_in">figure</span>;sphere(<span class="number">30</span>);colormap(hot)</span><br><span class="line"><span class="built_in">figure</span>;sphere(<span class="number">30</span>);colormap(winter)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="7、色彩的渲染"><a href="#7、色彩的渲染" class="headerlink" title="7、色彩的渲染"></a>7、色彩的渲染</h2><h4 id="（1）着色函数-shading"><a href="#（1）着色函数-shading" class="headerlink" title="（1）着色函数 shading"></a>（1）着色函数 <code>shading</code></h4><ul>
<li>shading 是阴影函数 。控制图形对象着色及图形的渲染方式包括以下三种形式：<ul>
<li>shading faceted :在曲线或图形对象上叠加黑色的网格线</li>
<li>shading flat :在shading faceted 的基础上去掉图上的网格线</li>
<li>shading interp :在图形对象的颜色进行色彩的插值处理，使色彩平滑过渡</li>
</ul>
</li>
</ul>
<h4 id="（2）关于着色的说明"><a href="#（2）关于着色的说明" class="headerlink" title="（2）关于着色的说明"></a>（2）关于着色的说明</h4><ul>
<li><p>shading faceted 命令将每个网格片用其高度对应的颜色进行着色、但网格线仍保留，其颜色是黑色。这是系统的默认着色方式。</p>
</li>
<li><p>shading fat 命令将图形渲染为平坦状态，即每个小方块表面取一种颜色，其值由线段两端点或小方块四角的颜色值决定。</p>
</li>
<li><p>shading interp 命令表示每条线段或每个小方块面的颜色是线性渐变的，其值由两端点或小方块四角颜色的插值决定。</p>
</li>
<li><p>维表面图形的着色是在网格图的每一个网格片上涂上颜色。shading flat 命令将每个网格片用同一个颜色进行着色，且网格线也用相应的颜色，从而使得图形表面显得更加光滑。shading interp命令在网格片内采用颜色插值处理，得出的表面图显得最光滑。</p>
</li>
<li><p>surf 函数用默认的着色方式对网格片着色。除此之外，还可以用  shading 命令来改变着色方式</p>
</li>
<li><p>例：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>);peaks(<span class="number">30</span>);shading faceted 				<span class="comment">%默认的自动着色 </span></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>);peaks(<span class="number">30</span>);shading flat 					<span class="comment">%去掉黑色线条，根据小方块的值确定色 </span></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>);peaks(<span class="number">30</span>);shading interp 				<span class="comment">%每条线段或每个小方块表面的颜色是线性渐变的，其值曲线段两端点或小方块四角颜色的插值决定</span></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>);peaks(<span class="number">30</span>);shading interp;colormap(hot)	<span class="comment">%在暖色基础上,将网格片内采用颜色插值处理，得出的表面图显得最光滑</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/04/09/rcd8zgwZ9YVUTOP.png" alt="image-20220409002715171"></p>
</li>
<li><p>例：对球体进行不同着色处理</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">[x,y,z]=sphere(<span class="number">20</span>);</span><br><span class="line">colormap(cool);</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>);surf(x,y,z);</span><br><span class="line">axis equal;subplot(<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line">surf(x,y,z);shading flat;</span><br><span class="line">anis equal;subplot(<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line">surf(x,y,z);shading interp;</span><br><span class="line">anis equual;   <span class="comment">% axis equal将两坐标轴设为相等</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/04/09/oT7t9qvGuHcQ6l1.png" alt="image-20220409003247984"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>03_MATLAB的静态与动态绘图功能</category>
      </categories>
      <tags>
        <tag>MATLAB学习</tag>
      </tags>
  </entry>
  <entry>
    <title>03_创建动画过程</title>
    <url>/2022/04/06/MATLAB%E5%AD%A6%E4%B9%A0/03_MATLAB%E7%9A%84%E9%9D%99%E6%80%81%E4%B8%8E%E5%8A%A8%E6%80%81%E7%BB%98%E5%9B%BE%E5%8A%9F%E8%83%BD/03_%E5%88%9B%E5%BB%BA%E5%8A%A8%E7%94%BB%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="三、创建动画过程"><a href="#三、创建动画过程" class="headerlink" title="三、创建动画过程"></a>三、创建动画过程</h1><h2 id="1、三维图形不同姿态"><a href="#1、三维图形不同姿态" class="headerlink" title="1、三维图形不同姿态"></a>1、三维图形不同姿态</h2><p><strong>从不同角度观察物体所看到的物体形状是不一样的，同样从不同视点绘制的三维图形其形状也是不一样的。视点位置可由方位角和仰角表示，Matlab提供了设置视点的函数。</strong></p>
<ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">view(az,el)  </span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>az 为方位角，el 为仰角，它们均以度为单位</li>
<li>系统默认的视点定义为：<ul>
<li>方位角 -37.5度，</li>
<li>仰角  30度</li>
</ul>
</li>
</ul>
</blockquote>
</li>
<li><p>例：从不同试点绘制多封函数曲面</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>);mesh(peaks);     <span class="comment">% subplot：在各个分块位置创建坐标区  mesh：网格曲面图 peaks：峰值函数</span></span><br><span class="line">view(<span class="number">-37.2</span>,<span class="number">30</span>);title(<span class="string">&#x27;方位角 = 37.5度 ，仰角 = 30度&#x27;</span>);<span class="comment">% view 相机曲线</span></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>);mesh(peaks);</span><br><span class="line">view(<span class="number">0</span>,<span class="number">90</span>);title(<span class="string">&#x27;方位角 = 0度 ， 仰角 = 90度&#x27;</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>);mesh(peaks);</span><br><span class="line">view(<span class="number">90</span>,<span class="number">0</span>);title(<span class="string">&#x27;方位角 = 90度 ， 仰角 = 0度&#x27;</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>);mesh(peaks);</span><br><span class="line">view(<span class="number">-7</span>,<span class="number">-10</span>);title(<span class="string">&#x27;方位角 = -7度 ， 仰角 = -10度&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/04/07/JPaZczdUChfTnIB.png" alt="image-20220407134447263"></p>
<blockquote>
<p><strong>peaks</strong>（峰值函数）是<strong>MATLAB</strong>自带的函数，<strong>peaks</strong> 函数是</p>
<p>典型的多元函数，其本质是二元高斯分布的概率密度函数。</p>
</blockquote>
</li>
</ul>
<h2 id="2、动画函数"><a href="#2、动画函数" class="headerlink" title="2、动画函数"></a>2、动画函数</h2><h4 id="（1）-getframe函数"><a href="#（1）-getframe函数" class="headerlink" title="（1） getframe函数"></a>（1） <code>getframe</code>函数</h4><ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">getframe(n)  </span><br><span class="line"><span class="comment">% 生成动画的数据矩阵，它截取每幅画面信息（动画中的一帧）并保存为一个n幅画面的列向量</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="（2）moviein函数"><a href="#（2）moviein函数" class="headerlink" title="（2）moviein函数"></a>（2）<code>moviein</code>函数</h4><ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">moviein(n)</span><br><span class="line"><span class="comment">% 用来建立一个足够大的n列矩阵。为保存n幅画面的数据创建一个空间，以备快速播放</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="（3）movie函数"><a href="#（3）movie函数" class="headerlink" title="（3）movie函数"></a>（3）<code>movie</code>函数</h4><ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">movie(m,n)</span><br><span class="line"><span class="comment">% 播放由矩阵m所定义的画面n次，默认是播放一次</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="（4）drawnow函数"><a href="#（4）drawnow函数" class="headerlink" title="（4）drawnow函数"></a>（4）<code>drawnow</code>函数</h4><ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">drawnow</span><br><span class="line"><span class="comment">% 刷新屏幕。当代码执行时间长，需要反复执行绘图，该函数可实现看到图像每一步的变化情况</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3、创建动画步骤"><a href="#3、创建动画步骤" class="headerlink" title="3、创建动画步骤"></a>3、创建动画步骤</h2><p>（1）调用 <code>moviein</code> 函数对内存进行初始化，创建一个足够大的矩阵，使之能容纳基于当前坐标轴大小的一系列指定图形</p>
<p>（2）调用 <code>getframe</code> 函数把捕捉的动画逐一生成帧。该函数返回一个列矢量，利用这个矢量创建一个电影动画矩阵。一般将该函数放到 <code>for循环</code> 中可得到一系类的动画帧</p>
<ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">F = geffame    		<span class="comment">% 从当前图形框中得到动画帧</span></span><br><span class="line">F = geffame(f) 		<span class="comment">% 从图形句柄h中得到动画帧</span></span><br><span class="line">F = geffame(h,rect) <span class="comment">% 从图形句柄h中得指定区域 rect中得到动画帧</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>（3）调用 <code>movie</code>函数按照指定的速度和次数运行该动画。当创建了一系列的动画帧后，可以利用<code>movie 函数</code>播放这些动画帧</p>
<ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">movie(M) 			<span class="comment">% 将矩阵M中的动画帧播放一次     movie 播放录制的影片帧</span></span><br><span class="line">movie(M,n)			<span class="comment">% 将矩阵M中的动画帧播放n次</span></span><br><span class="line">movie(M,n,fps)		<span class="comment">% 将矩阵M中的动画帧以每秒 fps 帧的速度播放n次</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>例：绘制peaks 函数曲面并且播放它绕z轴旋转的动画</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear;</span><br><span class="line">peaks(<span class="number">30</span>);axis off;              <span class="comment">% axis设置坐标轴范围和横纵比  axis visbility 坐标曲线条和背景的可见性</span></span><br><span class="line">shading interp;colormap(hot);    <span class="comment">% shading 设置颜色着色属性  colormap 查看并设置当前颜色图</span></span><br><span class="line">m = moviein(<span class="number">20</span>);                 <span class="comment">% 建立20列矩阵</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">20</span> </span><br><span class="line">    view(<span class="number">-27.5</span>+<span class="number">24</span>*(<span class="built_in">i</span> <span class="number">-1</span>),<span class="number">30</span>)</span><br><span class="line">    m(:,<span class="built_in">i</span>)=getframe;             <span class="comment">% 捕获坐标曲或图窗作为影片区</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">movie(m,<span class="number">2</span>)                       <span class="comment">% 播放画面两次</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/04/07/94otDUIvjuZYQp8.png" alt="image-20220407152133092"></p>
</li>
<li><p>例：播放一个直径不断变化的球体动画</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">n = <span class="number">30</span>;</span><br><span class="line">[x,y,z]=sphere;                  <span class="comment">% sphere创建球面</span></span><br><span class="line">m=moviein(n);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:n</span><br><span class="line">    surf(<span class="built_in">i</span>*x,<span class="built_in">i</span>*y,<span class="built_in">i</span>*z)            <span class="comment">% surf 曲面图</span></span><br><span class="line">    m(:,<span class="number">1</span>)=getframe;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">movie(m,<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://ww2.mathworks.cn/help/matlab/ref/surf.html">surf</a></p>
</blockquote>
<p><img src="https://s2.loli.net/2022/04/08/Oq4gRvZD23Y5eWQ.png" alt="image-20220408091058462"></p>
</li>
<li><p>例播放袁皇上的画圆动画</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x=<span class="number">0</span>:<span class="number">0.01</span>:<span class="number">2</span>*<span class="built_in">pi</span>;</span><br><span class="line">y=<span class="built_in">sin</span>(x);z=<span class="built_in">cos</span>(x);</span><br><span class="line">h=<span class="built_in">plot</span>(y,z,<span class="string">&#x27;b-&#x27;</span>);</span><br><span class="line">axis([<span class="number">-2</span> <span class="number">2</span> <span class="number">-2</span> <span class="number">2</span>]);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">axis square;</span><br><span class="line"><span class="keyword">for</span> k=<span class="number">0</span>:<span class="number">0.01</span>:<span class="number">2</span>*<span class="built_in">pi</span></span><br><span class="line">    x=<span class="built_in">sin</span>(k);</span><br><span class="line">    y=<span class="built_in">cos</span>(k);</span><br><span class="line">    <span class="built_in">plot</span>(x,y,<span class="string">&#x27;r*&#x27;</span>);title(<span class="string">&#x27;播放在圆环上画圆的动画&#x27;</span>)</span><br><span class="line">    drawnow;  <span class="comment">% 更新图窗并处理回调</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/04/09/hPnpjE6XoM1BKrU.png" alt="image-20220409110857160.png"></p>
</li>
<li><p>例：播放绘制衰减曲线 <img src="https://s2.loli.net/2022/04/09/NurGwBAsTMFLa7I.jpg" alt="6d3ec6190c380fe23b34ee83792fb31.jpg" style="zoom: 25%;" />的动图</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x=<span class="number">0</span>:<span class="number">0.1</span>:<span class="number">8</span>*<span class="built_in">pi</span>;</span><br><span class="line">h=<span class="built_in">plot</span>(x,<span class="built_in">sin</span>(x).*<span class="built_in">exp</span>(-x/<span class="number">5</span>));title(<span class="string">&#x27;播放绘制衰减曲线的动画&#x27;</span>)   <span class="comment">% &quot;EraseMode\属性可以实现显示新对象，擦除旧对象，而又不破坏背景图案。</span></span><br><span class="line">axis([-<span class="built_in">inf</span> <span class="built_in">inf</span> <span class="number">-1</span> <span class="number">1</span>]);grid on</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">5000</span></span><br><span class="line">    y=<span class="built_in">sin</span>(x+<span class="built_in">i</span>/<span class="number">50</span>).*<span class="built_in">exp</span>(-x/<span class="number">5</span>);</span><br><span class="line">    set(h,<span class="string">&#x27;ydata&#x27;</span>,y);               <span class="comment">% 设置新坐标</span></span><br><span class="line">    drawnow                         <span class="comment">% 刷新</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p><a href="https://fubaisen.github.io/2022/03/31/MATLAB%E5%AD%A6%E4%B9%A0/%E8%A1%A5%E5%85%85%E6%96%87%E4%BB%B6/16_EraseMode%E4%BB%A3%E6%9B%BF%E6%96%B9%E6%B3%95">EraseMode代替方法</a></p>
</li>
<li><p>例：绘制带圆盘的峰值动图效果图</p>
<p>程序命令：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear;</span><br><span class="line">r=<span class="built_in">linspace</span>(<span class="number">0</span>,<span class="number">4</span>,<span class="number">30</span>);</span><br><span class="line">t=<span class="built_in">linspace</span>(<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">pi</span>,<span class="number">50</span>);</span><br><span class="line">[rr,tt]=<span class="built_in">meshgrid</span>(r,t);</span><br><span class="line">xx=rr.*<span class="built_in">cos</span>(tt);</span><br><span class="line">yy=rr.*<span class="built_in">sin</span>(tt);</span><br><span class="line">zz=peaks(xx,yy);</span><br><span class="line">n=<span class="number">30</span>;</span><br><span class="line">scale=<span class="built_in">cos</span>(<span class="built_in">linspace</span>(<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">pi</span>,n));</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:n</span><br><span class="line">    surf(xx,yy,zz*scale(<span class="built_in">i</span>));</span><br><span class="line">    axis([-<span class="built_in">inf</span> <span class="built_in">inf</span> -<span class="built_in">inf</span> <span class="built_in">inf</span> <span class="number">-8.5</span> <span class="number">8.5</span>]);</span><br><span class="line">    box on     </span><br><span class="line">    M(<span class="built_in">i</span>)=getframe;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">movie(M,<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/04/09/dM8clfGHPryWB4e.png" alt="image-20220409163128117.png"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>03_MATLAB的静态与动态绘图功能</category>
      </categories>
      <tags>
        <tag>MATLAB学习</tag>
      </tags>
  </entry>
  <entry>
    <title>02_Simulink连续模块库</title>
    <url>/2022/04/18/MATLAB%E5%AD%A6%E4%B9%A0/07_Simulink%E5%9C%A8%E8%87%AA%E5%8A%A8%E6%8E%A7%E5%88%B6%E7%90%86%E8%AE%BA%E4%B8%AD%E7%9A%84%E4%BB%BF%E7%9C%9F/02_Simulink%E8%BF%9E%E7%BB%AD%E6%A8%A1%E5%9D%97%E5%BA%93/</url>
    <content><![CDATA[<h1 id="连续模块库"><a href="#连续模块库" class="headerlink" title="连续模块库"></a>连续模块库</h1><ul>
<li><p>连续时间线系统模块库</p>
<p><img src="https://s2.loli.net/2022/04/18/L94ArZuqj3fzS58.png" alt="image-20220417233107137.png"></p>
</li>
<li><p>连续时间延迟模块库</p>
<p><img src="https://s2.loli.net/2022/04/18/9iIUfxv5GhLbZnz.png" alt="image-20220417233113812.png"></p>
</li>
</ul>
<h2 id="Derivative微分模块"><a href="#Derivative微分模块" class="headerlink" title="Derivative微分模块"></a><img src="https://www.mathworks.com/help/releases/R2022a/simulink/slref/derivative_block_icon.png" alt="Derivative block">Derivative微分模块</h2><p>输出是输入信号的时间导数</p>
<p>适用输入信号为连续信号</p>
<p>对离散信号 进行微分：</p>
<ul>
<li>离散信号保持不变  采用连续信号微分 对应的结果是零值</li>
<li>离散信号变化           采用连续微分模块  输出为一系列的脉冲波形</li>
</ul>
<blockquote>
<p>当信号为非连续信号  使用<img src="https://www.mathworks.com/help/releases/R2022a/simulink/slref/difference_block_icon.png" alt="Difference block">模块</p>
</blockquote>
<blockquote>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>Derivative 模块可近似计算输入信号 u 相对于仿真时间 t 的导数。您将获得以下算式的近似值：<img src="https://s2.loli.net/2022/04/18/OkJNgptb6YCq5U3.png" alt="image-20220418085857978.png"></p>
<p>方法是计算数值差异 Δ<em>u</em>&#x2F;Δ<em>t</em>,其中 Δ<em>u</em> 是输入值的变化，Δ<em>t</em> 是自上一个仿真（主要）时间步以来的时间变化。</p>
<p>此模块接受一个输入并生成一个输出。模块的初始输出为零。</p>
<p>此模块的输入和输出之间的精确关系是：</p>
<p><img src="https://s2.loli.net/2022/04/18/EyMzF6qLUVNZJGu.png" alt="image-20220418085922414.png"></p>
<p>其中 t 是当前仿真时间，<em>T<strong>p</strong>r<strong>e</strong>v<strong>i</strong>o<strong>u</strong>s</em> 是上次仿真输出的时间。后者与上次主时间步的时间相同。</p>
<p>Derivative 模块的输出可能对整个模型的动态比较敏感。</p>
<p>步长越小，此模块的输出曲线就越平滑和准确。</p>
<p>与具有连续状态的模块不同，当此模块的输入快速变化时，求解器不会采用较小的步长。根据驱动信号和模型的动态，此模块的输出信号可能包含意外波动。这些波动主要是由驱动信号输出和求解器步长导致的。</p>
<p>由于存在这种敏感度，因此请将模型构造为使用积分器模块（例如 <a href="https://www.mathworks.com/help/releases/R2022a/simulink/slref/integrator.html">Integrator</a> 模块）而不是 Derivative 模块。Integrator 模块的状态允许求解器调整步长并改进仿真的准确性。请参阅<a href="https://www.mathworks.com/help/releases/R2022a/simulink/ug/best-form-mathematical-models.html#bra6aje">电路模型</a>来获取如何选择最佳形式的数学模型的示例，以避免在模型中使用 Derivative 模块。</p>
<p>如果必须将 Derivative 模块与变步长求解器结合使用，请将求解器最大步长设置为可以使 Derivative 模块生成的回应具有足够准确度的值。为了确定此值，您可能需要使用不同的求解器设置重复运行仿真。</p>
<p>如果此模块的输入为离散信号，则当输入值发生变化时，输入的连续导数会显示一个脉冲。否则为 0。或者，您可以使用信号最后两个值之间的差异定义离散信号的离散导数：</p>
<p><img src="https://s2.loli.net/2022/04/18/BjbDHUCqr2kdpaQ.png" alt="image-20220418085946449.png"></p>
<p>对此方程进行 <em>z</em> 变换会得到：</p>
<p><img src="https://s2.loli.net/2022/04/18/xkAtUJlszybgqBW.png" alt="image-20220418085955758.png"></p>
<p><a href="https://www.mathworks.com/help/releases/R2022a/simulink/slref/discretederivative.html">Discrete Derivative</a> 模块可对此行为进行建模。使用此模块而不是 Derivative 模块可以近似计算离散信号的离散时间导数。</p>
</blockquote>
<h2 id="三种传递模块及相互转化"><a href="#三种传递模块及相互转化" class="headerlink" title="三种传递模块及相互转化"></a>三种传递模块及相互转化</h2><h3 id="State-Space状态空间模块"><a href="#State-Space状态空间模块" class="headerlink" title="State-Space状态空间模块"></a><img src="https://www.mathworks.com/help/releases/R2022a/simulink/slref/state_space_block_icon.png" alt="State-Space block">State-Space状态空间模块</h3><ul>
<li>Simulink &#x2F; Continuous</li>
</ul>
<p><img src="https://s2.loli.net/2022/04/18/HEkV6Jv7RZ9LOIX.png" alt="image-20220418090419906.png"></p>
<p>例：<img src="https://s2.loli.net/2022/04/18/cb8i7jmgfBNqzQa.png" alt="image-20220418090630323.png"></p>
<p>得：<img src="https://s2.loli.net/2022/04/18/FAImywQP3XqdJCf.png" alt="image-20220418090715256.png" style="zoom:80%;" /><img src="https://s2.loli.net/2022/04/18/sJlZNP5m8fcDVOW.png" alt="image-20220418090747180" style="zoom:67%;" /></p>
<p>​		<img src="https://s2.loli.net/2022/04/18/Jb7IE9eBpwjkcDn.png" alt="image-20220418090840230"></p>
<p><img src="https://s2.loli.net/2022/04/18/PyThY1RUG2NlFaE.png" alt="image-20220418091559651"></p>
<p><img src="https://s2.loli.net/2022/04/18/xLRQDMyEmo6i154.png" alt="image.png"></p>
<h4 id="利用-linmod-函数提取状态矩阵"><a href="#利用-linmod-函数提取状态矩阵" class="headerlink" title="利用 linmod 函数提取状态矩阵"></a>利用 linmod 函数提取状态矩阵</h4><p>提取   连续系统状态空间模型 （linmod）、离散系统状态空间模型（dlinmod）</p>
<blockquote>
<p>解决了上一步中 手动求解  状态矩阵</p>
</blockquote>
<p>✎   linmod 适用于连续系统 ，离散系统请使用 dinmod</p>
<p>✎   使用linmod 时系统中不应该包括  <strong>连续微分模块</strong> ，若存在微分环节 ，可以使用 		Switch derivative 模块代替连续微分模块</p>
<ul>
<li><p>Simulink &#x2F; Simulink Extras &#x2F; Linearization</p>
<ul>
<li><p>例：<img src="https://s2.loli.net/2022/04/18/BY62t9ExacICwmQ.png" alt="image-20220418093111963">以传递函数为例</p>
<blockquote>
<p>ps:</p>
<ul>
<li><p>无论是传递函数 还是状态矩阵 它描述的都是这个系统本身的控制特性，与系统的输入和输出是没有关系的  ，则系统无论输入什么函数、信号、输出是什么样子，均不影响状态函数（矩阵）的形式  ——&gt;  输入输出必须以 <code>in</code>  与 <code>out </code> 模块 来代替，使他与实际的输入输出信号无关</p>
<p>传递函数：<img src="https://s2.loli.net/2022/04/18/po4wIbMyxEznGm5.png" alt="image-20220418093804689.png"></p>
</li>
<li><p><img src="https://s2.loli.net/2022/04/18/weVAzkn9NTuS5yd.png" alt="image-20220418094317411.png"></p>
</li>
</ul>
</blockquote>
</li>
</ul>
</li>
</ul>
<p><img src="https://s2.loli.net/2022/04/18/pjxCdhSEXsY4TJR.png" alt="image-20220418101155635.png"></p>
<h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">argout = linmod(<span class="string">&#x27;sys&#x27;</span>);</span><br><span class="line">argout = linmod(<span class="string">&#x27;sys&#x27;</span>, x, u);</span><br><span class="line">argout = linmod(<span class="string">&#x27;sys&#x27;</span>, x, u, para);</span><br><span class="line">argout = linmod(<span class="string">&#x27;sys&#x27;</span>, x, u, <span class="string">&#x27;v5&#x27;</span>);</span><br><span class="line">argout = linmod(<span class="string">&#x27;sys&#x27;</span>, x, u, para, <span class="string">&#x27;v5&#x27;</span>);</span><br><span class="line">argout = linmod(<span class="string">&#x27;sys&#x27;</span>, x, u, para, xpert, upert, <span class="string">&#x27;v5&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><table>
<thead>
<tr>
<th><code>sys</code></th>
<th>从中提取线性模型的 Simulink® 系统的名称。</th>
</tr>
</thead>
<tbody><tr>
<td><code>x</code> 和 <code>u</code></td>
<td>状态 (<code>x</code>) 和输入 (<code>u</code>) 向量。如果指定，它们会设置提取线性模型的工作点。当模型具有使用 Model 模块的模型引用时，您必须使用 Simulink 结构体格式来指定 <code>x</code>。要从模型中提取 <code>x</code> 结构体，请使用以下命令：<code>x = Simulink.BlockDiagram.getInitialState(&#39;sys&#39;);</code>然后，您可以通过编辑 <code>x.signals.values</code> 更改此结构体中的工作点值。如果状态包含不同的数据类型（例如，<code>&#39;double&#39;</code> 和 <code>&#39;uint8&#39;</code>），则您不能使用向量指定此状态。必须改为使用结构体。此外，如果状态数据类型为 <code>&#39;double&#39;</code>，则只能以向量形式指定状态。</td>
</tr>
<tr>
<td><code>Ts</code></td>
<td>离散时间线性化模型的采样时间</td>
</tr>
<tr>
<td><code>&#39;v5&#39;</code></td>
<td>可选参数，用于调用在 MATLAB® 5.3 版之前创建的扰动算法。调用此可选参数等效于调用 <code>linmodv5</code>。</td>
</tr>
<tr>
<td><code>para</code></td>
<td>可选参数的三元素向量：<code>para(1)</code> - 扰动增量值，用于对模型的状态和输入执行扰动。此参数对使用 <code>&#39;v5&#39;</code> 标志的线性化有效。默认值为 1e-05。<code>para(2)</code> - 线性化时间。对于作为时间函数的模块，您可以将此参数设置为非负值，以指定线性化模型时 Simulink 计算模块的时间 (<code>t</code>)。默认值为 0。<code>para(3)</code> - 设置为 <code>para(3)=1</code>，可删除在输入与输出之间没有路径的模块所关联的多余状态。默认值为 0。</td>
</tr>
<tr>
<td><code>xpert</code> 和 <code>upert</code></td>
<td>扰动值用于对模型的所有状态和输入执行扰动。默认值为<code>xpert = para(1) + 1e-3*para(1)*abs(x) upert = para(1) + 1e-3*para(1)*abs(u) </code>当模型具有使用 <a href="https://www.mathworks.com/help/releases/R2022a/simulink/slref/model.html">Model</a> 模块的模型引用时，您必须使用 Simulink 结构体格式来指定 <code>xpert</code>。要提取 <code>xpert</code> 结构体，请使用以下命令：<code>xpert = Simulink.BlockDiagram.getInitialState(&#39;sys&#39;);</code>然后，您可以通过编辑 <code>xpert.signals.values</code> 来更改此结构体中的扰动值。仅当通过调用 <code>linmodv5</code> 或为 <code>linmod</code> 指定 <code>&#39;v5&#39;</code> 输入参数来调用在 MATLAB 5.3 版之前创建的扰动算法时，扰动输入参数才可用。</td>
</tr>
<tr>
<td><code>argout</code></td>
<td>如果您指定如下的等式输出（左侧）端，<code>linmod</code>、<code>dlinmod</code> 和 <code>linmod2</code> 将返回状态空间表示形式：<code>[A,B,C,D] = linmod(&#39;sys&#39;, x, u)</code> 根据指定的状态变量 <code>x</code> 和输入 <code>u</code> 围绕某个工作点获取 <code>sys</code> 的线性化模型。如果您省略 <code>x</code> 和 <code>u</code>，则默认值为零。<code>linmod</code> 和 <code>dlinmod</code> 还会返回线性化系统的传递函数和 MATLAB 数据结构体表示形式，具体取决于您如何指定该方程的输出（左侧）端。使用 <code>linmod</code> 作为示例：<code>[num, den] = linmod(&#39;sys&#39;, x, u)</code> 以传递函数形式返回线性化模型。<code>sys_struc = linmod(&#39;sys&#39;, x, u)</code> 返回包含线性化模型的结构体，其中包括状态名称、输入和输出名称以及有关工作点的信息。</td>
</tr>
</tbody></table>
<blockquote>
<h2 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h2><p><code>linmod</code> 通过对模型中的每个模块分别进行线性化来计算线性状态空间模型。</p>
<p><code>linmod</code> 从以 Simulink 模型描述的常微分方程组中获取线性模型。<strong>使用 Inport 和 Outport 模块在 Simulink 模块图中表示输入和输出。</strong></p>
<p>默认算法对大多数模块使用预编程的分析模块 Jacobian 矩阵，这样生成的线性化应该比通过对模块输入和状态进行数值扰动更准确。Simulink Control Design™ 文档中提供了具有预编程分析 Jacobian 矩阵的模块列表，还按模块讨论了用来进行线性化的分析算法。</p>
<p>默认算法还允许对有问题的模块（如 <a href="https://www.mathworks.com/help/releases/R2022a/simulink/slref/transportdelay.html">Transport Delay</a> 和 <a href="https://www.mathworks.com/help/releases/R2022a/simulink/slref/quantizer.html">Quantizer</a>）进行特殊处理。有关这些模块的详细信息和选项，请参阅这些模块的封装对话框。</p>
<h2 id="附注"><a href="#附注" class="headerlink" title="附注"></a>附注</h2><p>默认情况下，系统时间设置为零。对于依赖于时间的系统，您可以将变量 <code>para</code> 设置为二元素向量，其中第二个元素用于设置要获取线性模型的 <code>t</code> 值。</p>
<p>从非线性模型到线性模型的状态顺序保持不变。对于 Simulink 系统，可以使用以下等式获取包含每个状态关联的模块名称的字符向量变量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[sizes,x0,xstring] = sys</span><br></pre></td></tr></table></figure>

<p>其中 <code>xstring</code> 是字符串向量，它的第 <em>i</em> 行是与第 <code>i</code> 个状态关联的模块名称。图中的输入和输出按顺序编号。</p>
<p>对于单输入多输出系统，您可以使用例程 <code>ss2tf</code> 将它们转换为传递函数形式，或者使用 <code>ss2zp</code> 转换为零极点形式。您也可以使用 <code>ss</code> 将线性化模型转换为 LTI 对象。此函数生成状态空间形式的 LTI 对象，然后可以使用 <code>tf</code> 或 <code>zpk</code> 将该对象进一步转换为传递函数或零极点增益形式。</p>
</blockquote>
<h3 id="Transfer-Fcn传递函数模块"><a href="#Transfer-Fcn传递函数模块" class="headerlink" title="Transfer Fcn传递函数模块"></a><img src="https://www.mathworks.com/help/releases/R2022a/simulink/slref/transfer_fcn_block_icon.png" alt="Transfer Fcn block">Transfer Fcn传递函数模块</h3><p>通过传递函数为线性系统建模</p>
<ul>
<li>Simulink &#x2F; Continuous</li>
</ul>
<p><img src="https://s2.loli.net/2022/04/18/po4wIbMyxEznGm5.png"></p>
<blockquote>
<p>Transfer Fcn 模块通过拉普拉斯域变量 <code>s</code> 的传递函数为线性系统建模。此模块可为单输入单输出 (SISO) 和单输入多输出 (SIMO) 系统建模。</p>
<h3 id="使用此模块的条件"><a href="#使用此模块的条件" class="headerlink" title="使用此模块的条件"></a>使用此模块的条件</h3><p>Transfer Fcn 模块假定满足以下条件：</p>
<ul>
<li><p>传递函数的格式为</p>
<p><em>H</em>(<em>s</em>)&#x3D;<em>y</em>(<em>s</em>)<em>u</em>(<em>s</em>)&#x3D;<em>n<strong>u</strong>m</em>(<em>s</em>)<em>d<strong>e</strong>n</em>(<em>s</em>)&#x3D;<em>n<strong>u</strong>m</em>(1)<em>s<strong>n</strong>n</em>−1+<em>n<strong>u</strong>m</em>(2)<em>s<strong>n</strong>n</em>−2+…+<em>n<strong>u</strong>m</em>(<em>n**n</em>)<em>d<strong>e</strong>n</em>(1)<em>s<strong>n</strong>d</em>−1+<em>d<strong>e</strong>n</em>(2)<em>s<strong>n</strong>d</em>−2+…+<em>d<strong>e</strong>n</em>(<em>n**d</em>),</p>
<p>其中 u 和 y 分别代表系统输入和输出，nn 和 nd 分别是分子和分母系数。num(s) 和 den(s) 包含分子和分母的 s 降幂系数。</p>
</li>
<li><p>分母的阶必须大于或等于分子的阶。</p>
</li>
<li><p>对于多输出系统，所有传递函数具有相同的分母，而所有分子具有相同的阶次。</p>
</li>
</ul>
<h3 id="为单输出系统建模"><a href="#为单输出系统建模" class="headerlink" title="为单输出系统建模"></a>为单输出系统建模</h3><p>对于单输出系统，模块的输入和输出是标量时域信号。要为此系统建模，请执行以下操作：</p>
<ol>
<li>在<strong>分子系数</strong>字段中输入传递函数的分子系数向量。</li>
<li>在<strong>分母系数</strong>字段中输入传递函数的分母系数向量。</li>
</ol>
<h3 id="为多输出系统建模"><a href="#为多输出系统建模" class="headerlink" title="为多输出系统建模"></a>为多输出系统建模</h3><p>对于多输出系统，模块输入为标量，输出为向量，其中每个元素都是系统的一个输出。要为此系统建模，请执行以下操作：</p>
<ol>
<li><p>在<strong>分子系数</strong>字段中输入矩阵。</p>
<p>此矩阵的每一<em>行</em>包含确定一个模块输出的传递函数的分子系数。</p>
</li>
<li><p>在<strong>分母系数</strong>字段中输入系统所有传递函数的公分母系数向量。</p>
</li>
</ol>
<h3 id="指定初始条件"><a href="#指定初始条件" class="headerlink" title="指定初始条件"></a>指定初始条件</h3><p>传递函数描述了输入和输出在拉普拉斯（频率）域中的关系。具体而言，它被定义为零初始条件的系统对脉冲输入的响应（输出）的拉普拉斯变换。</p>
<p>传递函数的乘法和除法等运算依赖于零初始状态。例如，您可以将一个复杂的传递函数分解为一系列简单的传递函数。按顺序应用它们可获得与原始传递函数相同的响应。如果其中一个传递函数采用非零初始状态，结果将不正确。而且，一个传递函数有无限多个时域实现，大多数状态并没有任何物理意义。</p>
<p>由于这些原因，Simulink® 将 Transfer Fcn 模块的初始条件预设为零。要指定给定传递函数的初始条件，请使用 <code>tf2ss</code> 将传递函数转换为可控制的典型状态空间实现。然后，使用 State-Space 模块。<code>tf2ss</code> 实用工具为系统提供了 <code>A</code>、<code>B</code>、<code>C</code> 和 <code>D</code> 矩阵。</p>
<p>有关详细信息，请键入 <code>help tf2ss</code>，或者参阅 Control System Toolbox™ 文档。</p>
<h3 id="传递函数在模块上的显示"><a href="#传递函数在模块上的显示" class="headerlink" title="传递函数在模块上的显示"></a>传递函数在模块上的显示</h3><p>Transfer Fcn 模块根据指定的分子和分母参数来显示传递函数。</p>
<ul>
<li><p>如果这两个参数指定为表达式或向量，模块将显示具有指定系数和 <em>s</em> 幂数的传递函数。如果在括号中指定变量，模块将计算变量。</p>
<p>例如，如果将<strong>分子系数</strong>指定为 <code>[3,2,1]</code> 并将<strong>分母系数</strong>指定为 <code>(den)</code>，其中 <code>den</code> 为 <code>[7,5,3,1]</code>，则模块的显示如下：</p>
<p><img src="https://www.mathworks.com/help/releases/R2022a/simulink/slref/transfer_fcn_ex1.png" alt="img"></p>
</li>
<li><p>如果将这两个参数指定为变量，模块将显示后跟 <code>(s)</code> 的变量名称。</p>
<p>例如，如果将<strong>分子系数</strong>指定为 <code>num</code> 并将<strong>分母系数</strong>指定为 <code>den</code>，则模块的显示如下：</p>
<p><img src="https://www.mathworks.com/help/releases/R2022a/simulink/slref/transfer_fcn_ex2.png" alt="img"></p>
</li>
</ul>
</blockquote>
<h3 id="Zero-Pole零极点增益模块"><a href="#Zero-Pole零极点增益模块" class="headerlink" title="Zero-Pole零极点增益模块"></a><img src="https://www.mathworks.com/help/releases/R2022a/simulink/slref/zero_pole_block_icon.png" alt="Zero-Pole block">Zero-Pole零极点增益模块</h3><p>通过零极点增益传递函数进行系统建模</p>
<blockquote>
<p>也是用来描述传递模块的，可以和   传递模块  	相互转化</p>
<p>区别：零极点增益方式 表达传递函数，能更方便看出  对应传递函数 的零点、极点、增益</p>
</blockquote>
<ul>
<li>Simulink &#x2F; Continuous</li>
</ul>
<p><img src="https://s2.loli.net/2022/04/18/1tkcmfZHSTDuMjg.png" alt="image-20220418123306289.png"></p>
<blockquote>
<p>Zero-Pole 模块可以为您使用零点、极点和拉普拉斯域传递函数增益定义的系统进行建模。此模块可为单输入单输出 (SISO) 和单输入多输出 (SIMO) 系统建模。</p>
<h3 id="使用此模块的条件-1"><a href="#使用此模块的条件-1" class="headerlink" title="使用此模块的条件"></a>使用此模块的条件</h3><p>Zero-Pole 模块假定满足以下条件：</p>
<ul>
<li><p>传递函数的格式为</p>
<p><em>H</em>(<em>s</em>)&#x3D;<em>K**Z</em>(<em>s</em>)<em>P</em>(<em>s</em>)&#x3D;<em>K</em>(<em>s</em>−<em>Z</em>(1))(<em>s</em>−<em>Z</em>(2))…(<em>s</em>−<em>Z</em>(<em>m</em>))(<em>s</em>−<em>P</em>(1))(<em>s</em>−<em>P</em>(2))…(<em>s</em>−<em>P</em>(<em>n</em>)),</p>
<p>其中 Z 表示零点，P 表示极点，K 表示传递函数增益。</p>
</li>
<li><p>极点数必须大于或等于零点数。</p>
</li>
<li><p>如果极点和零点为复数，它们必须是复共轭对组。</p>
</li>
<li><p>对于多输出系统，所有传递函数必须具有相同的极点。零点的值可以不同，但每个传递函数的零点数必须相同。</p>
</li>
</ul>
<blockquote>
<p><strong>注意</strong></p>
<p>当传递函数具有不同的零点数或者每个传递函数只有一个零点时，不能使用一个 Zero-Pole 模块建立多输出系统模型。使用多个 Zero-Pole 模块建立此类系统模型。</p>
</blockquote>
<ul>
<li><h2 id="为单输出系统建模-1"><a href="#为单输出系统建模-1" class="headerlink" title="为单输出系统建模"></a>为单输出系统建模</h2><p>对于单输出系统，模块的输入和输出是标量时域信号。要为此系统建模，请执行以下操作：</p>
<ol>
<li>在<strong>零点</strong>字段中输入传递函数的零点向量。</li>
<li>在<strong>极点</strong>字段中输入传递函数的极点向量。</li>
<li>在<strong>增益</strong>字段中输入传递函数的 1×1 增益向量</li>
</ol>
</li>
<li><h2 id="为多输出系统建模-1"><a href="#为多输出系统建模-1" class="headerlink" title="为多输出系统建模"></a>为多输出系统建模</h2><p>对于多输出系统，模块输入为标量，输出为向量，其中每个元素都是系统的一个输出。要为此系统建模，请执行以下操作：</p>
<ol>
<li><p>在<strong>零点</strong>字段中输入全零矩阵。</p>
<p>此矩阵的每一<em>列</em>包含一个传递函数（将系统输入与一个输出相关联）的零点。</p>
</li>
<li><p>在<strong>极点</strong>字段中输入对系统的所有传递函数都通用的极点向量。</p>
</li>
<li><p>在<strong>增益</strong>字段中输入增益向量。</p>
<p>每个元素代表对应的传递函数在<strong>零点</strong>中的增益。</p>
</li>
</ol>
<p>输出向量的每个元素对应于<strong>零点</strong>中的一列。</p>
</li>
<li><h2 id="传递函数在模块上的显示-1"><a href="#传递函数在模块上的显示-1" class="headerlink" title="传递函数在模块上的显示"></a>传递函数在模块上的显示</h2><p>Zero-Pole 模块根据您如何指定零点、极点和增益参数来显示传递函数。</p>
<ul>
<li><p>如果这两个参数指定为表达式或向量，模块将显示具有指定的零点、极点和增益的传递函数。如果在括号中指定变量，模块将计算变量。</p>
<p>例如，如果您将<strong>零点</strong>指定为 <code>[3,2,1]</code>，将<strong>极点</strong>指定为 <code>(poles)</code>（其中 <code>poles</code> 为 <code>[7,5,3,1]</code>），并将<strong>增益</strong>指定为 <code>gain</code>，则模块将如下所示。</p>
<p><img src="https://www.mathworks.com/help/releases/R2022a/simulink/slref/zeropole_ex1.png" alt="img"></p>
</li>
<li><p>如果将这两个参数指定为变量，模块将根据需要显示后跟 <code>(s)</code> 的变量名称。</p>
</li>
</ul>
<p>例如，如果您将<strong>零点</strong>指定为 <code>zeros</code>，将<strong>极点</strong>指定为 <code>poles</code>，并将<strong>增益</strong>指定为 <code>gain</code>，则模块将如下所示：</p>
<p><img src="https://www.mathworks.com/help/releases/R2022a/simulink/slref/zeropole_ex2.png" alt="img"></p>
</li>
</ul>
</blockquote>
<h3 id="✍tf、zpk、ss-函数实现相互转化"><a href="#✍tf、zpk、ss-函数实现相互转化" class="headerlink" title="✍tf、zpk、ss 函数实现相互转化"></a><strong>✍<code>tf、zpk、ss</code> 函数实现相互转化</strong></h3><p>通过 <code>tf、zpk、ss</code> 函数可以实现 	<strong>一个传递函数</strong>  在  </p>
<p><code>零极点增益表达模式</code> 、 <code>普通传递函数表达模式</code>  、<code>状态空间表达模式</code>  之间互相切换</p>
<ul>
<li><p>tf函数：</p>
<p><img src="https://s2.loli.net/2022/04/18/CpQTAqsbUZnvGLH.png" alt="image-20220418123952381.png"></p>
</li>
<li><p>zpk函数:<img src="https://s2.loli.net/2022/04/18/UY3iJE1MDPgjaoH.png" alt="image-20220418191927385.png"></p>
</li>
<li><p>ss函数：</p>
<p>将传递函数  表达式  转化为  状态空间方式表达的传递函数</p>
<p><img src="https://s2.loli.net/2022/04/18/Iubfan1rOlzKMdp.png" alt="image-20220418193005228.png"></p>
<p><img src="https://s2.loli.net/2022/04/18/y3TR9NGblL4Pm1D.png" alt="image-20220418193214820.png"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>07_Simulink在自动控制理论中的仿真</category>
      </categories>
      <tags>
        <tag>MATLAB学习</tag>
      </tags>
  </entry>
  <entry>
    <title>02_设计PID参数</title>
    <url>/2022/04/26/MATLAB%E5%AD%A6%E4%B9%A0/08_Simulink%E5%9C%A8PID%E6%8E%A7%E5%88%B6%E5%99%A8%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/02_%E8%AE%BE%E8%AE%A1PID%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<h1 id="一、使用试凑法设计PID参数"><a href="#一、使用试凑法设计PID参数" class="headerlink" title="一、使用试凑法设计PID参数"></a>一、使用<code>试凑法</code>设计PID参数</h1><h2 id="1、试凑法"><a href="#1、试凑法" class="headerlink" title="1、试凑法"></a>1、<a href="https://blog.csdn.net/qq_42249050/article/details/106077541">试凑法</a></h2><h4 id="（1）整定比例控制"><a href="#（1）整定比例控制" class="headerlink" title="（1）整定比例控制"></a>（1）整定比例控制</h4><p>将比例控制作用由小变到大，观察各次响应，直至得到反应快、超调小的响应曲线。</p>
<h4 id="（2）整定积分环节"><a href="#（2）整定积分环节" class="headerlink" title="（2）整定积分环节"></a>（2）整定积分环节</h4><p>若在比例控制下稳态误差不能满足要求，需加入积分控制。先将步骤（1）中选择的比例系数减小为原来的50~80%，再将积分时间置一个较大值，观测响应曲线。然后减小积分时间，加大积分作用，并相应调整比例系数，反复试凑至得到较满意的响应，确定比例和积分的参数。</p>
<h4 id="（3）整定微分环节"><a href="#（3）整定微分环节" class="headerlink" title="（3）整定微分环节"></a>（3）整定微分环节</h4><p>若经过步骤（2），Pl控制只能消除稳态误差，而动态过程不能令人满意，则应加入微分控制，构成PID控制。先置微分时间TD&#x3D;0，逐渐加大TD，同时相应地改变比例系数和积分时间，反复试凑至获得满意的控制效果和PID控制参数。</p>
<p>在试凑时，可参考表8-1的参数添加初始值，然后再进行微调，微调时遵循先比例、后积分、再微分的整定步骤。使用试凑法设计PID参数的过程如下：</p>
<p><img src="https://s2.loli.net/2022/04/29/O1vMEhXZzqTUSbk.jpg" alt="e38e486761e17b95c44fb4a3695f0b5"></p>
<ul>
<li>先调K p 让系统闭环，使积分和微分不起作用	(K i &#x3D;0，K d &#x3D;0)，观察系统的响应，若反应快、超调小，静差满足要求，则就用纯比例控制器。</li>
<li>调K i 若静差太大，则加入Kp，且同时使K;略增曾加(如至原来的120%，因加人积分会使系统稳定性下降，故减小Kp)，Ki;由小到大，直到满足静差要求。</li>
<li>调K d 若系统动态特性不好，则加入Kd，同时使 Kp,稍微提升一点，Kp，由小到大，直到动态满意。</li>
</ul>
<blockquote>
<p>结论：</p>
<ul>
<li>采用试凑法调整PID参数，对标准的二阶系数可以得到较好的控制效果</li>
<li>采用试凑法调整PID参数，不仅能应用于标准二阶系统，对于延迟环节的系统也同样适用。试凑法可以扩展到任意的高阶系统中。在控制工程实际应用时，可以先进行讨论藩镇再将试凑好的参数添加到系统中</li>
</ul>
</blockquote>
<h1 id="二、使用Ziegler-Nichols-法设计PID-参数"><a href="#二、使用Ziegler-Nichols-法设计PID-参数" class="headerlink" title="二、使用Ziegler-Nichols 法设计PID 参数"></a>二、使用<code>Ziegler-Nichols</code> 法设计PID 参数</h1><h2 id="1、Ziegler-Nichols法介绍"><a href="#1、Ziegler-Nichols法介绍" class="headerlink" title="1、Ziegler-Nichols法介绍"></a>1、<code>Ziegler-Nichols</code>法介绍</h2><p>使用Ziegler-Nichols（ZN）法世界 PID 参数属于工程整定的方法之一针对过程控制对象特征，控制系统可以分为有<strong>自平衡和无自平衡能力系统</strong>，因大部分属于有自平衡能力系统，这里仅讨论针对有自平衡能力系统使用ZN法设计PID 参数。有自平衡能力系统对应传递函数为 <img src="https://s2.loli.net/2022/04/29/R9z8UZbVi73EOTx.jpg" alt="76012aaf97a7c9a609f46e6337dd2a7"></p>
<blockquote>
<ul>
<li><p>K为比例系数</p>
</li>
<li><p>T<a href="https://www.codetd.com/article/11562224">为惯性时间常数</a></p>
<p><img src="https://s2.loli.net/2022/05/02/jqrRME6sDP2xKHY.png" alt="在这里插入图片描述"></p>
</li>
<li><p>τ为纯延迟时间常数 :惯性时间常数是表征系统的阶越响应时间的一个时间常数</p>
</li>
<li><p>对于惯性常数T及纯时间延迟常数τ则需要根据图所示各自的含义求取</p>
<ul>
<li><p>纯时间延迟常数τ即为曲线的拐点的切线在X轴上的交点</p>
</li>
<li><p>惯性常数T即为曲线的拐点处的切线在幅值为K时对应的X轴的坐标减去纯时间延迟常数τ</p>
</li>
</ul>
<p><img src="https://s2.loli.net/2022/05/02/lf41FyBOtMSujAX.png" alt="img"></p>
</li>
</ul>
</blockquote>
<p><img src="https://s2.loli.net/2022/05/03/esnbJKpxmruYHWD.png" alt="image-20220429200439744"></p>
<p><img src="https://s2.loli.net/2022/05/01/Us3RMP9wAVNBctH.png" alt="image-20220501230636803"></p>
<p>式中，δk为临界比例度，Ti为积分时间，TD为微分时间</p>
<p>   Ziegler-Nlichols方法是根据给定对象的临界状态参数K和T来确定PID控制器的参数，整定公式如表1-l所示。其中，如果单位阶跃响应曲线为S形曲线，则可用此法，否则不能用。此外，适用于临界振幅不大、振荡周期较长的过程控制系统，但有些系统从安全性考虑不允许进行稳定边界试验，如锅炉汽包水位控制系统。还有某些时间常数较大的单容对象，用纯比例控制时系统始终是稳定的，对于这些系统也是无法用临界比例度法来进行参数整定的。</p>
<blockquote>
<p>  我们在Ziegler-Nlichols方法整定中，首先需要得到的就是临界参数，即在临界状态下，被控量y来回振荡一次所用时间，称为临界周期Tk。被调参数处于临界状态时的比例度，称为临界比例度δk。其次，在上图中的临界振荡过程，可以得到我们所需要的临界比例度δk和临界周期Tk的数值。再次，根据控制器的结果结合表选定经验公式，最后根据经验公式计算出PID控制器各参数的具体数值。具体的实现步骤如下：</p>
<p>Step 1 寻找临界振荡状态，求取临界比例度δk和临界周期Tk。</p>
<p>   先把积分时间放至最大，微分时间放至零，比例度放至较大的适当值。“纯P控制参数”，就是使控制系统按纯比例作用的方式投入运行。然后，慢慢地减少比例度，在外界干扰的作用下，细心观察控制器的输出信号和被调参数的变化情况。如果控制过程的曲线波动是衰减的，则把比例度继续调大，如果控制过程的曲线波动是发散的，则应把比例度调小些，直到曲线波动呈等幅振荡为止，从而得到临界比例度δk和临界周期Tk值。即整定口诀说的“等幅振荡出现时，δk值Tk值为临界”。</p>
<p>Step 2 结合控制器的结构形式，按表选定参数计算公式。</p>
<p>         表 Ziegler-Nlichols方法的参数整定计算表<img src="https://img-blog.csdnimg.cn/2021060611200382.png" alt="在这里插入图片描述"></p>
<p>  “按照公式乘系数”即根据得到的δk和Tk值按下表临界比例度法参数计算公式表，来计算调节器的各参数值。</p>
<p>Step 3 先比例调节，后积分调节，最后微分调节。</p>
<p>  求得具体的数值后，将比例度调在比计算数值大一些的刻度上，然后把积分时间放至计算值上，然后从大到小地调整积分时间，最后把微分时间放至计算值上，从小到大地调整微分时间。这样的调整次序就是口诀中的“PID顺序不能错”。</p>
<p>Step 4 多次调节参数，观察最佳响应曲线的输出。</p>
<p>  最后把比例度减小到计算值上，通过观察曲线，也就是“静观运行勤调整，细心寻求最佳值”。即适当地进行各参数的微调，以达到满意的控制效果。</p>
</blockquote>
<p>  整定的口诀：</p>
<ul>
<li>临界整定应用多，纯P运转减参数；</li>
<li>等幅振荡出现时，δk值Tk值为临界；</li>
<li>按照公式乘系数，P、I、D顺序不能错；</li>
<li>静观运行勤调整，细心寻求最佳值。</li>
</ul>
<p><a href="https://blog.csdn.net/qq_42249050/article/details/117620736?ops_request_misc=%7B%22request_id%22:%22165140580416781818799154%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=165140580416781818799154&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-3-117620736.142%5Ev9%5Epc_search_result_control_group,157%5Ev4%5Econtrol&utm_term=PID%E5%8F%82%E6%95%B0%E6%95%B4%E5%AE%9A%E2%80%94%E2%80%94Z-N%E6%96%B9%E6%B3%95&spm=1018.2226.3001.4187">基于Ziegler-Nlichols方法的参数整定与PID仿真_昔时扬尘处的博客-CSDN博客</a></p>
<h1 id="三、使用科恩-库恩法设计PID-参数"><a href="#三、使用科恩-库恩法设计PID-参数" class="headerlink" title="三、使用科恩-库恩法设计PID 参数"></a>三、使用<code>科恩-库恩法</code>设计PID 参数</h1><h2 id="1、科恩-库恩法简介"><a href="#1、科恩-库恩法简介" class="headerlink" title="1、科恩-库恩法简介"></a>1、<code>科恩-库恩法</code>简介</h2><p>对于带延迟环节的一阶系统，可以使用科恩-库恩法实现PID参数设计。带延迟环节的一阶系统仿真框图如图8.13所示。</p>
<p><img src="https://s2.loli.net/2022/04/30/WXJCxLgEDjGTwsa.jpg" alt="15bfc2b52390502b52d6403a2fe6ded"></p>
<p>和 ZN 法相似，利用原系统的时间常数 T、比例列系统K可求得比例、积分、微分参数它提供了一个参数校正的基准，然后在此基础上根据据实际需要对参数进行微调以达到目的</p>
<p><img src="https://s2.loli.net/2022/04/30/HYGieDXdNJfypOP.png" alt="bfb946c1b7c501e5a61050d343e92a8"></p>
<blockquote>
<p>结论：使用<code>科恩-库恩法</code>整定控制参数时，可以得到初始值，然后进行调整试凑法才能找到最佳控制效果。和试凑法相比。该方法能尽快确定控制参数初始值，减少试凑时间</p>
</blockquote>
<h1 id="四、使用-衰减曲线法设计PID参数"><a href="#四、使用-衰减曲线法设计PID参数" class="headerlink" title="四、使用 衰减曲线法设计PID参数"></a>四、使用 <code>衰减曲线法</code>设计PID参数</h1><h2 id="1、衰减曲线法简介"><a href="#1、衰减曲线法简介" class="headerlink" title="1、衰减曲线法简介"></a>1、衰减曲线法简介</h2><p>其衰减曲线法是通过调整衰减比对控制参数进行整定的一种方法，如图所示，衰减比即为阶跃响应的第一个波峰与第二个波峰的比值，即 y1&#x2F;y2</p>
<p><img src="https://s2.loli.net/2022/04/30/zPkdLOpy1uvsIQZ.jpg" alt="8f045690c5cd73bcefe45e55c77f62f"></p>
<p>衰减曲线法在工程中常用的衰减比有两种，一种是4:1，另一种是10：1。对于衰减比为4:1的系统，首先将调节器设置成纯比例控制（Ki&#x3D;Kd&#x3D;0）,并构建仿真框图，如图所示</p>
<p><img src="https://s2.loli.net/2022/04/30/VIixHUwTFtb9PJp.jpg" alt="9b9ebc800b341262b12274c1c6ee97f"></p>
<p>再将比例系数由小变大，加扰动观察响应过程，直到响应曲线出现4:1的衰减比，将此时的比带（比例系数的倒数）定义为衰减比例带&amp;s&#x3D;1&#x2F;Kp，两波峰之间的时间定义为周期Ts，如图所示</p>
<p><img src="https://s2.loli.net/2022/04/30/4fsKjhdDGcmt2H5.jpg" alt="b536a8cdbaf868465a0e2c45ef19ab9"></p>
<p>根据Tn及设定的Kp值，确定控制器参数如表所示</p>
<p><img src="https://s2.loli.net/2022/04/30/W8cPlHGxp64NB1X.jpg" alt="ee129aacf0e7bb6e04818522c1e11b7"></p>
<p>同理，对于衰减比10:1,由衰减比例带&amp;r&#x3D;1&#x2F;Kp和两波峰之间的时间Ti，确定控制器参数如图所示</p>
<p><img src="https://s2.loli.net/2022/04/30/vcUlOXNfogG2Waz.jpg" alt="81f4f4096073bc1ebe19285b02cef90"></p>
<h1 id="五、使用临界比例度法设计PID参数"><a href="#五、使用临界比例度法设计PID参数" class="headerlink" title="五、使用临界比例度法设计PID参数"></a>五、使用<code>临界比例度法</code>设计PID参数</h1><h2 id="1、临界比例度法简介"><a href="#1、临界比例度法简介" class="headerlink" title="1、临界比例度法简介"></a>1、<a href="https://blog.csdn.net/qq_42249050/article/details/106077541">临界比例度法简介</a></h2><p>临界比例度法整定PID参数也是一种常用调节器参数整定方法。<br>控制系统在外界干扰作用后，不能恢复到稳定的平衡状态，而出现一种既不衰减，也不发散的等幅振荡过程，这样的过渡过程就称为临界振荡过程，如图所示。我们在临界比例度法整定中，首先需要得到的就是临界参数，即在临界状态下，被控量y来回振荡一次所用时间，称为临界周期Tk；被调参数处于临界状态时的比例度，称为临界比例度δk。</p>
<p>临界比例度法   </p>
<ul>
<li>设置积分时间Ti&#x3D;∞,微分时间Td&#x3D;0</li>
<li>调节器设为纯比例环节，将比例系数从小到大逐步调整</li>
</ul>
<p>来诱发出过程控制回路中的等幅振荡，得到如图所示的临界振荡过程，以得到我们所需要的临界比例度δk和临界周期Tk的数值。然后再根据经验公式，计算出调节器各参数的具体数值。</p>
<p><img src="https://s2.loli.net/2022/05/02/P45sdleSAubmXw6.png" alt="在这里插入图片描述"></p>
<p>记下 这时的比例系数Kcr，再记录振荡的两个波峰之间时间为临界振荡周期Tcr，最后根据表8-8的经验公式，计算出各参数的整定值。</p>
<p><img src="https://s2.loli.net/2022/05/01/NLHbREqolpnuUIP.jpg" alt="4f7d79fd7bf1ca62e2795c4f914e8f2"></p>
<blockquote>
<p>临界比例度法整定步骤如下：<br>            ①先把积分时间放至最大微分时间放至零，比例度放至较大的适当值。“纯P转减参数”，就是使控制系统按纯比例作用的方式投入运行。然后慢慢地减少比例度，在外界干扰的作用下，细心观察调节器的输出信号和被调参数的变化情况；如果控制过程的曲线波动是衰减的，则把比例度继续调小，如果控制过程的曲线波动是发散的，则应把比例度调大些，直到曲线波动呈等幅振荡为止，以此得到临界振荡过程，从而得到临界比例度δk和临界周期Tk值。即口诀说的“等幅振荡出现时，δk值Tk值为临界”。<br>            ②“按照公式乘系数”即根据得到的δk和Tk值按下表临界比例度法参数计算公式表，来计算调节器的各参数值。<img src="https://s2.loli.net/2022/05/02/mK34tOZEld5MuIS.png" alt="在这里插入图片描述"></p>
<p>​			③求得具体的数值后，将比例度调在比计算数值大一些的刻度上，然后把积分时间放至计算值上，然后从大到小地调整积分时间，最后把微分时间放至计算值上，从小到大地调整微分时间。这样的调整次序就是口诀中的“PID顺序不能错”。<br>​			④最后把比例度减小到计算值上，通过观察曲线，也就是“静观运行勤调整，细心寻求最佳值”。即适当地进行各参数的微调，以达到满意的控制效果。</p>
</blockquote>
<h1 id="六、简单总结"><a href="#六、简单总结" class="headerlink" title="六、简单总结"></a>六、简单总结</h1><h2 id="1-试凑法-经验法"><a href="#1-试凑法-经验法" class="headerlink" title="1)试凑法(经验法):"></a>1)试凑法(经验法):</h2><p>简单可靠，能够应用于各种控制系统，特别是扰动频繁，响应曲线不太规则的控制系统。缺点是需反复试凑，花费时间长。试凑法适合现场经验较丰富、技术水平较高的工程技术人员使用。</p>
<h2 id="2-ZN-法-动态特性参数法"><a href="#2-ZN-法-动态特性参数法" class="headerlink" title="2)ZN 法(动态特性参数法):"></a>2)ZN 法(动态特性参数法):</h2><p>是通过系统开环实马险得到典型传递函数后进行整定的方法。此方法理论性相对较强，适应性也较广，并为调节器器参数的最优整定提供了可能。</p>
<h2 id="3-科恩-库恩法"><a href="#3-科恩-库恩法" class="headerlink" title="3)科恩-库恩法:"></a>3)科恩-库恩法:</h2><p>采用了一种经验整定公式，该方法是依据某个特定的对象进行总结出来的，对不同系统可能存在一定的误差。</p>
<h2 id="4-衰减曲线法"><a href="#4-衰减曲线法" class="headerlink" title="4)衰减曲线法:"></a>4)衰减曲线法:</h2><p>衰减曲线法呈现振荡的时间比较知短，且衰减振荡易实现。这种整定方法应用比较广泛。缺点是有时4:1衰减不太好确定，只能近似。</p>
<h2 id="5-临界比例度法"><a href="#5-临界比例度法" class="headerlink" title="5)临界比例度法:"></a>5)临界比例度法:</h2><p>简便而易于判断， 整定质量较好，适用于一般的温度、压力、流量和 液位控制系统。但对于临界比例度很小，或或者工艺生产约束条件严格、对过渡过程不允许出现等幅振荡的控制系统则不适用。</p>
<h1 id="七、使用Smith预估器设计PID参数"><a href="#七、使用Smith预估器设计PID参数" class="headerlink" title="七、使用Smith预估器设计PID参数"></a>七、使用<code>Smith预估器</code>设计PID参数</h1><h2 id="1、Smith预估器控制的的基本原理"><a href="#1、Smith预估器控制的的基本原理" class="headerlink" title="1、Smith预估器控制的的基本原理"></a>1、Smith预估器控制的的基本原理</h2><p>对于工程控制中的大延迟系统，使用一般的工程指定法没有效果。</p>
<p>Smith 预估器控制的原理就是在PID控制回路上再并联一个补偿回路，以此抵消被控制对象的<a href="https://fubaisen.github.io/2022/05/02/MATLAB%E5%AD%A6%E4%B9%A0/%E8%A1%A5%E5%85%85%E6%96%87%E4%BB%B6/19_PID%E5%87%A0%E4%B8%AA%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98">纯滞后</a>因素。该方法是预先估计出过程在基本扰动下的动态特性，然后由预估器进行补偿控制，力图使被延迟了的被调量提前反应到调节器，并使之动作，以此来减小超调量了。若果预估模型准确，该方法能获得较好的控制效果，从而消除纯滞后对系统的不利影响，使系统品质与被控制过程无纯滞后时相同。</p>
<p>若被控制系统的传递函数为<img src="https://s2.loli.net/2022/05/02/aDHNSOFQGuWrRvM.jpg" alt="42502f3e5c3f159f365d51b66572ebb" style="zoom:25%;" /> ，其中<img src="https://s2.loli.net/2022/05/02/PiTDqrNnuyd8b6O.jpg" alt="07393dba0f1233527ccc8ec48175061" style="zoom:25%;" />  为除去纯滞后部分对系统的特性，控制器的传递函数为<img src="https://s2.loli.net/2022/05/02/WuHIMp134rFzfAe.jpg" alt="12a73b95742b4395fa343f041dfafd2" style="zoom: 33%;" /> ，预估补偿器的传递函数为<img src="https://s2.loli.net/2022/05/02/YEoeznrsmOCvD8g.jpg" alt="f801d086e5d702917391b461058038c" style="zoom:25%;" /> ，则Smith 预估器控制原理框图如图所示</p>
<p>经补偿后的等效被控制对象的传递函数为</p>
<img src="https://s2.loli.net/2022/05/02/hC4FTfWSlt7Ybdx.jpg" alt="b6b58d3d63f20f5cf82082b021cee35" style="zoom:33%;" />

<p>选择<img src="https://s2.loli.net/2022/05/02/tQqo8cJb6XfZHUg.jpg" alt="22869369dcf3c08a0dee741fef7a5de" style="zoom:33%;" /></p>
<p>由此看出补偿器完全补偿了被控制对象纯滞后特性  </p>
<p>传递函数等效为<img src="https://s2.loli.net/2022/05/02/Nnyh9vUtk3eTxS1.jpg" alt="c9a079f80be8e8afb62e42cd77bbb2d" style="zoom:33%;" /></p>
<p>Smith 预估器的数学模型为</p>
<img src="https://s2.loli.net/2022/05/02/lqbhuTnvPyD6HVw.jpg" alt="c4a9d7aaa8d7e723f95c80d8a5dec5b" style="zoom: 67%;" />

<p>等效的系统框图如图所示</p>
<p><img src="https://s2.loli.net/2022/05/02/WNvyfRIcYhugGd7.jpg" alt="7cd86f92f0a069233b40b2bcea6defc" style="zoom: 33%;" /><img src="https://s2.loli.net/2022/05/02/AJp9tF32ZeH7R5D.jpg" alt="70c8844f31325ee4e0fa1087b96f6b4" style="zoom: 33%;" /></p>
<h2 id="2、Smith-预估器控制仿真"><a href="#2、Smith-预估器控制仿真" class="headerlink" title="2、Smith 预估器控制仿真"></a>2、Smith 预估器控制仿真</h2><p>根据Smith 预估器原理构建的仿真图如图所示</p>
<img src="https://s2.loli.net/2022/05/02/W9apKlqL3TCHvDc.jpg" alt="208e388a6f66a42600f52e65f209a94" style="zoom: 50%;" />

<h1 id="八、使用串级控制仿真PID控制参数"><a href="#八、使用串级控制仿真PID控制参数" class="headerlink" title="八、使用串级控制仿真PID控制参数"></a>八、使用串级控制仿真PID控制参数</h1><h2 id="1、串级控制分析"><a href="#1、串级控制分析" class="headerlink" title="1、串级控制分析"></a>1、串级控制分析</h2><p>在某些控制系统中，由于存在二次扰动，简单控制系统的控制作用不及时，控制偏差大，控制质量差。串级控制系统通过引入副回路，用副回路控制器克服二次扰动，用副环路之外的控制器克服一次扰动，大幅提高了控制质量。串级控制的系统框图如图所示</p>
<p><img src="https://s2.loli.net/2022/05/03/BQTLGIaMDHfNeKC.jpg" alt="bf197aec822987bcc965b2005c9bef5"></p>
<blockquote>
<p>结论：对于简单控制和串级控制都能消除系统稳定误差，但串级控制对于系扰动有更好的抵抗作用</p>
</blockquote>
<h1 id="九、使用前馈-反馈控制仿真PID参数"><a href="#九、使用前馈-反馈控制仿真PID参数" class="headerlink" title="九、使用前馈-反馈控制仿真PID参数"></a>九、使用前馈-反馈控制仿真PID参数</h1><h2 id="1、前馈-反馈控制分析"><a href="#1、前馈-反馈控制分析" class="headerlink" title="1、前馈-反馈控制分析"></a>1、前馈-反馈控制分析</h2><p>工程上将前端和反馈结合起来使用，构建前馈-反馈控制系统。这样既发挥了·前馈控制的优势，又继承了但可以控制系统能克服多种扰动以及对控制变量进行检测的优点。前馈控制的缺点是在使用时需要对系统有精确的了解，只有了解系统模型才能有针对性的给出预测补偿。但在实际工程中，并不是所有的干扰都是可测的，并不是所有的对象都能得到精确模型，而且大多数控制对象在运行的同时自身结构也在发生变化。实际应用中的前馈控制系统几乎都采用前馈控制和反馈相结合的形式。前端-反馈控制系统框图如图所示</p>
<p><img src="https://s2.loli.net/2022/05/03/tgC8EyMhVme1rPK.jpg" alt="20726322ecba874fb2720a384e1403e"></p>
<ul>
<li><img src="https://s2.loli.net/2022/05/02/WuHIMp134rFzfAe.jpg" alt="12a73b95742b4395fa343f041dfafd2" style="zoom: 33%;" />为返哭调节器；</li>
<li><img src="C:/Users/LICHAI~1/AppData/Local/Temp/WeChat Files/d3e229d0701b23b452c3e6b98a03981.jpg" alt="d3e229d0701b23b452c3e6b98a03981" style="zoom:33%;" />为前馈补偿器；</li>
<li><img src="https://s2.loli.net/2022/05/03/T5aIeDv1tM4bVmS.jpg" alt="1f069267482a4710ddacc531005233f" style="zoom:33%;" />为被控制对象；</li>
<li><img src="https://s2.loli.net/2022/05/03/MprsfzV5WYhwtRv.jpg" alt="9cf0f0bfb6ec8a7532b5e1e7cd9d77d" style="zoom:33%;" />为扰动传递函数；</li>
</ul>
<p><img src="https://s2.loli.net/2022/05/02/WuHIMp134rFzfAe.jpg" alt="12a73b95742b4395fa343f041dfafd2" style="zoom: 33%;" />的输出和<img src="C:/Users/LICHAI~1/AppData/Local/Temp/WeChat Files/d3e229d0701b23b452c3e6b98a03981.jpg" alt="d3e229d0701b23b452c3e6b98a03981" style="zoom:33%;" />的输出相叠加，因此该系统实质上是一种偏差控制和扰动控制的结合，有时也称为符合控制系统，其输入和扰动对输出的影响可表示为</p>
<img src="https://s2.loli.net/2022/05/03/Yk8GTW7HQL6cwvX.jpg" alt="262e57dea16f95b0b16b174e616c063" style="zoom:25%;" />

<p>式中，第一项为输入对输出的影响，第二项为扰动对输出的影响。根据不要变性原理，即系统的输出不受扰动的影响，与扰动无关，令第二项干扰为零。则由扰动对输出变量Y(s)的闭环传递函数可推导出前馈控制器的传递函数为</p>
<img src="https://s2.loli.net/2022/05/03/PYUHRVm7eKGNcIO.jpg" alt="1f40baff699ad064f33bc6432b8a93d" style="zoom: 33%;" />

<p>前馈-反馈控制系统中，由于有反馈回路，可以降低对前馈的要求，为工程上实际较简单的前馈创造了条件。前馈-反馈控制系统对扰动完全补偿的条件和前馈控制完全相同，而反馈回路中间进了前馈控制也不会对反馈调节器所需整定的参数代开多大的变化，只是反馈调节器所完成的工作量显著地减小了</p>
<blockquote>
<p>结论：前馈控制是一种预测控制，通过提前对系统给出控制信号，使干扰获得补偿并消除误差。前馈控制的缺点是需要指导控制通道和干扰通道模型才有针对性地给出预测补偿。反馈是根据偏差来控制的，有偏差就进行纠正。反馈控制一般采用通用PID调节器，常用  二  ~ 六 介绍的的方法进行设计。一个系统如果要求精确控制，一定需要加反馈，如果要求系统响应速度快，那就需要前馈</p>
</blockquote>
]]></content>
      <categories>
        <category>08_Simulink在PID控制器中的应用</category>
      </categories>
      <tags>
        <tag>MATLAB学习</tag>
      </tags>
  </entry>
  <entry>
    <title>01_Simulink常用模块库</title>
    <url>/2022/04/17/MATLAB%E5%AD%A6%E4%B9%A0/07_Simulink%E5%9C%A8%E8%87%AA%E5%8A%A8%E6%8E%A7%E5%88%B6%E7%90%86%E8%AE%BA%E4%B8%AD%E7%9A%84%E4%BB%BF%E7%9C%9F/01_Simulink%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E5%BA%93/</url>
    <content><![CDATA[<p><a href="https://jingyan.baidu.com/article/d5a880ebc679d613f147ccda.html">simulink基础教程</a></p>
<h1 id="Simulink常用模块库"><a href="#Simulink常用模块库" class="headerlink" title="Simulink常用模块库"></a>Simulink常用模块库</h1><h2 id="Ground-将未连接的输入端口接地"><a href="#Ground-将未连接的输入端口接地" class="headerlink" title="Ground  将未连接的输入端口接地"></a><img src="https://ww2.mathworks.cn/help/simulink/slref/ground_block_icon.png" alt="Ground block">Ground  将未连接的输入端口接地</h2><ul>
<li><p>Simulink &#x2F; Commonly Used Blocks</p>
</li>
<li><p><code>Simulink / Sources</code></p>
</li>
</ul>
<blockquote>
<p>Ground 模块连接到其输入端口不连接到其他模块的模块。如果您使用具有未连接的输入端口的模块运行仿真, Simulink会发出警告。使用Ground模块将那些未连接的模块接地可以防止出现这些警告。</p>
<p>接地模块产生的信号是一个0值信号</p>
</blockquote>
<hr>
<h2 id="Terminator-终止未连接的输出端口"><a href="#Terminator-终止未连接的输出端口" class="headerlink" title="Terminator  终止未连接的输出端口"></a><img src="https://www.mathworks.com/help/releases/R2022a/simulink/slref/terminator_block_icon.png" alt="Terminator block">Terminator  终止未连接的输出端口</h2><ul>
<li>Simulink &#x2F; Commonly Used Blocks</li>
<li><code>Simulink / Sinks</code></li>
</ul>
<blockquote>
<p>使用 Terminator 模块终止输出端口未连接其他模块的模块。如果您运行的仿真中有一些模块的输出端口未连接任何模块，Simulink® 将发出警告消息。使用 Terminator 模块终止这些模块，可以防止出现此类警告消息。</p>
</blockquote>
<hr>
<h2 id="Constant-生成常量值"><a href="#Constant-生成常量值" class="headerlink" title="Constant  生成常量值"></a><img src="https://ww2.mathworks.cn/help/simulink/slref/constant_block_icon.png" alt="Constant block">Constant  生成常量值</h2><ul>
<li>Simulink &#x2F; Commonly Used Blocks</li>
<li><code>Simulink / Sources</code></li>
</ul>
<blockquote>
<p>Constant 模块生成实数或复数常量值信号。使用此模块提供常量信号输入。此模块是生成标量、向量还是混合输出要取决于：</p>
<ul>
<li><strong>常量值</strong>参数的维度</li>
<li><strong>将向量参数解释为一维向量</strong>参数的设置</li>
</ul>
<p>此模块的输出与<strong>常量值</strong>参数具有相同的维度和元素。如果为此参数指定向量，即您希望模块将其解析为向量，请选中<strong>将向量参数解释为一维向量</strong>复选框。否则，如果为<strong>常量值</strong>参数指定了向量，模块会将该向量视为一个矩阵。</p>
</blockquote>
<p>向量和矩阵的区别：</p>
<ul>
<li><p>数学领域：</p>
<p>可以称向量为矩阵    理解为：某一维为一的矩阵  &#x2F;  旁矩阵  &#x2F;  列矩阵</p>
</li>
<li><p>matlab    :</p>
<p>称这样的矩阵（某一维为一的矩阵  &#x2F;  旁矩阵  &#x2F;  列矩阵）为向量</p>
</li>
</ul>
<blockquote>
<p>为什么要区别？</p>
<p>在matlab 中向量与矩阵运行规则不同：</p>
<ul>
<li>向量： 按相应的元素逐个进行计算（被理解为计算机领域中<strong>数组</strong>的概念）</li>
</ul>
<blockquote>
<p>数组：在内存中连续排列的一系列数</p>
</blockquote>
<ul>
<li>矩阵： 按数学中矩阵的运算规则运算</li>
</ul>
<p>（标量  向量 《矩阵MATLAB程序设计语言》）</p>
</blockquote>
<p><img src="https://s2.loli.net/2022/04/18/7RcpQUx9jGNzPmL.png" alt="image-20220416130310651"></p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 将向量看做是一维的 ——数组</li>
<li><input disabled="" type="checkbox"> 将向量看做是矩阵  按矩阵规则进行计算</li>
</ul>
<hr>
<h2 id="输入信号的加减运算"><a href="#输入信号的加减运算" class="headerlink" title="输入信号的加减运算"></a><img src="https://ww2.mathworks.cn/help/simulink/slref/sum_block_icon.png" alt="Add block">输入信号的加减运算</h2><p><strong>Add, Subtract, Sum of Elements, Sum</strong></p>
<ul>
<li><code>Simulink / Math Operations</code></li>
</ul>
<blockquote>
<p>Sum 模块对输入信号执行加减运算。Add、Subtract、Sum of Elements 和 Sum 模块是相同的模块。此模块可对标量、向量或矩阵输入执行加减运算。它还可以缩减信号的元素并执行求和。</p>
<p>您可以使用<strong>符号列表</strong>参数以及加号 (<code>+</code>)、减号 (<code>-</code>) 和分隔符 (<code>|</code>) 指定模块的运算。</p>
<ul>
<li><code>+</code> 和 <code>-</code> 字符的个数等于输入的个数。例如，<code>+-+</code> 需要三个输入。模块从第一个（顶部）输入信号中减去第二个（中间）输入信号，然后加上第三个（底部）输入信号。</li>
<li>分隔符在模块图标上的端口之间产生额外空间。</li>
<li>如果仅执行加法，则可以使用一个与输入个数相等的数值。</li>
<li>如果只有一个输入端口，则单个 <code>+</code> 或 <code>-</code> 会在所有维度上或在指定的维度中加上或减去元素。</li>
</ul>
<p>Sum 模块首先将输入数据类型转换为其累加器数据类型，然后执行指定的运算。最后，模块使用指定的舍入和溢出模式，将计算结果转换为输出数据类型。</p>
<h3 id="模块输出的计算"><a href="#模块输出的计算" class="headerlink" title="模块输出的计算"></a>模块输出的计算</h3><p>Sum 模块的输出计算取决于模块输入的个数和输入端口的符号：</p>
<table>
<thead>
<tr>
<th align="left">如果 Sum 模块有…</th>
<th align="left">而且…</th>
<th align="left">输出计算公式为…</th>
<th align="left">其中…</th>
</tr>
</thead>
<tbody><tr>
<td align="left">一个输入端口</td>
<td align="left">输入端口符号为 + 号</td>
<td align="left">y &#x3D; e[0] + e[1] + e[2] … + e[m]</td>
<td align="left"><code>e[i]</code> 是输入 u 的第 i 个元素</td>
</tr>
<tr>
<td align="left">输入端口符号为 – 号</td>
<td align="left">y &#x3D; 0.0 – e[0] – e[1] – e[2] … – e[m]</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">两个或更多输入端口</td>
<td align="left">所有输入端口符号均为 – 号</td>
<td align="left">y &#x3D; 0.0 – u[0] – u[1] – u[2] … – u[n]</td>
<td align="left"><code>u[i]</code> 是第 i 个输入端口的输入</td>
</tr>
<tr>
<td align="left">第 k 个输入端口是第一个符号为 + 号的端口</td>
<td align="left">y &#x3D; u[k] – u[0] – u[1] – u[2] – u[k–1] (+&#x2F;–) u[k+1] … (+&#x2F;–) u[n]</td>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
</blockquote>
<p><img src="https://s2.loli.net/2022/04/18/U9NS5iTot7zMOdB.png" alt="image-20220416131518374"></p>
<blockquote>
<ul>
<li><p>如果有一个量是标量，另一个量是矩阵&#x2F;向量 ：标量会自动实现扩展和对应的 矩阵&#x2F;向量进行匹配</p>
<p>例 ：[1 1 ; 1 1] 矩阵 与  标量  1 相加</p>
<p><img src="https://s2.loli.net/2022/04/18/VpZNDqOzEuC5LSQ.png" alt="image-20220416131936148"></p>
</li>
<li><p>如果所有输入都是非标量的输入 必须要有相应的维度</p>
<p>例： 两个不同维度的 矩阵相乘  ——报错</p>
<p><img src="https://s2.loli.net/2022/04/18/21JU8jQh4YcaTrA.png" alt="image-20220416132610012.png"></p>
</li>
</ul>
</blockquote>
<hr>
<h2 id="Product输入信号的乘除运算-或-乘法和逆运算"><a href="#Product输入信号的乘除运算-或-乘法和逆运算" class="headerlink" title="Product输入信号的乘除运算    或     乘法和逆运算"></a><img src="https://ww2.mathworks.cn/help/simulink/slref/product_block_icon.png" alt="Product block">Product输入信号的乘除运算    或     乘法和逆运算</h2><p><strong>标量和非标量的乘除运算或者矩阵的乘法和逆运算</strong></p>
<ul>
<li>Simulink &#x2F; Commonly Used Blocks</li>
<li>Simulink &#x2F; Math Operations</li>
</ul>
<blockquote>
<p>Product 模块输出两个输入（两个标量、一个标量和一个非标量，或者具有相同维度的两个非标量）的相乘结果。指定此行为的默认参数值包括：</p>
<ul>
<li><strong>乘法：</strong>“<code>按元素(.*)</code>”</li>
<li><strong>输入的数目</strong>：“<code>2</code>”</li>
</ul>
<p>下表显示了 Product 模块使用默认模块参数值的<a href="matlab:open_system(docpath(fullfile(docroot,'toolbox','simulink','examples','blocks','ex_product_block_input_dims')))">示例输入</a>的输出。</p>
<table>
<thead>
<tr>
<th align="left">输入和行为</th>
<th align="left">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>标量 X 标量</strong>输出两个输入的乘积。</td>
<td align="left"><img src="https://ww2.mathworks.cn/help/simulink/slref/prod_x1.png" alt="img"></td>
</tr>
<tr>
<td align="left"><strong>标量 X 非标量</strong>输出与非标量输入具有相同维度的非标量。非标量输出中的每个元素是标量输入与非标量输入中对应元素的乘积。</td>
<td align="left"><img src="https://ww2.mathworks.cn/help/simulink/slref/prod_x2.png" alt="img"></td>
</tr>
<tr>
<td align="left"><strong>非标量 X 非标量</strong>输出与输入具有相同维度的非标量。输出中的每个元素是与输入中对应元素的乘积。</td>
<td align="left"><img src="https://ww2.mathworks.cn/help/simulink/slref/prod_x3.png" alt="img"></td>
</tr>
</tbody></table>
<p>Divide 和 Product of Elements 模块是 Product 模块的变体。</p>
<ul>
<li>有关 Divide 模块的信息，请参阅 <a href="https://ww2.mathworks.cn/help/simulink/slref/divide.html">Divide</a>。</li>
<li>有关 Product of Elements 模块的信息，请参阅 <a href="https://ww2.mathworks.cn/help/simulink/slref/productofelements.html">Product of Elements</a>。</li>
</ul>
<p>Product 模块（或者经过适当配置的 Divide 模块或 Product of Elements 模块）可以：</p>
<ul>
<li>对任意多个标量、向量或矩阵输入进行数值乘除运算</li>
<li>对任意多个矩阵输入执行矩阵乘除运算</li>
</ul>
<p>Product 模块可以执行标量或矩阵乘法运算，具体取决于<strong>乘法</strong>参数的值。此模块接受一个或多个输入，具体取决于<strong>输入的数目</strong>参数。<strong>输入的数目</strong>参数还指定要对每个输入执行的运算。</p>
<p>Product 模块可以输入标量、向量和矩阵的任意组合，对于这些输入，执行的运算必须具有数学定义的结果。该模块对输入执行指定的运算，然后输出结果。</p>
</blockquote>
<h3 id="✍Product-模块有两种模式："><a href="#✍Product-模块有两种模式：" class="headerlink" title="✍Product 模块有两种模式："></a>✍Product 模块有两种模式：</h3><ul>
<li><h2 id="✌按元素模式，按元素处理非标量输入元素"><a href="#✌按元素模式，按元素处理非标量输入元素" class="headerlink" title="✌按元素模式，按元素处理非标量输入元素"></a>✌按元素模式，按元素处理非标量输入元素</h2><ol>
<li><p>当<strong>乘法</strong>设置为“<code>按元素(.*)</code>” 模式下，模块将对任何非标量输入的单个数值元素执行运算。</p>
</li>
<li><p>这<code>相当于 MATLAB® 中的 .* 运算符</code>。Product 模块可以执行<em>各种乘法、除法和算术逆运算</em>。</p>
</li>
<li><p>当 Product 模块在按元素模式下且只有一个输入时，它的功能相当于 <a href="https://ww2.mathworks.cn/help/simulink/slref/productofelements.html">Product of Elements</a> 模块。</p>
</li>
<li><p><strong><code>当模块具有多个输入时，任何非标量输入都必须具有相同的维度，而模块将输出具有这些维度的非标量。</code></strong></p>
<p><strong><code>为了计算输出，模块首先将任何标量输入展开为与非标量输入具有相同维度的非标量</code></strong></p>
</li>
</ol>
<table>
<thead>
<tr>
<th align="left">参数值</th>
<th align="left">示例</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>2</code>          <code>[1 1]</code></td>
<td align="left"><img src="https://s2.loli.net/2022/04/18/zQIVwseJn6XLBvT.png" alt="image-20220416135124585"></td>
<td>在2016a后无论将<code>[1 1]</code>看做 一维数组或矩阵都表示为 <strong>行矩阵形式</strong></td>
</tr>
<tr>
<td align="left"><code>[1 1][1 1]</code></td>
<td align="left"><img src="https://s2.loli.net/2022/04/18/3CByQuwcSnArRhI.png" alt="image-20220416135541957"></td>
<td></td>
</tr>
</tbody></table>
</li>
<li><h2 id="✌矩阵模式，以矩阵方式处理非标量输入"><a href="#✌矩阵模式，以矩阵方式处理非标量输入" class="headerlink" title="✌矩阵模式，以矩阵方式处理非标量输入"></a>✌<em>矩阵模式</em>，以矩阵方式处理非标量输入</h2><ol>
<li>当<strong>乘法</strong>参数的值为“<code>矩阵(*)</code>”模式下，模块按矩阵处理非标量输入。</li>
<li>相当于 <code>MATLAB 中的 * 运算符</code>。Product 模块可以对单个方阵进行逆运算，或者对任意多个具有维度的矩阵（通过数学方式为它们定义了结果）进行乘法或除法运算。</li>
</ol>
<table>
<thead>
<tr>
<th>参数</th>
<th>示例</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><code>[1 1]</code>          <code>[1 1]</code></td>
<td><img src="https://s2.loli.net/2022/04/18/ibFkCzlGsetDcJg.png" alt="image-20220416135800513"></td>
<td><img src="https://s2.loli.net/2022/04/18/6rfYUuMvGzBt58N.png" alt="image-20220416135817568">[1 1] * [1 1] 两个1×1矩阵不满足矩阵相乘规</td>
<td>会报错</td>
</tr>
<tr>
<td><code>[1 1]</code>          <code>[1 1]</code></td>
<td><img src="https://s2.loli.net/2022/04/18/kuiGyP5jfMRObg3.png" alt="image-20220416140313656"></td>
<td>将 <strong>第一个[1 1] 看做一维数组</strong>                        【数组×矩阵】</td>
<td>不会报错                  （视频中2016版本前simulink将[1 1]一维数组默认表示为2×1的列矩阵，满足矩阵相乘改规则，但新版本默认为1×1的列矩阵 相乘任然不报错  【未知原因】）</td>
</tr>
<tr>
<td><code>[1 1]</code>          <code>[1 1]</code></td>
<td><img src="https://s2.loli.net/2022/04/18/6XfeF4lWHzqZBnY.png" alt="image-20220416142918589"></td>
<td>将 <strong>第二个[1 1] 看做一维数组</strong>                    【矩阵×数组】</td>
<td>不会报错</td>
</tr>
</tbody></table>
</li>
<li><h4 id="这两个模式的不同之处在于发生的乘法和除法的类型"><a href="#这两个模式的不同之处在于发生的乘法和除法的类型" class="headerlink" title="这两个模式的不同之处在于发生的乘法和除法的类型"></a>这两个模式的不同之处在于发生的乘法和除法的类型</h4></li>
</ul>
<blockquote>
<p>仿真与代码生成之间的预期差异</p>
<p>对于复数浮点输入的按元素运算，仿真和代码生成结果在接近溢出情况下可能会有所差异。尽管在“配置参数”对话框的<strong>代码生成</strong> &gt; <strong>接口</strong>窗格上选中了<strong>复数</strong>且取消选中了<strong>非有限数</strong>，代码生成器也不会为中间溢出生成特殊情况代码。此方法可以提高嵌入式运算在不含极值的一般情况下的效率。如果输入可能包含极值，必须显式处理这些情况。</p>
<p>如果 <code>NaN</code> 和 <code>inf</code> 值在数学上没有意义，则生成的代码可能不会为这些值生成与仿真相同的模式。例如，如果仿真输出包含 <code>NaN</code>，生成的代码的输出也会包含 <code>NaN</code>，但不一定在相同的位置。</p>
</blockquote>
<hr>
<h2 id="Bus-Creator总线"><a href="#Bus-Creator总线" class="headerlink" title="Bus Creator总线"></a><img src="https://ww2.mathworks.cn/help/simulink/slref/bus_creator_block_icon.png" alt="Bus Creator block">Bus Creator总线</h2><p>根据输入元素创建总线</p>
<ul>
<li>Simulink &#x2F; Commonly Used Blocks</li>
<li>Simulink &#x2F; Signal Routing</li>
</ul>
<blockquote>
<ul>
<li><p>防止界面由于线过多而杂乱</p>
</li>
<li><p>总线元素必须具有唯一名称。</p>
<p>默认情况下，总线的每个元素都继承连接到 Bus Creator 模块的元素的名称。</p>
<p>如果存在重复名称，Bus Creator 模块会将端口号追加到所有输入元素名称。</p>
<p>对于没有名称的元素，Bus Creator 模块会生成 <code>signaln</code> 形式的名称，其中 <code>n</code> 是连接到元素的端口号。当您搜索元素源或选择元素以连接到其他模块时，您可以按名称引用元素</p>
</li>
</ul>
</blockquote>
<h2 id="Bus-Selector总线分配器"><a href="#Bus-Selector总线分配器" class="headerlink" title="Bus Selector总线分配器"></a><img src="https://ww2.mathworks.cn/help/simulink/slref/bus_selector_block_icon.png" alt="Bus Selector block">Bus Selector总线分配器</h2><p>从传入总线中选择元素</p>
<ul>
<li>Simulink &#x2F; Commonly Used Blocks</li>
<li>Simulink &#x2F; Signal Routing</li>
</ul>
<blockquote>
<ul>
<li>将  ‘电缆 ’  中的信号线打乱输出</li>
<li>Bus Selector 模块输出您从输入总线选择的元素。该模块可以单独输出所选的各元素或在一个新的虚拟总线中输出所选元素。</li>
</ul>
</blockquote>
<h2 id="Scope示波器"><a href="#Scope示波器" class="headerlink" title="Scope示波器"></a><img src="https://ww2.mathworks.cn/help/simulink/slref/scope_block_icon.png" alt="Scope block">Scope示波器</h2><p>显示仿真过程中生成的信号</p>
<ul>
<li><p>Simulink &#x2F; Commonly Used Blocks</p>
</li>
<li><p>Simulink &#x2F; Sinks</p>
</li>
</ul>
<blockquote>
<ul>
<li><p>输出随时间变化的波形</p>
</li>
<li><p>Simulink® Scope 模块和 DSP System Toolbox™ Time Scope 模块显示时域信号。</p>
<p><img src="https://ww2.mathworks.cn/help/simulink/slref/timescope_block_open.png" alt="img"><img src="https://ww2.mathworks.cn/help/simulink/slref/scope_block_open.png" alt="img"></p>
<p>这两个模块具有相同的功能，但是默认设置不同。Time Scope 针对离散时间处理进行了优化。Scope 针对一般时域仿真进行了优化。如需并排比较，请参阅 <a href="https://ww2.mathworks.cn/help/simulink/ug/simulation-data-display-and-capture-using-scopes.html#buw7l4r-5">Simulink Scope 与 DSP System Toolbox Time Scope 的比较</a>。</p>
<p>示波器具有以下功能面板：</p>
<ul>
<li><a href="https://ww2.mathworks.cn/help/simulink/ug/scope-trigger-panel.html">触发器</a> - 设置触发器，在发生指定事件时同步重复的信号并暂停显示。</li>
<li><a href="https://ww2.mathworks.cn/help/simulink/ug/cursor-measurements-panel.html">游标测量</a> - 使用垂直游标和水平游标测量信号值。</li>
<li><a href="https://ww2.mathworks.cn/help/simulink/ug/signal-statistics-panel.html">信号统计</a> - 显示所选信号的最大值、最小值、峰间差、均值、中位数和 RMS 值。</li>
<li><a href="https://ww2.mathworks.cn/help/simulink/ug/peak-finder-panel.html">峰值查找器</a> - 查找最大值，显示出现最大值时的 x 轴值。</li>
<li><a href="https://ww2.mathworks.cn/help/simulink/ug/bilevel-measurements-panel.html">双电平测量</a> - 测量过渡过程、过冲、下冲和循环。</li>
</ul>
<p>您必须拥有 Simscape™ 或 DSP System Toolbox 许可证，才能使用峰值查找器、双电平测量和信号统计这些功能面板。</p>
<p>示波器画面支持：</p>
<ul>
<li><p>仿真控制 - 从“范围”窗口中使用<strong>运行</strong>、<strong>步进</strong>和<strong>步退</strong>工具栏按钮可以调试模型。</p>
</li>
<li><p>多个信号 - 可使用多个输入端口在同一个 <em>y</em> 轴（视图）上绘制多个信号。</p>
</li>
<li><p>多个 y 轴（显示）- 显示多个 <em>y</em> 轴。所有 <em>y</em> 轴在 <em>x</em> 轴上具有共同的时间范围。</p>
</li>
<li><p>修改参数 - 在仿真之前和仿真期间修改波形参数值。</p>
</li>
<li><p>自动缩放轴范围 - 在仿真期间或仿真结束时自动缩放轴范围。在坐标区的顶部和底部会留有边距。</p>
</li>
<li><p>仿真后显示数据 - 仿真期间保存波形数据。如果在仿真开始时波形视图关闭，则当您在仿真后打开波形视图时，波形视图将显示附加的输入信号的仿真结果。</p>
<p><strong>注意：</strong></p>
<p>如果采样率高或仿真时间长，可能会遇到内存或系统性能问题，因为示波器在内部保存数据。要限制为波形可视化保存的数据量，请使用 <a href="https://ww2.mathworks.cn/help/simulink/slref/scope.html#f5-1117037_sep_buuaefi-1">将数据点限制为最后, Limit data points to last将数据点限制为最后Limit data points to last</a> 属性。</p>
</li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="Mux复用器"><a href="#Mux复用器" class="headerlink" title="Mux复用器"></a><img src="https://ww2.mathworks.cn/help/simulink/slref/mux_block_icon.png" alt="Mux block">Mux复用器</h2><p>将相同数据类型和复&#x2F;实性的输入信号合并为虚拟向量</p>
<blockquote>
<p>Mux 模块将具有相同数据类型和复&#x2F;实性的输入合并为一个向量输出。复路输出信号是扁平的，即使您从其他复路信号创建复路信号也是如此。但是，您可以使用多个 Mux 模块分阶段创建一个复路信号。</p>
<p>复路信号通过将两条或多条信号线合并为一条线，简化模型的视觉外观。复路信号不影响仿真或代码生成。</p>
<p><strong>提示：</strong></p>
<p>如果输入具有不同数据类型或复&#x2F;实性，可使用 <a href="https://ww2.mathworks.cn/help/simulink/slref/buscreator.html">Bus Creator</a> 模块在外观上对虚拟总线中的信号进行分组。有关详细信息，请参阅<a href="https://ww2.mathworks.cn/help/simulink/ug/composite-signal-techniques.html">合成信号的类型</a>。</p>
</blockquote>
<h2 id="Demux分路器（推荐"><a href="#Demux分路器（推荐" class="headerlink" title="Demux分路器（推荐)"></a><img src="https://ww2.mathworks.cn/help/simulink/slref/demux_block_icon.png" alt="Demux block">Demux分路器（推荐)</h2><p>提取并输出虚拟向量信号的元素</p>
<ul>
<li>Simulink &#x2F; Commonly Used Blocks</li>
<li>Simulink &#x2F; Signal Routing</li>
</ul>
<blockquote>
<ul>
<li><p>-1 表示自动分配</p>
<p><img src="https://s2.loli.net/2022/04/18/K9Sj6tOYoP28iXm.png" alt="image-20220416154052585.png"></p>
</li>
<li><p>Demux 模块提取输入向量信号的分量，再将它们输出为单独的信号。输出信号端口从上到下排列</p>
</li>
</ul>
</blockquote>
<h2 id="Switch开关模块"><a href="#Switch开关模块" class="headerlink" title="Switch开关模块"></a><img src="https://ww2.mathworks.cn/help/simulink/slref/switch_block_icon.png" alt="Switch block">Switch开关模块</h2><p>将多个信号合并为一个信号</p>
<ul>
<li>Simulink &#x2F; Commonly Used Blocks</li>
<li>Simulink &#x2F; Signal Routing</li>
</ul>
<p><img src="https://s2.loli.net/2022/04/18/GpvymQeaHUP7xYr.png" alt="image-20220416155518138"></p>
<h2 id="Gain增益模块"><a href="#Gain增益模块" class="headerlink" title="Gain增益模块"></a><img src="https://ww2.mathworks.cn/help/simulink/slref/gain_block_icon.png" alt="Gain block">Gain增益模块</h2><p>将输入乘以常量</p>
<ul>
<li>Simulink &#x2F; Commonly Used Blocks</li>
<li>Simulink &#x2F; Math Operations</li>
</ul>
<blockquote>
<p>Gain 模块将输入乘以一个常量值（增益）。输入和增益可以是标量、向量或矩阵。</p>
<p>在<strong>增益</strong>参数中指定增益的值。<strong>乘法</strong>参数用于指定按元素还是矩阵乘法。对于矩阵乘法，此参数还用于指示被乘数的阶。</p>
<p>通过舍入到最接近的值和饱和操作将增益从双精度型离线转换为模块封装中指定的数据类型。然后将输入和增益相乘，结果通过指定的舍入和溢出模式转换为输出数据类型。</p>
</blockquote>
<p><img src="https://s2.loli.net/2022/04/18/HbOhF82RlsxavNT.png" alt="image-20220416163402335.png"></p>
<p><img src="https://s2.loli.net/2022/04/18/qyR5jH2IhLuDwxb.png" alt="image-20220416164624240"></p>
<h2 id="Relational-Operator关系运算"><a href="#Relational-Operator关系运算" class="headerlink" title="Relational Operator关系运算"></a><img src="https://ww2.mathworks.cn/help/simulink/slref/relational_operator_block_icon.png" alt="Relational Operator block">Relational Operator关系运算</h2><p>对输入执行指定的关系运算</p>
<ul>
<li>Simulink &#x2F; Commonly Used Blocks</li>
<li>Simulink &#x2F; Logic and Bit Operations</li>
</ul>
<table>
<thead>
<tr>
<th align="left">运算</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>==</code></td>
<td align="left">如果第一个输入等于第二个输入，则为 TRUE</td>
</tr>
<tr>
<td align="left"><code>~=</code></td>
<td align="left">如果第一个输入不等于第二个输入，则为 TRUE</td>
</tr>
<tr>
<td align="left"><code>&lt;</code></td>
<td align="left">如果第一个输入小于第二个输入，则为 TRUE</td>
</tr>
<tr>
<td align="left"><code>&lt;=</code></td>
<td align="left">如果第一个输入小于或等于第二个输入，则为 TRUE</td>
</tr>
<tr>
<td align="left"><code>&gt;=</code></td>
<td align="left">如果第一个输入大于或等于第二个输入，则为 TRUE</td>
</tr>
<tr>
<td align="left"><code>&gt;</code></td>
<td align="left">如果第一个输入大于第二个输入，则为 TRUE</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">运算</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>isInf</code></td>
<td align="left">如果输入为 <code>无穷大Inf</code>，则为 TRUE</td>
</tr>
<tr>
<td align="left"><code>isNaN</code></td>
<td align="left">如果输入为 <code>数值NaN</code>，则为 TRUE                                                            （NaN(Not Number)不定式 例如：0&#x2F;0   inf&#x2F;inf）</td>
</tr>
<tr>
<td align="left"><code>isFinite</code></td>
<td align="left">如果输入为有限值，则为 TRUE</td>
</tr>
</tbody></table>
<p><img src="https://s2.loli.net/2022/04/18/XBWGfVo6j1xwmdN.png" alt="image-20220416170920516"></p>
<h2 id="Logical-Operator逻辑运算"><a href="#Logical-Operator逻辑运算" class="headerlink" title="Logical Operator逻辑运算"></a><img src="https://ww2.mathworks.cn/help/simulink/slref/logical_operator_block_icon.png" alt="Logical Operator block">Logical Operator逻辑运算</h2><p>对输入进行指定的逻辑运算</p>
<ul>
<li>Simulink &#x2F; Commonly Used Blocks</li>
<li>Simulink &#x2F; Logic and Bit Operations</li>
</ul>
<table>
<thead>
<tr>
<th align="left">运算</th>
<th align="left">描述</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">AND</td>
<td align="left">如果所有输入均为 TRUE，则为 TRUE</td>
<td>与</td>
</tr>
<tr>
<td align="left">OR</td>
<td align="left">如果至少有一个输入为 TRUE，则为 TRUE</td>
<td>或</td>
</tr>
<tr>
<td align="left">NAND</td>
<td align="left">如果至少有一个输入为 FALSE，则为 TRUE</td>
<td>与非</td>
</tr>
<tr>
<td align="left">NOR</td>
<td align="left">如果所有输入均不为 TRUE，则为 TRUE</td>
<td>或非</td>
</tr>
<tr>
<td align="left">XOR</td>
<td align="left">如果有奇数个输入为 TRUE，则为 TRUE</td>
<td>异或</td>
</tr>
<tr>
<td align="left">NXOR</td>
<td align="left">如果有偶数个输入为 TRUE，则为 TRUE</td>
<td>同或</td>
</tr>
<tr>
<td align="left">NOT</td>
<td align="left">如果输入为 FALSE，则为 TRUE</td>
<td>非</td>
</tr>
</tbody></table>
<blockquote>
<p>Logical Operator 模块对其输入执行指定的逻辑运算。输入值为非零值时为 true (<code>1</code>)，为零时则为 false (<code>0</code>)。</p>
<p>使用<strong>运算符</strong>参数列表选择连接输入的布尔运算。如果您选择“<code>矩形</code>”作为<strong>图标形状</strong>属性，所选运算符的名称将显示在模块图标上。</p>
<p>如果您选择“<code>不同</code>”作为<strong>图标形状</strong>属性，则所选运算符的名称不会显示在模块图标上。</p>
<p>如果选择“<code>不同</code>”作为<strong>图标形状</strong>，则模块的外观会指示其功能。Simulink® 软件将按照 IEEE® 逻辑函数的图形符号标准，显示所选运算符的独特形状。</p>
<p><img src="https://ww2.mathworks.cn/help/simulink/slref/logical_operator_shapes.png" alt="img"></p>
<p>要指定输入端口的数量，请使用<strong>输入端口数目</strong>参数。使用<strong>输出数据类型</strong>参数指定输出类型。如果为 TRUE，则输出值为 <code>1</code>，如果为 FALSE，则输出值为 <code>0</code>。</p>
<blockquote>
<p><strong>注意</strong></p>
<p>输出数据类型应该准确表示零。满足此条件的数据类型包括有符号整数和无符号整数，以及所有浮点数据类型。</p>
<p>输出大小取决于输入向量大小和所选运算符：</p>
<ul>
<li><p>如果模块有多个输入，则任何非标量输入都必须具有相同的维度。例如，如果有任何输入是 2×2 数组，则所有其他非标量输入也必须是 2×2 数组。</p>
<p>标量输入将扩展为与非标量输入具有相同的维度。</p>
<p>如果模块有多个输入，则输出与输入具有相同的维度（标量扩展后），并且每个输出元素都是将指定逻辑运算应用于相应输入元素的结果。例如，如果指定运算为 AND，输入为 2×2 数组，则输出为 2×2 数组，其左上角的元素是将 AND 应用于输入的左上角元素的结果，以此类推。</p>
</li>
<li><p>对于单个向量输入，模块会将运算（除 NOT 运算符外）应用于向量的所有元素。输出始终为标量。</p>
</li>
<li><p>NOT 运算符仅接受一个输入，该输入可以是标量也可以是向量。如果输入为向量，则输出为相同大小的向量，其中包含输入向量元素的逻辑补码。</p>
</li>
</ul>
<p>当配置为多输入 XOR 门时，此模块将按照 IEEE 逻辑元素标准的规定执行加法双模运算。</p>
</blockquote>
</blockquote>
<h2 id="Integrator积分模块"><a href="#Integrator积分模块" class="headerlink" title="Integrator积分模块"></a><img src="https://www.mathworks.com/help/releases/R2022a/simulink/slref/integrator_block_icon.png" alt="Integrator block">Integrator积分模块</h2><p>对信号求积分</p>
<ul>
<li>Simulink &#x2F; Commonly Used Blocks</li>
<li>Simulink &#x2F; Continuous</li>
</ul>
<blockquote>
<ul>
<li><h6 id="输出其-输入信号-相对于-时间-的积分值"><a href="#输出其-输入信号-相对于-时间-的积分值" class="headerlink" title="输出其   输入信号   相对于  时间  的积分值"></a>输出其   输入信号   相对于  时间  的积分值</h6></li>
<li><h6 id="Simulink®-将-Integrator-模块作为具有一种状态的动态系统进行处理。模块动态由以下方程指定："><a href="#Simulink®-将-Integrator-模块作为具有一种状态的动态系统进行处理。模块动态由以下方程指定：" class="headerlink" title="Simulink® 将 Integrator 模块作为具有一种状态的动态系统进行处理。模块动态由以下方程指定："></a>Simulink® 将 Integrator 模块作为具有一种状态的动态系统进行处理。模块动态由以下方程指定：</h6><p><img src="https://s2.loli.net/2022/04/18/vpuIhKq8Ejxtrc4.png" alt="image-20220417085622410"></p>
<ul>
<li>u 是模块输入。</li>
<li>y 是模块输出。</li>
<li>x 是模块状态。</li>
<li>x0 是 x 的初始条件。</li>
</ul>
<p>方程定义了连续时间下的准确关系，但 Simulink 使用数值逼近方法以有限精度来进行计算。使用“配置参数”对话框的<strong>求解器</strong>窗格（请参阅<a href="https://www.mathworks.com/help/releases/R2022a/simulink/gui/solver-pane.html">求解器窗格</a>）可以选择最适合的方法。</p>
</li>
<li><h6 id="使用参数对话框可以："><a href="#使用参数对话框可以：" class="headerlink" title="使用参数对话框可以："></a>使用参数对话框可以：</h6><ul>
<li>定义积分的上限和下限</li>
<li>创建可将模块的输出（状态）重置为初始值的输入，具体取决于输入的变化方式。</li>
<li>创建可选的状态输出，以便模块的输出值可以触发模块重置</li>
</ul>
<p>使用 Discrete-Time Integrator 模块可以创建纯离散系统。</p>
</li>
<li><h6 id="定义初始条件"><a href="#定义初始条件" class="headerlink" title="定义初始条件"></a>定义初始条件</h6><p>可以在模块对话框上将初始条件定义为参数，或者从外部信号输入初始条件：</p>
<ul>
<li><p>要将初始条件定义为模块参数，请将<strong>初始条件来源</strong>参数指定为“<code>内部</code>”并在<strong>初始条件</strong>字段中输入值。</p>
</li>
<li><p>要从外部源提供初始条件，请将<strong>初始条件来源</strong>参数指定为“<code>外部</code>”。模块输入下会显示一个额外输入端口。</p>
<p><img src="https://www.mathworks.com/help/releases/R2022a/simulink/slref/intx0.png" alt="img"></p>
<p>注意</p>
<p>如果积分器限制其输出（请参阅<a href="https://www.mathworks.com/help/releases/R2022a/simulink/slref/integrator.html#f7-890704_sep_f7-1739821">限制积分</a>），则初始条件必须在积分器的饱和界限范围内。如果初始条件在模块饱和界限范围之外，该模块会显示错误消息。</p>
</li>
</ul>
</li>
<li><h6 id="限制积分"><a href="#限制积分" class="headerlink" title="限制积分"></a>限制积分</h6><p>要防止输出超出可指定的级别，请选中<strong>限制输出</strong>复选框，并在相应的参数字段中输入限制。此操作会使该模块起到限量积分器的作用。当输出达到界限时，积分操作将关闭以防止积分饱和。在仿真期间，您可以更改限制，但不能更改是否限制输出。模块按如下方式确定输出：</p>
<ul>
<li>当积分小于或等于<strong>饱和下限</strong>时，输出保持在<strong>饱和下限</strong>。</li>
<li>当积分在<strong>饱和下限</strong>和<strong>饱和上限</strong>之间时，输出为积分。</li>
<li>当积分大于或等于<strong>饱和上限</strong>时，输出保持在<strong>饱和上限</strong>。</li>
</ul>
<p>要生成指示状态正受到限制的信号，请选中<strong>显示饱和端口</strong>复选框。模块输出端口下方会显示一个饱和端口。</p>
<p><img src="https://www.mathworks.com/help/releases/R2022a/simulink/slref/intsaturation.png" alt="img"></p>
<p>信号具有以下三个值之一：</p>
<ul>
<li>1 表示正在应用上限。</li>
<li>0 表示积分不受限制。</li>
<li>-1 表示正在应用下限。</li>
</ul>
<p>如果选中此复选框，模块将包含三个过零点：一个用于检测何时进入饱和上界，一个用于检测何时进入饱和下界，一个用于检测何时不再饱和。</p>
<blockquote>
<p><strong>注意</strong></p>
<p>对于 Integrator Limited 模块，默认情况下<strong>限制输出</strong>处于选中状态，<strong>饱和上限</strong>设置为 <code>1</code>，<strong>饱和下限</strong>设置为 <code>0</code>。</p>
</blockquote>
</li>
<li><h6 id="重置状态"><a href="#重置状态" class="headerlink" title="重置状态"></a>重置状态</h6><p>模块可以根据外部信号将其状态重置为指定的初始条件。要使模块重置其状态，选中<strong>外部重置</strong>选项</p>
<p><img src="https://s2.loli.net/2022/04/18/cySXQiukv3Yx7nH.png" alt="image-20220417093202891"></p>
<p>模块输入端口下方将显示一个触发端口，并指示触发类型。</p>
<p><img src="https://www.mathworks.com/help/releases/R2022a/simulink/slref/intreset.png" alt="img"></p>
<ul>
<li><p>选择“<code>上升沿</code>”可在重置信号从负值或零上升到正值时重置状态。</p>
<p>✍例：</p>
<p>​			<img src="https://s2.loli.net/2022/04/18/DXPzBxN1SMHh8FT.png" alt="image-20220417094919561"></p>
</li>
<li><p>选择“<code>下降沿</code>”可在重置信号从正值下降到零或负值时重置状态。</p>
</li>
<li><p>选择“<code>任一沿</code>”可在重置信号从零变为非零值、从非零值变为零或改变符号时重置状态。</p>
</li>
<li><p>选择“<code>级别</code>”可于重置信号在当前时间步为非零值时或者从上一个时间步的非零值更改为当前时间步的零值时重置状态。</p>
</li>
<li><p>选择“<code>级别保持</code>”可于重置信号在当前时间步为非零值时重置状态。</p>
</li>
</ul>
</li>
<li><h6 id="状态端口"><a href="#状态端口" class="headerlink" title="状态端口"></a>状态端口</h6><p>在 Integrator 模块的参数对话框上选中<strong>显示状态端口</strong>复选框会导致 Integrator 模块的顶部显示一个附加输出端口，即状态端口。</p>
<p><img src="https://www.mathworks.com/help/releases/R2022a/simulink/slref/intstateout.png" alt="img"></p>
<p>状态端口的输出与模块的标准输出端口的输出相同，但以下情况除外：</p>
<ul>
<li><p>如果在当前时间步重置模块，则状态端口的输出为模块尚未重置时在模块的标准输出中显示的值。</p>
</li>
<li><p>状态端口的输出在时间步中的显示会早于 Integrator 模块输出端口的输出的显示。</p>
</li>
</ul>
<p>使用状态端口可以避免以下建模方案中出现代数环（输出直接反馈为输入相当于蛇咬住自己的尾巴）：</p>
<ul>
<li><p>自重置积分器（请参阅<a href="https://www.mathworks.com/help/releases/R2022a/simulink/slref/integrator.html#f7-890704_sep_f7-1513507">创建自重置积分器</a>）</p>
</li>
<li><p>将状态从一个使能子系统切换到另一个（请参阅<a href="https://www.mathworks.com/help/releases/R2022a/simulink/slref/integrator.html#f7-890704_sep_f7-1513533">在使能子系统之间切换状态</a>）</p>
<blockquote>
<p><strong>注意</strong></p>
<p>当更新模型时，Simulink 会检查状态端口是否适用于这两个方案中的一个。如果不适用，会显示错误消息。此外，不能将此端口的输出记录在于加速模式下执行的引用模型中。如果为该端口启用记录，Simulink 将在执行引用模型期间生成“signal not found”警告。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>Integrator 模块支持绕回状态</p>
<p>在角状态达到 2π 时将其重置为 <code>0</code>（或者在其达到 π 时重置为 –π，以确保数值对称）。</p>
<p>此方法可改进正弦和余弦计算的准确性，并缩短角度减小时间。但该方法还需要过零检测，并引入了求解器重置，这会减慢变步长求解器的仿真，尤其是在大型模型中</p>
<p><img src="https://www.mathworks.com/help/releases/R2022a/simulink/slref/wrappedintegrator.png" alt="img"></p>
<p>Simulink 允许以绕回状态上限和下限值参数为边界的绕回状态。下面的方程给出了确定绕回状态的算法：</p>
<p><img src="https://s2.loli.net/2022/04/18/Hj7wSPhkOt9v3Va.png" alt="image-20220417090407004.png"></p>
<p>其中：</p>
<ul>
<li>xl 是绕回状态的下限值。</li>
<li>xu 是绕回状态的上限值。</li>
<li>y 是输出。</li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="Saturation限制模块"><a href="#Saturation限制模块" class="headerlink" title="Saturation限制模块"></a><img src="https://www.mathworks.com/help/releases/R2022a/simulink/slref/saturation_block_icon.png" alt="Saturation block">Saturation限制模块</h2><p>将输入信号限制在饱和上界和下界值之间</p>
<ul>
<li>Simulink &#x2F; Commonly Used Blocks</li>
<li>Simulink &#x2F; Discontinuities</li>
</ul>
<blockquote>
<p>Saturation 模块产生输出信号，该信号是在饱和上界和下界值之间的输入信号值。上界和下界由参数<strong>上限</strong>和<strong>下限</strong>指定。</p>
<table>
<thead>
<tr>
<th align="left">输入</th>
<th align="left">输出</th>
</tr>
</thead>
<tbody><tr>
<td align="left">下限 ≤ 输入值 ≤ 上限</td>
<td align="left">输入值</td>
</tr>
<tr>
<td align="left">输入值 &lt; 下限</td>
<td align="left">下限</td>
</tr>
<tr>
<td align="left">输入值 &gt; 上限</td>
<td align="left">上限</td>
</tr>
</tbody></table>
<p><img src="https://s2.loli.net/2022/04/18/iq6aEtDIjTbwdWX.png" alt="image-20220417092049477.png"><img src="https://s2.loli.net/2022/04/17/a61nO2iBljPHUsK.png" alt="image-20220417092753929"></p>
</blockquote>
<h2 id="Unit-Delat单位延迟模块"><a href="#Unit-Delat单位延迟模块" class="headerlink" title="Unit Delat单位延迟模块"></a><img src="https://www.mathworks.com/help/releases/R2022a/simulink/slref/unit_delay_block_icon.png" alt="Unit Delay block">Unit Delat单位延迟模块</h2><p>将信号延迟一个采样周期</p>
<ul>
<li>Simulink &#x2F; Discrete</li>
<li>HDL Coder &#x2F; Discrete</li>
</ul>
<blockquote>
<ul>
<li>延迟一个采样周期</li>
</ul>
</blockquote>
<h2 id="Convert数据类型转换"><a href="#Convert数据类型转换" class="headerlink" title="Convert数据类型转换"></a><img src="https://www.mathworks.com/help/releases/R2022a/simulink/slref/data_type_conversion_block_icon.png" alt="Data Type Conversion block">Convert数据类型转换</h2><p>将输入信号转换为指定的数据类型</p>
<ul>
<li>Simulink &#x2F; Commonly Used Blocks</li>
<li>Simulink &#x2F; Signal Attributes</li>
</ul>
<p><img src="https://s2.loli.net/2022/04/18/m4rQlegkWMwCv1F.png" alt="image-20220417222147778.png"></p>
<blockquote>
<p>采用Inherit via internal rule</p>
<p><img src="https://www.ilovematlab.cn/data/attachment/forum/201811/14/150728p95979jydrnmi051.jpg" alt="采用Inherit via internal rule"></p>
<p>采用定义输出类型的方式<img src="https://www.ilovematlab.cn/data/attachment/forum/201811/14/150837lv329j3hj2hywwd3.jpg" alt="采用定义输出类型的方式"></p>
</blockquote>
<blockquote>
<p><img src="https://s2.loli.net/2022/04/18/zCBelTvV4MYXSA6.png" alt="image-20220417220102608.png"></p>
<p>其中有3类用fixdt表示的定点数类型。</p>
<p>其中fixdt(1,16,0)中的“1”表示“有符号数”，“16”表示16位二进制，“0”表示0位小数（即整数）。fixdt(1,16,0)等效于int16。fixdt(1,16,0)中的最后一个0可以省略，即为fixdt(1,16)。</p>
<p>当表示n位小数位时，n可以为正数，也可以为负数。比如n&#x3D;1时，所表示的小数的最小精度为0.5；当n&#x3D;-1时，所表示的“小数”的最小精度为2</p>
<p><strong><a href="%5B(4%E6%9D%A1%E6%B6%88%E6%81%AF">更多</a> 深入研究simulink建模与仿真之定点数据类型fixdt_booksyhay的博客-CSDN博客_fixdt(0,16,0.1,0)](<a href="https://blog.csdn.net/booksyhay/article/details/88032743">https://blog.csdn.net/booksyhay/article/details/88032743</a>))</strong></p>
</blockquote>
<p><img src="https://s2.loli.net/2022/04/18/XudeO6loD8cSUMJ.png" alt="image-20220417165003063.png"></p>
<p>rwv方式以浮点数进行存储</p>
<p>si 方式会将浮点数转换成相应的定点数</p>
<p><strong>ி涉及二进制移位运算，再转换设计小数点的丢失</strong></p>
<ul>
<li><p>例1：</p>
<p><img src="https://s2.loli.net/2022/04/18/G3P2EbwOajhVLYQ.png" alt="image-20220417163409353.png"></p>
<blockquote>
<p>转换比例  (En2) :  2^-2    </p>
<p>将15 转换位相应的二进制数   ——&gt;  001111  由于比例  转换为  <code>001111.00</code></p>
<p>在 SI 转换中 因转换为 	相应的定点数类型 所以<strong>小数点信息而被丢失</strong></p>
</blockquote>
<p>丢失2个二进制小数点，相当于乘以2的平方 所以15×4&#x3D;60</p>
</li>
<li><p>例2：<img src="https://s2.loli.net/2022/04/18/MpTcbI4JowPdxDg.png" alt="image-20220417232646881.png"></p>
<blockquote>
<p><code>sfix8_En2</code></p>
<ul>
<li><p><code>sfix8</code> 表示  8位  有符号  定点数</p>
</li>
<li><p><code>En2</code>  表示 2 位二进制小数</p>
</li>
<li><p>sfix表示的是signed fixed-point</p>
<ul>
<li><p>s 表示 有符号</p>
</li>
<li><p>fix 代表 定点数  </p>
<p>✍定点数 (fixed-point number)就是<strong>小数点位置固定的数</strong>，也就是说，小数点后面的位数是固定的，比如要记录一笔账目，这些账目的数字都不会超过100，就可以使用2位小数位定点数来记录，比如99.99，2.30，75.28；如果要更精确，可以使用3位小数位的定点数来记录，比如7.668，38.235</p>
</li>
</ul>
</li>
<li><p>后续的En13表示小数位的长度 </p>
<ul>
<li>E表示底数为2       n表示指数为负，故为En13表示13位二进制小数</li>
</ul>
</li>
</ul>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>07_Simulink在自动控制理论中的仿真</category>
      </categories>
      <tags>
        <tag>MATLAB学习</tag>
      </tags>
  </entry>
  <entry>
    <title>02_回调函数</title>
    <url>/2022/05/03/MATLAB%E5%AD%A6%E4%B9%A0/09_MATLAB%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1/02_%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h1><h2 id="1、回调函数格式"><a href="#1、回调函数格式" class="headerlink" title="1、回调函数格式"></a>1、回调函数格式</h2><p>回调函数（Callback function） 是对象被选中时响应的函数，是链接程序界面整个程序系统的失职性功能的纽带。GUI窗口和坐标轴只能被回调函数使用，这是默认值。回调函数的取值为字符串，可以是某个M文件或一小段MATLAB 语句，当用户激活某个控制对象时，应用程序就运行该属性定义的子程序</p>
<ul>
<li><p>语法格式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">varargout</span> = <span class="title">objecTag_Callback</span><span class="params">(h,eventdata,handles,varargain)</span></span></span><br></pre></td></tr></table></figure>

<p>其中 ：objectTag 为回调函数名，GUI 对其自动命名，当在GUI上添加一个控制时就以这个控制件的 “  Tag ” 确定一个回调函数名。</p>
<p>例如：添加一个按钮Tag 属性是 pushbuttonl ，回调函数就命名为 pushbuttonl_Callback ，保存文件时就该文件作为子函数保存。若修改了 tag 属性，回调函数名随之改变。函数内，h 为发生时间的控制句柄，eventdata 为事件数据结构，handles 为传入的对象句柄，varargin 为传递给回调函数的参数列表</p>
</li>
</ul>
<h2 id="2、回调函数使用说明"><a href="#2、回调函数使用说明" class="headerlink" title="2、回调函数使用说明"></a>2、回调函数使用说明</h2><p>回调函数一般在菜单或对话栏中采用事件处理机制进行地调用，当时事件被触发时才执行设置的回调函数，下面介绍常用的回调函数</p>
<h4 id="（1）图形对象的回调函数"><a href="#（1）图形对象的回调函数" class="headerlink" title="（1）图形对象的回调函数"></a>（1）图形对象的回调函数</h4><ul>
<li>ButtonDownFcn  :单用户将鼠标放到某个对象上，单击鼠标左键时调用的回调函数</li>
<li>CreaFcn  :指在空间对象创建过程中执行的回调函数，一般用于各种属性的初始化，包括初始化样式、颜色、初始值等</li>
<li>DeleFcn  :只删除对象过程中执行的回调函数</li>
</ul>
<h4 id="（2）图形窗口的回调函数"><a href="#（2）图形窗口的回调函数" class="headerlink" title="（2）图形窗口的回调函数"></a>（2）图形窗口的回调函数</h4><ul>
<li>CloseRequsetFcn  :当求求关闭图形窗口时调用的回调函数</li>
<li>KeyPPressFcn  :当用户在窗口内按下鼠标时调用的回调函数</li>
<li>WindowButtonDownFcn  :当用户在图形窗口无控件的地方按下鼠标时调用的回调函数</li>
<li>WindowButtonUpFcn  :当用户在窗口释放鼠标时调用的回调函数</li>
<li>WindowButtonMotionFcn  :当用户在图形窗口中移动鼠标时调用的回调函数</li>
</ul>
]]></content>
      <categories>
        <category>09_MATLAB界面设计</category>
      </categories>
      <tags>
        <tag>MATLAB学习</tag>
      </tags>
  </entry>
  <entry>
    <title>03_控件工具及属性</title>
    <url>/2022/05/03/MATLAB%E5%AD%A6%E4%B9%A0/09_MATLAB%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1/03_%E6%8E%A7%E4%BB%B6%E5%B7%A5%E5%85%B7%E5%8F%8A%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<h1 id="控件工具及属性"><a href="#控件工具及属性" class="headerlink" title="控件工具及属性"></a>控件工具及属性</h1><h2 id="1、控制对象类型及描述"><a href="#1、控制对象类型及描述" class="headerlink" title="1、控制对象类型及描述"></a>1、控制对象类型及描述</h2><p>控制对象是事件相应的图形界面对象。当某一事件发生时，应用程序会做出响应并执行某些预定的功能子程序（Callback）。</p>
<p>MATLAB中的控件大致可分为两种</p>
<ul>
<li>动作控件，鼠标单击这些控件时会产生响应的响应</li>
<li>静态控件，不产生响应的控件，加文本框等</li>
</ul>
<p>每种空间都有可以设置的参数，用于表现控件的外形、功能、效果属性。属性由属性名和属性值组成，他们必须是成对出现的</p>
<h2 id="2、控件对象控制属性"><a href="#2、控件对象控制属性" class="headerlink" title="2、控件对象控制属性"></a>2、控件对象控制属性</h2><p>用户可以在创建控件对象时，需设定其属性值，未指定时将使用系统默认值，界面设计主要有两大类对象属性：<code>第一类是控件对象都具有的公共属性</code>  <code>第二类是控件对象作为图形对象所具有的属性</code></p>
<h4 id="✍操作控件对象的公共属性"><a href="#✍操作控件对象的公共属性" class="headerlink" title="✍操作控件对象的公共属性"></a>✍操作控件对象的公共属性</h4><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>Children</td>
<td>取值为空矩阵，因控件对象没有自己的子对象</td>
</tr>
<tr>
<td>Parent</td>
<td>取值为某个图形窗口对象的句柄，该句柄表明了空间对象所在的图形窗口</td>
</tr>
<tr>
<td>Tag</td>
<td>取值为字符串，定义了控件的标识值，在任何程序中都可以通过这个标识值控制该控件对象</td>
</tr>
<tr>
<td>Type</td>
<td>取值为uicontrol,，表明图形对象的类型</td>
</tr>
<tr>
<td>TooltipString</td>
<td>提示信息显示，当鼠标指针位于此控件对象相关的重要数据和信息</td>
</tr>
<tr>
<td>UserData</td>
<td>取值为空矩阵，用于保存与该控件相关的重要数据和信息</td>
</tr>
<tr>
<td>Position</td>
<td>控件对象的尺寸和位置</td>
</tr>
<tr>
<td>Visible</td>
<td>取值为 on 或 off ，表示是否可见</td>
</tr>
</tbody></table>
<h4 id="✍控制对象-的基本控制属性"><a href="#✍控制对象-的基本控制属性" class="headerlink" title="✍控制对象  的基本控制属性"></a>✍控制对象  的基本控制属性</h4><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>BackgroundColor</td>
<td>取值为颜色的预定义字符或RGB数值，默认值为浅灰色</td>
</tr>
<tr>
<td>Enable</td>
<td>取值为 on (默认值)、inactive 、off</td>
</tr>
<tr>
<td>Extend</td>
<td>取值为四元素矢量[0,0,width,height],记录控件对象标题字符的位置和尺寸</td>
</tr>
<tr>
<td>ForegroundColor</td>
<td>取值为颜色的预定义字符或RGB数值。该属性定义控件对象标题字符的颜色，默认值为黑色</td>
</tr>
<tr>
<td>Max 和 Min</td>
<td>取值都为数值，默认值分别为1和10</td>
</tr>
<tr>
<td>String</td>
<td>取值为字符串矩阵或块数组，定义控件对象标题或选择内容</td>
</tr>
<tr>
<td>Style</td>
<td>取值可以是 pushbuttin(默认值)、radiobutton、checkbox、edit、text、slider、frame、popupmenu或listbox</td>
</tr>
<tr>
<td>Units</td>
<td>取值可以是pixels(默认值)、normalized(相对单位)、inches(英寸)、centimeters(厘米)或pound(磅)</td>
</tr>
<tr>
<td>Value</td>
<td>取值可以使矢量，也可以是数值，其含义及解释是依赖于控件对象的类型</td>
</tr>
</tbody></table>
<h4 id="✍控件对象-的修饰控制属性"><a href="#✍控件对象-的修饰控制属性" class="headerlink" title="✍控件对象  的修饰控制属性"></a>✍控件对象  的修饰控制属性</h4><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>FootAngle</td>
<td>取值为normal(正体，默认值)、italic(斜体)、obliqe</td>
</tr>
<tr>
<td>FontName</td>
<td>取值为控件标题等字体的字库名</td>
</tr>
<tr>
<td>FonSize</td>
<td>取值为数值</td>
</tr>
<tr>
<td>FontUnits</td>
<td>取值为points(默认值)、normalized、inches、centimeters或pixels</td>
</tr>
<tr>
<td>FontWeight</td>
<td>取值为normal(默认值)、light、demi或bold，定义字符串的粗细</td>
</tr>
<tr>
<td>HorizontalAligment</td>
<td>取值为left、center(默认值)或right，定义控件对象标题等对齐方式</td>
</tr>
</tbody></table>
<h4 id="✍控件对象的辅助属性"><a href="#✍控件对象的辅助属性" class="headerlink" title="✍控件对象的辅助属性"></a>✍控件对象的辅助属性</h4><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>ListTop</td>
<td>取值为数量值，在列表框中显示最顶层字符串的索引</td>
</tr>
<tr>
<td>SliderStep</td>
<td>取值为两元素矢量[minstep,maxstep]，用于slider控制对象</td>
</tr>
<tr>
<td>Selected</td>
<td>取值为on或off (默认值)</td>
</tr>
<tr>
<td>SletionHoghlight</td>
<td>取值为取值为on或off (默认值)</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>09_MATLAB界面设计</category>
      </categories>
      <tags>
        <tag>MATLAB学习</tag>
      </tags>
  </entry>
  <entry>
    <title>01_PID控制器概述</title>
    <url>/2022/04/26/MATLAB%E5%AD%A6%E4%B9%A0/08_Simulink%E5%9C%A8PID%E6%8E%A7%E5%88%B6%E5%99%A8%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/01_PID%E6%8E%A7%E5%88%B6%E5%99%A8%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h1 id="PID控制器概述"><a href="#PID控制器概述" class="headerlink" title="PID控制器概述"></a>PID控制器概述</h1><blockquote>
<p><a href="https://blog.csdn.net/HeroIsUseless/article/details/108634876">比例积分微分控制，简称PID控制，是最早发展起来的控制策略之一，由于其算法简单、鲁棒性好和可靠性高，被广泛应用于工业过程控制，至今仍有90%左右的控制回路具有PID结构。简单的说，根据给定值和实际输出值构成控制偏差，将偏差按比例、积分和微分通过线性组合构成控制量，对被控对象进行调整。常规PID控制器作为一种线性控制器。</a></p>
<p>在工业过程控制中，按被控对象的实时数据采集的信息与给定值比较产生的误差的比例、积分和微分进行控制的控制系统，简称PID控制系统。PID控制具有原理简单，鲁棒性强和实用面广等优点，是一种技术成熟、应用最为广泛的控制系统</p>
</blockquote>
<h2 id="1、控制系统"><a href="#1、控制系统" class="headerlink" title="1、控制系统"></a>1、控制系统</h2><h2 id="包括-控制器、执行器、传感器、变送器、输入、输出接口"><a href="#包括-控制器、执行器、传感器、变送器、输入、输出接口" class="headerlink" title="包括  控制器、执行器、传感器、变送器、输入、输出接口"></a>包括  <code>控制器、执行器、传感器、变送器、输入、输出接口</code></h2><p>控制器的输出经过执行机构加到被控制对象上，控制系统的输出经传感器、变送器，再通过输入接口返回到控制器，组成闭环控制系统。不同的控制对象，其传感器、执行器不同，如：电加热系统控制使用温度传感器、锅炉水位控制使用液位传感器。一个简单的PID控制系统的组成  如图</p>
<p><img src="https://s2.loli.net/2022/04/27/dhnKsa1p6mqN9Tc.jpg" alt="6c783578d7a68cb696ea3410aad324d"></p>
<p><img src="https://s2.loli.net/2022/05/02/4c6xsVgrqwpYPXv.png" alt="img"></p>
<p><img src="https://s2.loli.net/2022/04/29/t4RF5odKCSV7NxB.png" alt="image-20220427142551822"></p>
<p>系统控制质量取决于被控制对象的动态特性。控制器目的是通过调整控制参，改善系统的动态和静态指标，实现最佳控制效果</p>
<p><img src="https://s2.loli.net/2022/05/02/ftr1KDy92xOw6WM.png" alt="img"></p>
<h2 id="2、PID控制器的表示方法及仿真"><a href="#2、PID控制器的表示方法及仿真" class="headerlink" title="2、PID控制器的表示方法及仿真"></a>2、PID控制器的表示方法及仿真</h2><p><img src="https://s2.loli.net/2022/04/29/t5NzPneGD1TaEoC.png" alt="image-20220427142429205"></p>
<blockquote>
<p><a href="https://blog.csdn.net/jinpeng_cumt/article/details/60867690">PID控制器各个矫正环节的作用如下：</a></p>
<p>（1）比例环节：成比例的反映控制系统的偏差e(t)，偏差一旦产生，控制器立即产生作用，以减少偏差。</p>
<p>（2）积分环节：主要用于消除静差，提高系统的误差度，积分作用的强度取决于积分时间常数Ti，Ti越大，积分作用就越弱，反之则强。</p>
<p>（3）微分环节：反映偏差信号的变化趋势，并能在偏差信号变得太大之前，在系统中引入一个有效的早期修正信号，从而加快系统的动作速度，较小调节时间</p>
<p>比例主要用于偏差的“粗调”，保证控制系统的“稳”；积分主要用于偏差的“细调”，保证控制系统的“准”；微分主要用于偏差的“细调”，保证控制系统的“快”。</p>
</blockquote>
<blockquote>
<p><a href="https://blog.csdn.net/jinpeng_cumt/article/details/60867690">PID控制器各个矫正环节的作用如下：</a></p>
<ul>
<li><p>比例环节：即时成比例地反应控制系统的偏差信号e(t)，偏差一旦产生，控制器立即产生控制作用以减小误差。当偏差e&#x3D;0时，控制作用也为0。因此，比例控制是基于偏差进行调节的，即有差调节。</p>
</li>
<li><p>积分环节：能对误差进行记忆，主要用于消除静差，提高系统的无差度，积分作用的强弱取决于积分时间常数Ti，Ti越大，积分作用越弱，反之则越强。</p>
</li>
<li><p>微分环节：能反映偏差信号的变化趋势(变化速率)，并能在偏差信号值变得太大之前，在系统中引入一个有效的早期修正信号，从而加快系统的动作速度，减小调节时间。</p>
</li>
</ul>
<p>从时间的角度讲，比例作用是针对系统当前误差进行控制，积分作用则针对系统误差的历史，而微分作用则反映了系统误差的变化趋势，这三者的组合是“过去、现在、未来”的完美结合  。</p>
</blockquote>
<blockquote>
<p>剖析：</p>
<p>当被放入较重的物体时，PID控制器可以消除未来的误差，会立刻顶回去，而PI控制器必定会有被压下去的过程，慢慢回去。</p>
<ul>
<li>加大kp可以产生更刚性和更快的响应</li>
<li>加大ki可以减少震荡 </li>
<li>加大kd可以</li>
</ul>
</blockquote>
<blockquote>
<p><a href="https://fubaisen.github.io/2022/05/02/MATLAB%E5%AD%A6%E4%B9%A0/%E8%A1%A5%E5%85%85%E6%96%87%E4%BB%B6/18_PID%E7%9F%AB%E6%AD%A3%E7%8E%AF%E8%8A%82%E8%AF%A6%E8%A7%A3">举例：</a></p>
<p><a href="https://fubaisen.github.io/2022/05/02/MATLAB%E5%AD%A6%E4%B9%A0/%E8%A1%A5%E5%85%85%E6%96%87%E4%BB%B6/19_PID%E5%87%A0%E4%B8%AA%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98">传递函数、如何理解PID控制中的容量滞后和纯滞后？两者有什么区别？、模糊控制规则</a></p>
</blockquote>
<h3 id="（1）PID控制器表示方法"><a href="#（1）PID控制器表示方法" class="headerlink" title="（1）PID控制器表示方法"></a>（1）PID控制器表示方法</h3><p><img src="https://s2.loli.net/2022/04/27/ModkibGqmRDKjS2.jpg" alt="fba63799c5aed66e4f65aca3ddc7b1d"></p>
<p>对式 （8-1）PID的时域表达式进行拉普拉斯变换得：</p>
<p><img src="https://s2.loli.net/2022/04/27/ZPkmf1MrFWBOLtG.jpg" alt="f7fb77f9d0528c773f784b84fc9f9c4"></p>
<ul>
<li>u(t)     为控制器的输出信号；</li>
<li>e(t)     为控制器的偏差信号（它等于给定值与测量值之差）</li>
<li>T i       为控制积分时间</li>
<li>T d      为控制器微分时间</li>
<li>K p      为控制器比例系数</li>
<li>K i       为控制器积分时间系数</li>
<li>K d       为控制器的微分时间系数</li>
</ul>
<h3 id="（2）PID-控制器仿真表示"><a href="#（2）PID-控制器仿真表示" class="headerlink" title="（2）PID 控制器仿真表示"></a>（2）PID 控制器仿真表示</h3><p>PID控制器仿真框图如图所示</p>
<p><img src="https://s2.loli.net/2022/04/29/tyTvFKjcihaCYwL.jpg" alt="6737034b7585204f89547b55aa45f86"></p>
<h2 id="3、PID控制器的作用"><a href="#3、PID控制器的作用" class="headerlink" title="3、PID控制器的作用"></a>3、PID控制器的作用</h2><h3 id="（1）不同比例系数控制仿真"><a href="#（1）不同比例系数控制仿真" class="headerlink" title="（1）不同比例系数控制仿真"></a>（1）不同比例系数控制仿真</h3><p>增大比例系数 K p 一般将加快系统的响应，并有利于减小稳态误差，但是过大的比例系数会使系统由比较大的超调量，并产生振荡，是稳定性变坏。例如，设被控制对像传递函数为<img src="https://s2.loli.net/2022/04/29/JfDEpxbQ59hUTZ2.jpg" alt="957d6bf6ec68200e294cc456c01ad4b" style="zoom: 33%;" /></p>
<p>输入月结信号，选取 K p &#x3D; 1.3 、2.3 、3.3 ，控制系统仿真框图及阶跃响应曲线，如图所示</p>
<p><img src="https://s2.loli.net/2022/04/29/zVTomD8engjU7hR.jpg" alt="37e6e6517fd54b27db4de384fa72a55"></p>
<p>结论：系统的超调量会随着K p 的增大而增大，K p 偏大时，系统震荡系数增多，幅度增大，且调节时间加长</p>
<h3 id="（2）不同积分系数控制仿真"><a href="#（2）不同积分系数控制仿真" class="headerlink" title="（2）不同积分系数控制仿真"></a>（2）不同积分系数控制仿真</h3><p>增大积分系数 K i 有利于减小超调量和稳态误差，但是系统稳态误差消除时间变长。例如，设被控制对象传递函数为</p>
<img src="https://s2.loli.net/2022/04/29/gJcrtIz34K26fhU.jpg" alt="c15fa67ca51683c30d2d2aa26bdf385" style="zoom:33%;" />

<p>输入月结信号，选取 T i &#x3D; 1、5、15  ,控制系IT噢NG仿真框图及越阶响应曲线如图所示</p>
<p><img src="https://s2.loli.net/2022/04/29/BNbSepRmFKrzCli.png" alt="image-20220426194014044"></p>
<p>结论：系统的超调量会随着T i 的增大而减小，系统响应速度随着 T i的增大会略微变慢</p>
<h3 id="（3）不同积分系统控制仿真"><a href="#（3）不同积分系统控制仿真" class="headerlink" title="（3）不同积分系统控制仿真"></a>（3）不同积分系统控制仿真</h3><p>增大积分系数K D 有利于加快系统的响应速度，使系统超调量减小，稳定性加强，但系统对扰动的抑制能力减弱。对于式（8-4）表示的被控制对象，输入阶跃信号没选取 T d &#x3D; 1、5、10 ,控制系统仿真框图及阶跃响应曲线如图所示</p>
<p><img src="https://s2.loli.net/2022/04/29/tL5kRI1ZPMBKce7.jpg" alt="12c2c064956aa8cc1f6dee3d4b47a82"></p>
]]></content>
      <categories>
        <category>08_Simulink在PID控制器中的应用</category>
      </categories>
      <tags>
        <tag>MATLAB学习</tag>
      </tags>
  </entry>
  <entry>
    <title>01_MATLAB句柄式图形对象</title>
    <url>/2022/05/03/MATLAB%E5%AD%A6%E4%B9%A0/09_MATLAB%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1/01_MATLAB%E5%8F%A5%E6%9F%84%E5%BC%8F%E5%9B%BE%E5%BD%A2%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>MATLABGUI为<strong>图形用户界面</strong>（GraphicalUserInterface，简称GUI，又称图形用户接口）是指采用图形方法显示的计算机操作用户界面，是MATLAB用户可视化交互式的东西，运用GUI生成的操作界面用户能够不用阅读繁冗的代码而进行操作。</p>
<h1 id="一、句柄式图形对象"><a href="#一、句柄式图形对象" class="headerlink" title="一、句柄式图形对象"></a>一、句柄式图形对象</h1><p>在MATlAB中，每一个对象都有一个数字来标识。此标识称为句柄。每当创建一个对象时，MATLAB就为其创建一个唯一的句柄</p>
<h2 id="1、句柄式图形的对象结构"><a href="#1、句柄式图形的对象结构" class="headerlink" title="1、句柄式图形的对象结构"></a>1、句柄式图形的对象结构</h2><p>图形对象从根对象root 开始构成层次关系，每一个窗口对象 figure可以有4种对象，即菜单对象 unimenu、控制对象 uicontol 、坐标对象 axes 和axes 和右键快捷菜单对象 uicontextmenu 。使用这些对象和句柄即可完成图形窗口操作。句柄式图形对象结构如图所示<img src="https://s2.loli.net/2022/05/03/vYPL4jMEWeSXq6U.jpg" alt="4ad8f18c48a612d17aa889ec82d1cd9"></p>
<h2 id="2、句柄设置方法"><a href="#2、句柄设置方法" class="headerlink" title="2、句柄设置方法"></a>2、句柄设置方法</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">handle = uicontrol(Parent,<span class="string">&#x27;PropertyName&#x27;</span>,ProperotyValue,...)</span><br><span class="line">handle = uicontrol  <span class="comment">% 默认的 Style 属性值，在当前图形窗口（figure）中穿件下压按钮对象</span></span><br><span class="line">uicontrol(uich)     <span class="comment">% 将焦点移动由 unich 所示知识对象上</span></span><br></pre></td></tr></table></figure>

<p>其中：uicontrol 可以再用户界面窗体上创建各种组价an（如按钮、静态文本框、弹出式菜单等），并指定这些组件的回调函数。parent 为当前推行窗口，它可以是图形窗口的句柄，也可以是面板（uipanel）的句柄，还可以是按钮组（uibuttongroug）的句柄。PrepertyName 为属性名，PropertyValue 用于设置属性值，它可以为下列值之一：</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>checkbox</td>
<td>创建复选框，用来单选或多选</td>
</tr>
<tr>
<td>exit</td>
<td>创建编辑框，用于编辑文本数据</td>
</tr>
<tr>
<td>frame</td>
<td>创建框架对象。架构在图形窗口中是一个矩形的封闭区域，使用框架可以使得用户界面清晰、易懂。框架对象没有性赢得回调函数</td>
</tr>
<tr>
<td>listbox</td>
<td>创建列表框，用来显示一系列条目，允许用户选择一个或多个条目。Value 属性值包含所选条目的索引值</td>
</tr>
<tr>
<td>Pop-up menus</td>
<td>创建弹出式菜单</td>
</tr>
<tr>
<td>Push buttons</td>
<td>创建下压按钮</td>
</tr>
<tr>
<td>Radio buttons</td>
<td>创建单选按钮</td>
</tr>
<tr>
<td>Sliders</td>
<td>创建滑动条</td>
</tr>
<tr>
<td>Static text labels</td>
<td>创建静态文本标签</td>
</tr>
<tr>
<td>Toggel buttons</td>
<td>创建双位按钮</td>
</tr>
</tbody></table>
<p>在命令窗口中输入 set （uicontrol ）可查看 uicontrol 的属性</p>
<h1 id="二、创建图形句柄"><a href="#二、创建图形句柄" class="headerlink" title="二、创建图形句柄"></a>二、创建图形句柄</h1><h2 id="1、常用函数"><a href="#1、常用函数" class="headerlink" title="1、常用函数"></a>1、常用函数</h2><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>figure</td>
<td>创建一个新的图形对象</td>
</tr>
<tr>
<td>uimenu</td>
<td>生成图形创口的菜单中层次菜单与下一级子菜单</td>
</tr>
<tr>
<td>gcf</td>
<td>获得当前窗口的句柄</td>
</tr>
<tr>
<td>gca</td>
<td>获得当前坐标轴的句柄</td>
</tr>
<tr>
<td>gco</td>
<td>获得包括正在执行调用的对象的句柄</td>
</tr>
<tr>
<td>gcho</td>
<td>获得包括正在执行调用的对象的句柄</td>
</tr>
<tr>
<td>gcbf</td>
<td>获得包括正在执行调用的对象的图形句柄</td>
</tr>
<tr>
<td>delete</td>
<td>删除句柄所对应的图形对象</td>
</tr>
<tr>
<td>findbj</td>
<td>查找具有某种属性的图形对象</td>
</tr>
</tbody></table>
<h2 id="2、通用函数-get-和-set"><a href="#2、通用函数-get-和-set" class="headerlink" title="2、通用函数 get 和 set"></a>2、通用函数 get 和 set</h2><p>所有对象都有属性定义它们的特征，属性可包括对象的位置、颜色、类型、父对象、子对象及其他内容。为了获得和改变句柄图形对象的属性需要使用了两个通用函数 get 和 set </p>
<h4 id="（1）get-函数返回某个对象属性的当前值"><a href="#（1）get-函数返回某个对象属性的当前值" class="headerlink" title="（1）get 函数返回某个对象属性的当前值"></a>（1）get 函数返回某个对象属性的当前值</h4><p>用法为 get  （对象句柄，’对象句柄’）、属性名可以为多个，但必须是该对象具有的属性。语法格式如下：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">p = get(handle,<span class="string">&#x27;Position&#x27;</span>)   <span class="comment">% 返回句柄handle图形窗口的位置向量</span></span><br><span class="line">c = get(handle,<span class="string">&#x27;color&#x27;</span>)      <span class="comment">% 返回句柄handle对象的颜色</span></span><br></pre></td></tr></table></figure>

<h4 id="（2）set-函数改变句柄图形对象属性"><a href="#（2）set-函数改变句柄图形对象属性" class="headerlink" title="（2）set 函数改变句柄图形对象属性"></a>（2）set 函数改变句柄图形对象属性</h4><p>用法为<code>set (对象属性，&#39;属性名1&#39;,&#39;属性值1&#39;，&#39;属性名2&#39;,&#39;属性值2&#39;,…)</code>  语法格式如下</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">set(handle,<span class="string">&#x27;Position&#x27;</span>,p_vect)  		<span class="comment">% 将句柄handle 的图形位置设为向量p_vect 所指定的值</span></span><br><span class="line">set(handle,<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)  			<span class="comment">% 将句柄handle 对象颜色设置成红色</span></span><br><span class="line">set(handle,<span class="string">&#x27;olor&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;Linewith&#x27;</span>)   <span class="comment">% 将句柄 handle 对象的颜色设置成红色、现况为2个色素</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>例：创建弹出式菜单，根据选择不同项目执行不同操作，使用回调函数  bs_01.m 画出不同颜色球体</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; hpop=uicontrol(<span class="string">&#x27;Style&#x27;</span>,<span class="string">&#x27;listbox&#x27;</span>,<span class="string">&#x27;String&#x27;</span>,<span class="string">&#x27;画红色球体|画黄色球体|画粉色球体|画渐变色球体&#x27;</span>,<span class="string">&#x27;Position&#x27;</span>,[<span class="number">10</span> <span class="number">320</span> <span class="number">120</span> <span class="number">50</span>],<span class="string">&#x27;Callback&#x27;</span>,<span class="string">&#x27;bs_01&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>创建回调函数 bs_01.m</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">val = get(hpop,<span class="string">&#x27;value&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> val == <span class="number">1</span></span><br><span class="line">    sphere(<span class="number">30</span>);colormap([<span class="number">1</span> <span class="number">0</span> <span class="number">0</span>])</span><br><span class="line"><span class="keyword">elseif</span> val == <span class="number">2</span></span><br><span class="line">    sphere(<span class="number">30</span>);colormap([<span class="number">1</span> <span class="number">1</span> <span class="number">0</span>])</span><br><span class="line"><span class="keyword">elseif</span> val == <span class="number">3</span></span><br><span class="line">    sphere(<span class="number">30</span>);colormap(pink)</span><br><span class="line"><span class="keyword">elseif</span> val == <span class="number">4</span></span><br><span class="line">    sphere(<span class="number">30</span>);colormap(spring)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>弹出式菜单及运行结果如图所示</p>
<p><img src="https://s2.loli.net/2022/05/03/QBRnAw7quWzpLPg.png" alt="image-20220503153708041"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>09_MATLAB界面设计</category>
      </categories>
      <tags>
        <tag>MATLAB学习</tag>
      </tags>
  </entry>
  <entry>
    <title>函数句柄</title>
    <url>/2022/03/31/MATLAB%E5%AD%A6%E4%B9%A0/%E8%A1%A5%E5%85%85%E6%96%87%E4%BB%B6/01_%E5%87%BD%E6%95%B0%E5%8F%A5%E6%9F%84/</url>
    <content><![CDATA[<h1 id="函数句柄"><a href="#函数句柄" class="headerlink" title="函数句柄"></a>函数句柄</h1><p>函数句柄其实是<code>MATLAB</code>中一种间接调用函数的方法。在<code>MATLAB</code>平台中，对函数的调用主要有直接调用和间接调用两种方式。直接调用顾名思义就是直接使用某个函数，但是使用该函数只能与其M文件同名的主函数或在M文件中的其他函数所调用，同时在一个文件中也只能存在一个主函数。函数句柄的出现就是为了解决这个问题。函数句柄所用到的操作符为<code>@</code>，使用起来是十分的方便。 函数句柄的创建和调用：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; F_Handle = @<span class="built_in">cos</span>           <span class="comment">% cos 以弧度为单位的参数的余弦</span></span><br><span class="line">F_Handle =</span><br><span class="line">  包含以下值的 function_handle:</span><br><span class="line">    @<span class="built_in">cos</span></span><br><span class="line">&gt;&gt; X = <span class="number">0</span>:<span class="number">0.25</span>*<span class="built_in">pi</span>:<span class="number">2</span>*<span class="built_in">pi</span>;</span><br><span class="line">&gt;&gt; F_Handle(X)</span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line">  <span class="number">1</span> 至 <span class="number">6</span> 列</span><br><span class="line">    <span class="number">1.0000</span>    <span class="number">0.7071</span>    <span class="number">0.0000</span>   <span class="number">-0.7071</span>   <span class="number">-1.0000</span>   <span class="number">-0.7071</span></span><br><span class="line">  <span class="number">7</span> 至 <span class="number">9</span> 列</span><br><span class="line">   <span class="number">-0.0000</span>    <span class="number">0.7071</span>    <span class="number">1.0000</span></span><br></pre></td></tr></table></figure>

<p>函数句柄的基本操作：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; F_Handlea = @<span class="built_in">exp</span>;</span><br><span class="line">&gt;&gt; F_Handleb = @<span class="built_in">log</span>;</span><br><span class="line">&gt;&gt; functions(F_Handlea)</span><br><span class="line"><span class="built_in">ans</span> = </span><br><span class="line">  包含以下字段的 struct:</span><br><span class="line">    <span class="function"><span class="keyword">function</span>: &#x27;<span class="title">exp</span>&#x27;</span></span><br><span class="line">        <span class="built_in">type</span>: <span class="string">&#x27;simple&#x27;</span></span><br><span class="line">        file: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&gt;&gt; isa(F_Handlea,<span class="string">&#x27;function_handle&#x27;</span>)  <span class="comment">%判断是否属于函数句柄</span></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line">  logical</span><br><span class="line">   <span class="number">1</span></span><br><span class="line">&gt;&gt; <span class="built_in">isequal</span>(F_Handlea,F_Handleb)      <span class="comment">%判断两函数句柄是否相等</span></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line">  logical</span><br><span class="line">   <span class="number">0</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>function用来定义函数，一般一个函数放在一个.m文件里</p>
<p>举个简单的例子建立一个myfunction.m，然后在文件中写。<br><code>function y=myfunction(a,b)</code></p>
<ul>
<li><p>其中a,b是输入函数的参数</p>
</li>
<li><p>y是函数返回的值</p>
</li>
</ul>
<p>当需要返回多个值时，可以将 <code>y</code> 看作一个数组，或者直接将函数的开头写成如<code>function [x,y]=myfunction(x,y)</code>的形式。比如最简单的<code>y=a+b</code></p>
<p>总结一下，将下面的代码<br><code>function y=myfunction(a,b)</code><br><code>y=a+b;</code><br>保存为一个m文件myfunction.m，调用方式如下<br><code>num=myfunction(3,4);</code><br>这样就可以由函数中的y&#x3D;a+b得到<code>num的值是3+4=7。</code></p>
<p>在matlab中调用函数只能在.m文件中定义，并且文件名和函数名形同</p>
<p>例子：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">[q,w,e]=test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">% matlab用function定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[a,b,c]</span>=<span class="title">test</span><span class="params">(d,e,f)</span></span></span><br><span class="line"></span><br><span class="line">a=d+e;</span><br><span class="line"></span><br><span class="line">b=e+f;</span><br><span class="line"></span><br><span class="line">c=f+d;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/03/31/TPzucidJLB8YASf.png" alt="image-20220331002141717"></p>
</blockquote>
]]></content>
      <categories>
        <category>00_MATLAB补充文件</category>
      </categories>
      <tags>
        <tag>MATLAB学习</tag>
      </tags>
  </entry>
  <entry>
    <title>asv文件</title>
    <url>/2022/03/31/MATLAB%E5%AD%A6%E4%B9%A0/%E8%A1%A5%E5%85%85%E6%96%87%E4%BB%B6/03_asv%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p><code>.asv</code>文件</p>
<p><img src="https://s2.loli.net/2022/03/28/jbA69d1GJ837Fop.png" alt="image-20220328153616660"></p>
<p>是<code>.m</code>文件自动保存的时候产生的临时文件，程序非正常退出的时候恢复用的，用记事本打开看一下就明白了，如果matlab正常关闭的话，删掉没影响</p>
]]></content>
      <categories>
        <category>00_MATLAB补充文件</category>
      </categories>
      <tags>
        <tag>MATLAB学习</tag>
      </tags>
  </entry>
  <entry>
    <title>dat文件</title>
    <url>/2022/03/31/MATLAB%E5%AD%A6%E4%B9%A0/%E8%A1%A5%E5%85%85%E6%96%87%E4%BB%B6/02_dat%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<ul>
<li><p><code>.dat</code> 是数据文件。比如你可以把它理解为某一个矩阵，然后该矩阵用.dat格式储存。</p>
</li>
<li><p>MATLAB 可以阅读.dat格式的数据文件，前提是你需要知道该.dat中每一个数据是多少位的数据。</p>
</li>
<li><p>比如我有一个.dat格式的文件，其中每一个数据是16位储存的</p>
<p>（那么每一个数据的理论最小值是0，最大值是2^16&#x3D;65536）</p>
<p>阅读该数据文件的MATLAB语句如下：</p>
</li>
</ul>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">[fid, message] = fopen (<span class="string">&#x27;文件名.dat&#x27;</span>,<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">[Array, count] = fread (fid,<span class="string">&#x27;*uint16&#x27;</span>);</span><br><span class="line"><span class="comment">%数据格式是unsigned integer (即非负整数)，且是16位，所以我用uint16读取，假如你的数据是非负8位整数，则你需要用uint8 读取</span></span><br><span class="line">status = fclose (fid);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>00_MATLAB补充文件</category>
      </categories>
      <tags>
        <tag>MATLAB学习</tag>
      </tags>
  </entry>
  <entry>
    <title>数组类型</title>
    <url>/2022/03/31/MATLAB%E5%AD%A6%E4%B9%A0/%E8%A1%A5%E5%85%85%E6%96%87%E4%BB%B6/06_%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h1><p>在<code>MATLAB</code>中进行运算的所有数据类型，<strong>都是按照数组及矩阵的形式进行存储和运算</strong>的，但是两者在性质上有着些许区别</p>
<ul>
<li>数组强调元素对元素的运算</li>
<li>矩阵则采用线性代数的运算法则</li>
</ul>
<p>数组的属性及数组之间的逻辑关系，是在编写程序中两个非常重要的方面</p>
<p>在<code>MATLAB</code>中，数组的定义是广泛的，<strong>数组中的数据类型元素</strong>可以是<strong>任意的数据类型</strong>，如<code>数值、字符串、指针</code>等。</p>
<p>本次主要介绍数据的构建方式</p>
<blockquote>
<ul>
<li>直接赋值</li>
<li>函数构造</li>
<li>空数组</li>
</ul>
</blockquote>
<h2 id="一、直接赋值"><a href="#一、直接赋值" class="headerlink" title="一、直接赋值"></a>一、直接赋值</h2><p>可以通过直接对变量进行赋值来构建数组。如下：<br><code>code:</code></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; Array = [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">Array =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span>     <span class="number">4</span>     <span class="number">5</span>     <span class="number">6</span></span><br></pre></td></tr></table></figure>

<p>在<code>MATLAB</code>中还可以通过冒号<code>:</code>来代替一系列的数值，可以用来定义数组。语法格式如下：<br><code>code:</code></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; Array = <span class="built_in">i</span>:<span class="built_in">j</span>:k</span><br></pre></td></tr></table></figure>

<p>表示的含义为：创建从<code>i</code>开始，步长为<code>j</code>，到<code>k</code>结束的数字序列。其中<code>j</code>可以省略，如果省略代表创建从<code>i</code>开始，步长为<code>1</code>，到<code>k</code>结束的数字序列。如下：<br><code>code:</code></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; Array = <span class="number">1</span>:<span class="number">6</span></span><br><span class="line"></span><br><span class="line">Array =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span>     <span class="number">4</span>     <span class="number">5</span>     <span class="number">6</span></span><br></pre></td></tr></table></figure>

<h2 id="二、函数构造"><a href="#二、函数构造" class="headerlink" title="二、函数构造"></a>二、函数构造</h2><p>还可以通过一些预定义的函数来构建线性序列和逻辑序列。如下：<br><code>code:</code></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; Array = <span class="built_in">linspace</span>(<span class="number">1</span>,<span class="number">10</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">Array =</span><br><span class="line"></span><br><span class="line">    <span class="number">1.0000</span>    <span class="number">3.2500</span>    <span class="number">5.5000</span>    <span class="number">7.7500</span>   <span class="number">10.000</span></span><br></pre></td></tr></table></figure>

<p>在区间<code>[1,10]</code>上等距离的创建了<code>5</code>个数字序列。</p>
<h2 id="三、空数组"><a href="#三、空数组" class="headerlink" title="三、空数组"></a>三、空数组</h2><p>空数组，是十分有用的，表达的意思是数组的元素个数为<code>0</code>个，主要用于逻辑运算、数组声明、数组的清空等。如：<br><code>code:</code></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; Array_Empty = []</span><br><span class="line"></span><br><span class="line">Array_Empty =</span><br><span class="line"></span><br><span class="line">     []</span><br></pre></td></tr></table></figure>

<h1 id="单元数组"><a href="#单元数组" class="headerlink" title="单元数组"></a>单元数组</h1><p>介绍了<strong>数组类型</strong>，本次简述一种广义的“数组”——单元数组（<code>cell</code>）</p>
<p><strong>单元数组是一种无所不包的广义矩阵</strong>，其中<code>可以包括各种数据类型的数组</code></p>
<ul>
<li>如数值数组</li>
<li>字符串数组</li>
<li>结构体数组</li>
<li>另外一个单元数组</li>
</ul>
<p>组成单元数组的每一个元素称为一个单元。和一般的数值数组一样，单元数组可以是一维、二维或者多维的。使用单元数组的目的主要在于，<code>把不同的数据类型放在一起管理</code>。</p>
<p>本文将主要从单元数组的创建、寻访和操作三个方面做出简单介绍。</p>
<blockquote>
<ul>
<li>创建</li>
<li>寻访</li>
<li>操作</li>
</ul>
</blockquote>
<h2 id="一、创建"><a href="#一、创建" class="headerlink" title="一、创建"></a>一、创建</h2><p>单元数组的创建主要有两种方法，使用赋值语句创建单元数组和利用<code>cell</code>函数创建数组。下面分别作出介绍。</p>
<h4 id="1-使用赋值语句创建"><a href="#1-使用赋值语句创建" class="headerlink" title="1.使用赋值语句创建"></a>1.使用赋值语句创建</h4><p>与一般数组有所不同的是，单元数组使用<code>&#123;&#125;</code>来创建，使用<code>,</code>或者空格来分割每一个单元，使用<code>;</code>来分行。<br>例如：<br><code>code:</code></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; C = &#123;<span class="string">&#x27;x&#x27;</span>,[<span class="number">1</span>;<span class="number">3</span>;<span class="number">6</span>];<span class="number">10</span>,<span class="built_in">pi</span>&#125;;</span><br><span class="line">&gt;&gt; whos C</span><br><span class="line">  Name      Size            Bytes  Class    Attributes</span><br><span class="line"></span><br><span class="line">  C         <span class="number">2</span>x2               <span class="number">490</span>  cell               </span><br></pre></td></tr></table></figure>

<h4 id="2-使用cell函数创建"><a href="#2-使用cell函数创建" class="headerlink" title="2.使用cell函数创建"></a>2.使用cell函数创建</h4><p>cell函数的调用格式如下：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">cellName = cell(m,n)</span><br></pre></td></tr></table></figure>

<p>表示的意思维创建一个<code>m</code>×<code>n</code>的单元数组，其每一个单元均为空矩阵。<br>例如：<br><code>code:</code></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; a = cell(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">&gt;&gt; b = cell(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">&gt;&gt; whos</span><br><span class="line">  Name      Size            Bytes  Class    Attributes</span><br><span class="line"></span><br><span class="line">  a         <span class="number">2</span>x2                <span class="number">32</span>  cell               </span><br><span class="line">  b         <span class="number">1</span>x1                 <span class="number">8</span>  cell               </span><br><span class="line"></span><br><span class="line">&gt;&gt; a</span><br><span class="line"></span><br><span class="line">a =</span><br><span class="line"></span><br><span class="line">  <span class="number">2</span>×<span class="number">2</span> cell 数组</span><br><span class="line"></span><br><span class="line">    []    []</span><br><span class="line">    []    []</span><br><span class="line"></span><br><span class="line">&gt;&gt; b</span><br><span class="line"></span><br><span class="line">b =</span><br><span class="line"></span><br><span class="line">  cell</span><br><span class="line"></span><br><span class="line">    &#123;[]&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>最后再说明一点，同一般的数值数组一样，单元数组内存空间也是动态分配的。因而，使用<code>cell</code>函数创建空单元数组的主要目的为了让单元数组预先分配连续的存储空间，以节约内存，提高执行效率</p>
</blockquote>
<h2 id="二、寻访"><a href="#二、寻访" class="headerlink" title="二、寻访"></a>二、寻访</h2><p>在单元数组中，一定要区分单元和单元中的内容，不然很容易出错</p>
<p><code>MATLAB</code>中对此设计了两种操作对象：单元外标识符和单元内编制</p>
<p>对于单元数组<code>C</code></p>
<ul>
<li><code>C(m,n)</code>指的是单元数组中第m行第n列的单元</li>
<li><code>C&#123;m,n&#125;</code>指的是单元数组中第<code>m</code>行第<code>n</code>列的单元中的内容</li>
</ul>
<p>例如：</p>
<p><code>code:</code></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; C = &#123;<span class="number">3</span>,[<span class="number">4</span> <span class="number">7</span>;<span class="number">6</span> <span class="number">6</span>;<span class="number">80</span> <span class="number">9</span>],<span class="string">&#x27;String&#x27;</span>;<span class="built_in">sin</span>(<span class="built_in">pi</span>/<span class="number">8</span>),<span class="number">3</span>&gt;<span class="number">10</span>,<span class="string">&#x27;code&#x27;</span>&#125;;</span><br><span class="line">&gt;&gt; unitVal_1 = C(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">unitVal_1 =</span><br><span class="line"></span><br><span class="line">  cell</span><br><span class="line"></span><br><span class="line">    [<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">&gt;&gt; class(unitVal_1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">cell</span><br><span class="line"></span><br><span class="line">&gt;&gt; unitVal_2 = C&#123;<span class="number">2</span>,<span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">unitVal_2 =</span><br><span class="line"></span><br><span class="line">  logical</span><br><span class="line"></span><br><span class="line">   <span class="number">0</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; class(unitVal_2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">logical</span><br></pre></td></tr></table></figure>

<h2 id="三、操作"><a href="#三、操作" class="headerlink" title="三、操作"></a>三、操作</h2><p>单元数组的操作包括</p>
<ul>
<li><strong>合并</strong></li>
<li><strong>删除指定单元</strong></li>
<li><strong>改变形状</strong></li>
</ul>
<h4 id="1、合并"><a href="#1、合并" class="headerlink" title="1、合并"></a>1、合并</h4><p>单元数组的合并<br><code>code:</code></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; a&#123;<span class="number">1</span>,<span class="number">1</span>&#125; = <span class="string">&#x27;cellclass&#x27;</span>;</span><br><span class="line">a&#123;<span class="number">1</span>,<span class="number">2</span>&#125; = [<span class="number">1</span> <span class="number">2</span> <span class="number">2</span>];</span><br><span class="line">a&#123;<span class="number">2</span>,<span class="number">1</span>&#125; = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">a&#123;<span class="number">2</span>,<span class="number">2</span>&#125; = [<span class="number">9</span> <span class="number">4</span> <span class="number">5</span>];</span><br><span class="line">a</span><br><span class="line">b = &#123;<span class="string">&#x27;jan&#x27;</span>&#125;</span><br><span class="line">C = &#123;a,b&#125;</span><br><span class="line"></span><br><span class="line">a =</span><br><span class="line"></span><br><span class="line">  <span class="number">2</span>×<span class="number">2</span> cell 数组</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;cellclass&#x27;</span>    [<span class="number">1</span>×<span class="number">3</span> double]</span><br><span class="line">    <span class="string">&#x27;abc&#x27;</span>          [<span class="number">1</span>×<span class="number">3</span> double]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">b =</span><br><span class="line"></span><br><span class="line">  cell</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;jan&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C =</span><br><span class="line"></span><br><span class="line">  <span class="number">1</span>×<span class="number">2</span> cell 数组</span><br><span class="line"></span><br><span class="line">    &#123;<span class="number">2</span>×<span class="number">2</span> cell&#125;    &#123;<span class="number">1</span>×<span class="number">1</span> cell&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2、删除"><a href="#2、删除" class="headerlink" title="2、删除"></a>2、删除</h4><p>如果要删除的话，那就用空矩阵把其给替换掉。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">C&#123;m,n&#125; = []</span><br></pre></td></tr></table></figure>

<p>例如：<br><code>code:</code></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; C = &#123;<span class="built_in">ones</span>(<span class="number">3</span>),<span class="string">&#x27;Hello CN&#x27;</span>,<span class="built_in">zeros</span>(<span class="number">5</span>),[<span class="number">20</span>,<span class="number">4</span>,<span class="number">6</span>]&#125;</span><br><span class="line"></span><br><span class="line">C =</span><br><span class="line"></span><br><span class="line">  <span class="number">1</span>×<span class="number">4</span> cell 数组</span><br><span class="line"></span><br><span class="line">    [<span class="number">3</span>×<span class="number">3</span> double]    <span class="string">&#x27;Hello CN&#x27;</span>    [<span class="number">5</span>×<span class="number">5</span> double]    [<span class="number">1</span>×<span class="number">3</span> double]</span><br><span class="line"></span><br><span class="line">&gt;&gt; C&#123;<span class="number">1</span>,<span class="number">4</span>&#125; = []</span><br><span class="line"></span><br><span class="line">C =</span><br><span class="line"></span><br><span class="line">  <span class="number">1</span>×<span class="number">4</span> cell 数组</span><br><span class="line"></span><br><span class="line">    [<span class="number">3</span>×<span class="number">3</span> double]    <span class="string">&#x27;Hello CN&#x27;</span>    [<span class="number">5</span>×<span class="number">5</span> double]    []</span><br></pre></td></tr></table></figure>

<h4 id="3、变形"><a href="#3、变形" class="headerlink" title="3、变形"></a>3、变形</h4><p>改变形状的要使用reshape函数，调用格式为：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">trimC = <span class="built_in">reshape</span>(C,M,N)</span><br></pre></td></tr></table></figure>

<p>意思是把单元数组<code>C</code>变成一个具有<code>M</code>行和<code>N</code>列的新的单元数组。<br>例如：<br><code>code:</code></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; C = &#123;<span class="built_in">ones</span>(<span class="number">3</span>),<span class="string">&#x27;Hello CN&#x27;</span>,<span class="built_in">zeros</span>(<span class="number">5</span>),[<span class="number">20</span>,<span class="number">4</span>,<span class="number">6</span>]&#125;</span><br><span class="line"></span><br><span class="line">C =</span><br><span class="line"></span><br><span class="line">  <span class="number">1</span>×<span class="number">4</span> cell 数组</span><br><span class="line"></span><br><span class="line">    [<span class="number">3</span>×<span class="number">3</span> double]    <span class="string">&#x27;Hello CN&#x27;</span>    [<span class="number">5</span>×<span class="number">5</span> double]    [<span class="number">1</span>×<span class="number">3</span> double]</span><br><span class="line"></span><br><span class="line">&gt;&gt; newC = <span class="built_in">reshape</span>(C,<span class="number">4</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">newC =</span><br><span class="line"></span><br><span class="line">  <span class="number">4</span>×<span class="number">1</span> cell 数组</span><br><span class="line"></span><br><span class="line">    [<span class="number">3</span>×<span class="number">3</span> double]</span><br><span class="line">    <span class="string">&#x27;Hello CN&#x27;</span></span><br><span class="line">    [<span class="number">5</span>×<span class="number">5</span> double]</span><br><span class="line">    [<span class="number">1</span>×<span class="number">3</span> double]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>00_MATLAB补充文件</category>
      </categories>
      <tags>
        <tag>MATLAB学习</tag>
      </tags>
  </entry>
  <entry>
    <title>注释</title>
    <url>/2022/03/31/MATLAB%E5%AD%A6%E4%B9%A0/%E8%A1%A5%E5%85%85%E6%96%87%E4%BB%B6/04_%E6%B3%A8%E9%87%8A/</url>
    <content><![CDATA[<h1 id="MATLAB中三种注释方法"><a href="#MATLAB中三种注释方法" class="headerlink" title="MATLAB中三种注释方法"></a>MATLAB中三种注释方法</h1><ol>
<li></li>
</ol>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">若干语句</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">%&#125;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li></li>
</ol>
<ul>
<li><p>多行注释: </p>
<p>选中要注释的若干语句, 编辑器菜单Text-&gt;Comment, 或者快捷键Ctrl+R</p>
</li>
<li><p>取消注释: </p>
<p>选中要取消注释的语句, 编辑器菜单Text-&gt;Uncomment, 或者快捷键Ctrl+T</p>
</li>
</ul>
<ol start="3">
<li></li>
</ol>
<ul>
<li>这个方法实际上是通过逻辑判断语句不执行相关的语句</li>
</ul>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> LOGICAL(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">若干语句</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>00_MATLAB补充文件</category>
      </categories>
      <tags>
        <tag>MATLAB学习</tag>
      </tags>
  </entry>
  <entry>
    <title>结构体类型</title>
    <url>/2022/03/31/MATLAB%E5%AD%A6%E4%B9%A0/%E8%A1%A5%E5%85%85%E6%96%87%E4%BB%B6/07_%E7%BB%93%E6%9E%84%E4%BD%93%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="结构体类型"><a href="#结构体类型" class="headerlink" title="结构体类型"></a>结构体类型</h1><p><code>MATLAB</code>中的结构体与<code>C语言</code>当中的结构体十分类似，主要用来存储不同类型的数据。因而结构体相当于一个数据容器，把几个不相同的数据类型的数据封装在一个结构体对象中。<br>假如有一个叫Sam的学生，6年级，学习语文、数学和英语，在一次考试中各科分别为97,98,99。可以使用结构体来表示：<br>通过赋值来创建结构体：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; Student.Name = <span class="string">&#x27;Sam&#x27;</span>;</span><br><span class="line">&gt;&gt; Student.Grade = <span class="number">6</span>;</span><br><span class="line">&gt;&gt; Student.Subject =&#123;<span class="string">&#x27;Chinese&#x27;</span>,<span class="string">&#x27;Math&#x27;</span>,<span class="string">&#x27;English&#x27;</span>&#125;;</span><br><span class="line">&gt;&gt; Student.Result = &#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>&#125;;</span><br><span class="line">&gt;&gt; Student</span><br><span class="line"></span><br><span class="line">Student = </span><br><span class="line">  包含以下字段的 struct:</span><br><span class="line">       Name: <span class="string">&#x27;Sam&#x27;</span></span><br><span class="line">      Grade: <span class="number">6</span></span><br><span class="line">    Subject: &#123;<span class="string">&#x27;Chinese&#x27;</span>  <span class="string">&#x27;Math&#x27;</span>  <span class="string">&#x27;English&#x27;</span>&#125;</span><br><span class="line">     Result: &#123;[<span class="number">97</span>]  [<span class="number">98</span>]  [<span class="number">99</span>]&#125;</span><br><span class="line">     </span><br><span class="line">&gt;&gt; whos</span><br><span class="line">  Name         Size            Bytes  Class     Attributes</span><br><span class="line">  Student      <span class="number">1</span>x1              <span class="number">1450</span>  struct              </span><br></pre></td></tr></table></figure>

<p>还可以利用<code>struct</code>来创造结构体。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; Schedule(<span class="number">2</span>) =struct(<span class="string">&#x27;Day&#x27;</span>,<span class="string">&#x27;Thursday&#x27;</span>,<span class="string">&#x27;Time&#x27;</span>,<span class="string">&#x27;15:00&#x27;</span>,<span class="string">&#x27;Number&#x27;</span>,<span class="string">&#x27;108&#x27;</span> );</span><br><span class="line">&gt;&gt; Schedule</span><br><span class="line"></span><br><span class="line">Schedule = </span><br><span class="line">  包含以下字段的 <span class="number">1</span>×<span class="number">2</span> struct 数组:</span><br><span class="line">    Day</span><br><span class="line">    Time</span><br><span class="line">    Number</span><br><span class="line">    </span><br><span class="line">&gt;&gt; Schedule(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> = </span><br><span class="line">  包含以下字段的 struct:</span><br><span class="line">       Day: []</span><br><span class="line">      Time: []</span><br><span class="line">    Number: []</span><br><span class="line">    </span><br><span class="line">&gt;&gt; Schedule(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> = </span><br><span class="line">  包含以下字段的 struct:</span><br><span class="line">       Day: <span class="string">&#x27;Thursday&#x27;</span></span><br><span class="line">      Time: <span class="string">&#x27;15:00&#x27;</span></span><br><span class="line">    Number: <span class="string">&#x27;108&#x27;</span></span><br></pre></td></tr></table></figure>

<p>上述例子创建两个结构体，因为只对第二个结构体赋值了，因而第一个结构体所有字段为空数组。</p>
]]></content>
      <categories>
        <category>00_MATLAB补充文件</category>
      </categories>
      <tags>
        <tag>MATLAB学习</tag>
      </tags>
  </entry>
  <entry>
    <title>字符和字符串</title>
    <url>/2022/03/31/MATLAB%E5%AD%A6%E4%B9%A0/%E8%A1%A5%E5%85%85%E6%96%87%E4%BB%B6/05_%E5%AD%97%E7%AC%A6%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h1 id="字符和字符串"><a href="#字符和字符串" class="headerlink" title="字符和字符串"></a>字符和字符串</h1><blockquote>
<p>在<code>MATLAB</code>中，对文本的处理一般是把其当作特征字符串或简单地当作字符串来处理的。字符串一般是用来构造命令，主要用于求值或者被执行。</p>
</blockquote>
<p>如果我们在<code>MATLAB</code>中遇到对字符或者字符串的操作，那么<code>MATLAB</code>又是怎么处理的呢？</p>
<p>没错还是通过矩阵来处理，只不过处理的是字符内部的<code>ASCII</code>码，显示出来是字符而已，但是在内部储存的是基于<code>ASCII</code>数字的矩阵形式（包括向量）。既然字符串是通过矩阵来储存的，那我们就可以通过下标索引来进行访问。我们看如下例子</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/09nZQwxgZ5v5OibyKhoXfEy74cNaSLM0WDY7Ep9sFyLMvOoB3thSWXic35tdibvp7nAvQumZjWpV7hg2FmT5sVROA/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; String = <span class="string">&#x27;Welcome to use MATLAB&#x27;</span>;</span><br><span class="line">&gt;&gt; <span class="built_in">size</span>(String)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line">     <span class="number">1</span>    <span class="number">21</span></span><br><span class="line">     </span><br><span class="line">&gt;&gt; whos</span><br><span class="line"></span><br><span class="line">  Name        Size            Bytes  Class     Attributes</span><br><span class="line">  String      <span class="number">1</span>x21               <span class="number">42</span>  char                </span><br><span class="line">  <span class="built_in">ans</span>         <span class="number">1</span>x2                <span class="number">16</span>  double              </span><br></pre></td></tr></table></figure>

<p>在<code>MATLAB</code>中，对字符串的储存是美国字符8个字节，如同<code>MATLAB</code>中的其他变量。下面检验<code>MATLAB</code>中的字符串是基于<code>ASCII</code>码表示的。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; String = <span class="string">&#x27;Welcome to use MATLAB&#x27;</span>;</span><br><span class="line">&gt;&gt; U = <span class="built_in">abs</span>(String)</span><br><span class="line"></span><br><span class="line"><span class="comment">% 观其输出验得`MATLAB`中的字符串是基于`ASCII`码表示的</span></span><br><span class="line">U =</span><br><span class="line">  <span class="number">1</span> 至 <span class="number">10</span> 列</span><br><span class="line">    <span class="number">87</span>   <span class="number">101</span>   <span class="number">108</span>    <span class="number">99</span>   <span class="number">111</span>   <span class="number">109</span>   <span class="number">101</span>    <span class="number">32</span>   <span class="number">116</span>   <span class="number">111</span></span><br><span class="line">    </span><br><span class="line">  <span class="number">11</span> 至 <span class="number">20</span> 列</span><br><span class="line">    <span class="number">32</span>   <span class="number">117</span>   <span class="number">115</span>   <span class="number">101</span>    <span class="number">32</span>    <span class="number">77</span>    <span class="number">65</span>    <span class="number">84</span>    <span class="number">76</span>    <span class="number">65</span></span><br><span class="line">    </span><br><span class="line">  <span class="number">21</span> 列</span><br><span class="line">    <span class="number">66</span></span><br><span class="line">    </span><br><span class="line">&gt;&gt; U = U+<span class="number">0</span></span><br><span class="line"></span><br><span class="line">U =</span><br><span class="line">  <span class="number">1</span> 至 <span class="number">10</span> 列</span><br><span class="line">    <span class="number">87</span>   <span class="number">101</span>   <span class="number">108</span>    <span class="number">99</span>   <span class="number">111</span>   <span class="number">109</span>   <span class="number">101</span>    <span class="number">32</span>   <span class="number">116</span>   <span class="number">111</span></span><br><span class="line">    </span><br><span class="line">  <span class="number">11</span> 至 <span class="number">20</span> 列</span><br><span class="line">    <span class="number">32</span>   <span class="number">117</span>   <span class="number">115</span>   <span class="number">101</span>    <span class="number">32</span>    <span class="number">77</span>    <span class="number">65</span>    <span class="number">84</span>    <span class="number">76</span>    <span class="number">65</span></span><br><span class="line">    </span><br><span class="line">  <span class="number">21</span> 列</span><br><span class="line">    <span class="number">66</span></span><br></pre></td></tr></table></figure>

<p>字符串的索引示例：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; String = <span class="string">&#x27;Welcome to use MATLAB&#x27;</span>;</span><br><span class="line">&gt;&gt; U = String(<span class="number">7</span>:<span class="number">9</span>)        <span class="comment">% A(m,n):提取第m行，第n列元素</span></span><br><span class="line">U =</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;e t&#x27;</span></span><br><span class="line">    </span><br><span class="line">&gt;&gt; A = String(<span class="number">10</span>:<span class="number">-1</span>:<span class="number">7</span>)      <span class="comment">%-1表示步长，从后往前取</span></span><br><span class="line">A =</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;ot e&#x27;</span></span><br></pre></td></tr></table></figure>

<p>字符串的拼接与单引号问题：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; String = <span class="string">&#x27;It&#x27;&#x27;s not the manual&#x27;</span>;</span><br><span class="line">&gt;&gt; String</span><br><span class="line">String =</span><br><span class="line">It&#x27;s not the manu</span><br><span class="line"></span><br><span class="line">&gt;&gt; U = <span class="string">&#x27;Hello,&#x27;</span>;</span><br><span class="line">&gt;&gt; V = <span class="string">&#x27;World!&#x27;</span>;</span><br><span class="line">&gt;&gt; W = [U V];</span><br><span class="line">&gt;&gt; W</span><br><span class="line">W =</span><br><span class="line">Hello,World!</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>00_MATLAB补充文件</category>
      </categories>
      <tags>
        <tag>MATLAB学习</tag>
      </tags>
  </entry>
  <entry>
    <title>rand函数</title>
    <url>/2022/03/31/MATLAB%E5%AD%A6%E4%B9%A0/%E8%A1%A5%E5%85%85%E6%96%87%E4%BB%B6/08_rand%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p><strong>Matlab     <code>rand（）函数</code>⽤法          rand函数产⽣由在(0, 1)之间均匀分布的随机数组成的数组</strong></p>
<ul>
<li>matlab中的rand（a,b）语句，为了清楚这个语句的⽤法，这⾥我们随便输⼊a，b，例如1和4</li>
</ul>
<p><img src="https://s2.loli.net/2022/03/28/DgF6HlUWLpPEBxa.png" alt="image-20220328152937865"></p>
<ul>
<li>回车之后结果为如图所⽰4个数字，可以看到这4个数均为1以内，且为1⾏4列</li>
</ul>
<p><img src="https://s2.loli.net/2022/03/28/uvLnHOPAiG7UW4m.png" alt="image-20220328152516360"></p>
<ul>
<li>同样地，若我们输⼊rand(2,4)，则会得到⼀个2⾏4列的在1以内的随机矩阵</li>
</ul>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">  <span class="number">0.2769</span>  <span class="number">0.0971</span>  <span class="number">0.6948</span>  <span class="number">0.9502</span>  <span class="number">0.0462</span>  <span class="number">0.8235</span>  <span class="number">0.3171</span>  <span class="number">0.0344</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/03/28/Dnol65pPZyzv79Q.png" alt="image-20220328152540389"></p>
<ul>
<li>若想要得到⼀个3⾏3列的随机⽅阵，我们输⼊rand(3)即可</li>
</ul>
<p><img src="https://s2.loli.net/2022/03/28/nmRvOghs1LX7iwS.png" alt="image-20220328152553077"></p>
<p>rand(size(A)) 返回⼀个和A有相同尺⼨的随机矩阵。例如我们随便输⼊⼀个A矩阵，然后输⼊这个语句之后即可得到相同⾏列的⼀个随机矩阵</p>
<p><img src="https://s2.loli.net/2022/03/28/4rEWGBi8O5vgACI.png" alt="image-20220328152604905"></p>
]]></content>
      <categories>
        <category>00_MATLAB补充文件</category>
      </categories>
      <tags>
        <tag>MATLAB学习</tag>
      </tags>
  </entry>
  <entry>
    <title>加深理解单元矩阵和结构矩阵</title>
    <url>/2022/04/01/MATLAB%E5%AD%A6%E4%B9%A0/%E8%A1%A5%E5%85%85%E6%96%87%E4%BB%B6/11_%E5%8A%A0%E6%B7%B1%E7%90%86%E8%A7%A3%E5%8D%95%E5%85%83%E7%9F%A9%E9%98%B5%E5%92%8C%E7%BB%93%E6%9E%84%E7%9F%A9%E9%98%B5/</url>
    <content><![CDATA[<h1 id="2-MATLAB结构矩阵"><a href="#2-MATLAB结构矩阵" class="headerlink" title="2 MATLAB结构矩阵"></a>2 MATLAB结构矩阵</h1><p>  Matlab结构矩阵用法类似C语言结构体，也可定义一组变量，类型可以随意，并且不用声明变量类型。其基本形式为：</p>
<p>          结构矩阵元素.成员名 &#x3D; 表达式</p>
<p>例如：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a(<span class="number">1</span>).x1 = <span class="number">10</span>;</span><br><span class="line">a(<span class="number">1</span>).x2 = <span class="string">&#x27;liu&#x27;</span>;</span><br><span class="line">a(<span class="number">1</span>).x3 = [ <span class="number">10</span> , <span class="number">1</span> ; <span class="number">3</span> , <span class="number">5</span> ];</span><br><span class="line"></span><br><span class="line">a(<span class="number">2</span>).x1 = <span class="number">9</span>;</span><br><span class="line">a(<span class="number">2</span>).x2 = <span class="string">&#x27;wang&#x27;</span>;</span><br><span class="line">a(<span class="number">2</span>).x3 = [ <span class="number">9</span> , <span class="number">1</span> ; <span class="number">3</span> , <span class="number">5</span> ];</span><br><span class="line"></span><br><span class="line">a(<span class="number">3</span>).x1 = <span class="number">8</span>;</span><br><span class="line">a(<span class="number">3</span>).x2 = <span class="string">&#x27;zhang&#x27;</span>;</span><br><span class="line">a(<span class="number">3</span>).x3 = [ <span class="number">8</span> , <span class="number">1</span> ; <span class="number">3</span> , <span class="number">5</span> ];</span><br></pre></td></tr></table></figure>

<p>即可得到</p>
<p><img src="https://img-blog.csdnimg.cn/20200212105347372.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lYaWFvY2h1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>在使用时，也只需输入类似结构体的代码即可调用结构矩阵内的数据，例如：</p>
<p><img src="https://img-blog.csdnimg.cn/20200212105536517.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lYaWFvY2h1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h1 id="3-MATLAB单元矩阵"><a href="#3-MATLAB单元矩阵" class="headerlink" title="3 MATLAB单元矩阵"></a>3 MATLAB单元矩阵</h1><p>  单元矩阵定义方法与普通矩阵类似，但注意，定义是用大括号 “{ }”<br>  例如：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">b = &#123; <span class="number">10</span> , <span class="string">&#x27;liu&#x27;</span>  , [ <span class="number">10</span> , <span class="number">1</span> ; <span class="number">3</span> , <span class="number">5</span> ] ;</span><br><span class="line">       <span class="number">9</span> , <span class="string">&#x27;wang&#x27;</span> , [  <span class="number">9</span> , <span class="number">1</span> ; <span class="number">3</span> , <span class="number">5</span> ] ;</span><br><span class="line">       <span class="number">8</span> , <span class="string">&#x27;yang&#x27;</span> , [  <span class="number">8</span> , <span class="number">1</span> ; <span class="number">3</span> , <span class="number">5</span> ] &#125;;</span><br></pre></td></tr></table></figure>


<p>使用时类似普通矩阵，直接调用单元内容即可：</p>
<p><img src="https://img-blog.csdnimg.cn/20200212113954574.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lYaWFvY2h1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>00_MATLAB补充文件</category>
      </categories>
      <tags>
        <tag>MATLAB学习</tag>
      </tags>
  </entry>
  <entry>
    <title>sum函数</title>
    <url>/2022/04/01/MATLAB%E5%AD%A6%E4%B9%A0/%E8%A1%A5%E5%85%85%E6%96%87%E4%BB%B6/09_sum%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="sum函数"><a href="#sum函数" class="headerlink" title="sum函数"></a>sum函数</h1><h2 id="1、操作对象是向量："><a href="#1、操作对象是向量：" class="headerlink" title="1、操作对象是向量："></a><strong>1、操作对象是向量：</strong></h2><p>生成一个向量以及使用sum函数对向量进行操作.sum函数对向量的所有元素进行求和。</p>
<blockquote>
<p>调用格式：</p>
<ul>
<li>b&#x3D;sum(a);<ul>
<li>a表示行向量</li>
<li>b表示行向量求和的值</li>
</ul>
</li>
</ul>
</blockquote>
<p>例子如下：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">b=sum(a);</span><br><span class="line"></span><br><span class="line">b=</span><br><span class="line"></span><br><span class="line">   <span class="number">15</span></span><br></pre></td></tr></table></figure>

<p><img src="https://exp-picture.cdn.bcebos.com/e4b5e2f5ee0d3ace0f2944de87e265e7350fbb57.jpg?x-bce-process=image/resize,m_lfit,w_500,limit_1/format,f_jpg/quality,q_80" alt="MATLAB 函数sum的用法简介"></p>
<h2 id="2、操作对象是一个矩阵："><a href="#2、操作对象是一个矩阵：" class="headerlink" title="2、操作对象是一个矩阵："></a>2、<strong>操作对象是一个矩阵：</strong></h2><p>生成一个矩阵以及使用sum函数对矩阵进行操作。在MATLAB默认的情况下，sum函数对矩阵的每一列的元素进行求和，结果是一个横向量。</p>
<blockquote>
<p>调用格式：</p>
<ul>
<li>b&#x3D;sum(a);<ul>
<li>a表示矩阵</li>
<li>b表示矩阵每列求和得到的行向量</li>
</ul>
</li>
</ul>
</blockquote>
<p>例子如下：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">   <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line"></span><br><span class="line">   <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>];</span><br><span class="line"></span><br><span class="line">sum(a)=</span><br><span class="line"></span><br><span class="line">	[<span class="number">12</span> <span class="number">15</span> <span class="number">18</span>];</span><br></pre></td></tr></table></figure>



<p><img src="https://exp-picture.cdn.bcebos.com/ba97ffd06de89a6135db772645e8b004551bad57.jpg?x-bce-process=image/resize,m_lfit,w_500,limit_1/format,f_jpg/quality,q_80" alt="MATLAB 函数sum的用法简介"></p>
<h2 id="3、设定sum函数的参数列表的参数dim"><a href="#3、设定sum函数的参数列表的参数dim" class="headerlink" title="3、设定sum函数的参数列表的参数dim"></a>3、设定sum函数的参数列表的参数dim</h2><p>对矩阵每一列或者每一列求和或每一行求和，得到<strong>行向量或者列向量</strong></p>
<blockquote>
<p><strong>调用格式</strong>：</p>
<ul>
<li><p>b&#x3D;sum(a,dim);</p>
</li>
<li><p>a表示矩阵；</p>
</li>
<li><p>dim等于1或者2，</p>
<ul>
<li><p>1表示每一列进行求和，</p>
</li>
<li><p>2表示每一行进行求和；</p>
</li>
</ul>
</li>
<li><p>b表示求得的行向量。</p>
</li>
</ul>
</blockquote>
<p><strong>例子如下</strong>：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line">   <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line">   <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>];</span><br><span class="line"></span><br><span class="line">sum(a,<span class="number">1</span>)=[<span class="number">12</span> <span class="number">15</span> <span class="number">18</span>];</span><br><span class="line"></span><br><span class="line">sum(a,<span class="number">2</span>)=[ <span class="number">6</span></span><br><span class="line"></span><br><span class="line">           <span class="number">15</span></span><br><span class="line"></span><br><span class="line">       	   <span class="number">24</span>];</span><br></pre></td></tr></table></figure>

<p><img src="https://exp-picture.cdn.bcebos.com/e86ba4b842406afe02eac7701eee41c1b6279f57.jpg?x-bce-process=image/resize,m_lfit,w_500,limit_1/format,f_jpg/quality,q_80" alt="MATLAB 函数sum的用法简介"></p>
<p><img src="https://exp-picture.cdn.bcebos.com/91091efc77f7980e90de75c4d4db3620b83a9157.jpg?x-bce-process=image/resize,m_lfit,w_500,limit_1/format,f_jpg/quality,q_80" alt="MATLAB 函数sum的用法简介"></p>
<h1 id="使用sum函数关于数据类型的方法案例"><a href="#使用sum函数关于数据类型的方法案例" class="headerlink" title="使用sum函数关于数据类型的方法案例"></a>使用sum函数关于数据类型的方法案例</h1><h2 id="1、如果没有规定输出与输入变量的数据类型"><a href="#1、如果没有规定输出与输入变量的数据类型" class="headerlink" title="1、如果没有规定输出与输入变量的数据类型"></a>1、如果没有规定输出与输入变量的数据类型</h2><ul>
<li>生成矩阵为 默认double型矩阵   ，    用sum函数进行操作</li>
<li>结果表示  矩阵a与结果向量b的数据类型都是double型</li>
</ul>
<p><img src="https://exp-picture.cdn.bcebos.com/589f5b078801387008bf0c392d08a50f95fc8357.jpg?x-bce-process=image/resize,m_lfit,w_500,limit_1/format,f_jpg/quality,q_80" alt="MATLAB 函数sum的用法简介"></p>
<h2 id="2、如果输入变量的数据类型是single类型，则输出的数据类型为single类型"><a href="#2、如果输入变量的数据类型是single类型，则输出的数据类型为single类型" class="headerlink" title="2、如果输入变量的数据类型是single类型，则输出的数据类型为single类型"></a>2、如果输入变量的数据类型是single类型，则输出的数据类型为single类型</h2><ul>
<li><p>生成一个Int8（整数型）矩阵  用sum函数进行操作 </p>
</li>
<li><p><strong>结果观察</strong>：输入的a矩阵为int8型，输出的矩阵b为double型</p>
</li>
</ul>
<p><img src="https://exp-picture.cdn.bcebos.com/e6ae36066b0192ddddbe80461a87031c98c0f057.jpg?x-bce-process=image/resize,m_lfit,w_500,limit_1/format,f_jpg/quality,q_80" alt="MATLAB 函数sum的用法简介"></p>
<h2 id="3、使用类型参数-native-使输入与输出的矩阵或向量的数据类型一致"><a href="#3、使用类型参数-native-使输入与输出的矩阵或向量的数据类型一致" class="headerlink" title="3、使用类型参数 native 使输入与输出的矩阵或向量的数据类型一致"></a>3、使用类型参数 <code>native</code> 使输入与输出的矩阵或向量的数据类型一致</h2><blockquote>
<p>调用格式：</p>
<ul>
<li>b&#x3D;sum(a,type); <ul>
<li>type等于<code>native</code>时，输入变量与输出变量的数据类型是相同的</li>
</ul>
</li>
</ul>
</blockquote>
<ul>
<li><p>生成一个Int8（整数型）矩阵      用sum函数进行操作</p>
</li>
<li><p><strong>结果观察</strong>：输入的a矩阵为int8型，输出的矩阵b为int8型</p>
</li>
</ul>
<p><img src="https://exp-picture.cdn.bcebos.com/bfa52adaf05e4a23858fc8a81dd818196020e257.jpg?x-bce-process=image/resize,m_lfit,w_500,limit_1/format,f_jpg/quality,q_80" alt="MATLAB 函数sum的用法简介"></p>
<h2 id="4、使用类型参数double-强制使输出变量的数据为类型double"><a href="#4、使用类型参数double-强制使输出变量的数据为类型double" class="headerlink" title="4、使用类型参数double,强制使输出变量的数据为类型double"></a>4、使用类型参数<code>double</code>,强制使输出变量的数据为类型double</h2><blockquote>
<p>调用格式：</p>
<ul>
<li>b&#x3D;sum(a,type); <ul>
<li>type等于<code>double</code>时 ，<strong>输入变量不管是不是single型，输出变量类型为double型</strong></li>
</ul>
</li>
</ul>
</blockquote>
<ul>
<li><p>生成一个Int8（整数型）矩阵以及用sum函数进行操作</p>
</li>
<li><p><strong>观察结果</strong>：输入的a矩阵为int8型，输出的矩阵b为double型。</p>
</li>
</ul>
<p><img src="https://exp-picture.cdn.bcebos.com/bab5c45872dade496af0bde326042e6816e9d557.jpg?x-bce-process=image/resize,m_lfit,w_500,limit_1/format,f_jpg/quality,q_80" alt="MATLAB 函数sum的用法简介"></p>
<h1 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h1><ol>
<li><p><strong>操作对象为矩阵</strong></p>
<p><code>C=sum(sum(a))；a为一个矩阵，结果为矩阵a所有元素的求和。</code></p>
<p>示例如下：</p>
<p><img src="https://exp-picture.cdn.bcebos.com/5917cb3da824d8e9da2d8dd3da598540112ac857.jpg?x-bce-process=image/resize,m_lfit,w_500,limit_1/format,f_jpg/quality,q_80" alt="MATLAB 函数sum的用法简介"></p>
</li>
<li><p><strong>操作对象为矩阵</strong></p>
<p><code>C=sum(diag(a)); a为一个方阵，结果为对角线元素之和，及矩阵的迹；</code> </p>
<p><img src="https://exp-picture.cdn.bcebos.com/a13bbe10bc33ec3816442f5a295f0c14c37b3c54.jpg?x-bce-process=image/resize,m_lfit,w_500,limit_1/format,f_jpg/quality,q_80" alt="MATLAB 函数sum的用法简介"></p>
</li>
<li><p><strong>操作对象为矩阵</strong></p>
<p><code>C=sum(a(:,n)); a为一个矩阵，结果为第n列的所有元素之和，即矩阵的迹；</code></p>
<p><img src="https://exp-picture.cdn.bcebos.com/efb861bd4c7c34b313be050f5841037de0373154.jpg?x-bce-process=image/resize,m_lfit,w_500,limit_1/format,f_jpg/quality,q_80" alt="MATLAB 函数sum的用法简介"></p>
</li>
<li><p><strong>操作对象为矩阵</strong></p>
<p><code>C=sum(a(n,:)); a为一个矩阵，结果为第n行的所有元素之和，即矩阵的迹；</code></p>
<p><img src="https://exp-picture.cdn.bcebos.com/2a1ecb460596b814c82f83b643d246fe464e2254.jpg?x-bce-process=image/resize,m_lfit,w_500,limit_1/format,f_jpg/quality,q_80" alt="MATLAB 函数sum的用法简介"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>00_MATLAB补充文件</category>
      </categories>
      <tags>
        <tag>MATLAB学习</tag>
      </tags>
  </entry>
  <entry>
    <title>简记括号</title>
    <url>/2022/04/01/MATLAB%E5%AD%A6%E4%B9%A0/%E8%A1%A5%E5%85%85%E6%96%87%E4%BB%B6/10_%E7%AE%80%E8%AE%B0%E6%8B%AC%E5%8F%B7/</url>
    <content><![CDATA[<p>在matlab中，常常会遇到<code>(),[]，和&#123;&#125;,</code>这个3种符号怎么区分，怎么用，这里我来总结一下，以供参考。</p>
<ul>
<li>[]</li>
</ul>
<p>首先。[]叫中括号，它用来存储<a href="https://so.csdn.net/so/search?q=%E7%9F%A9%E9%98%B5&spm=1001.2101.3001.7020">矩阵</a>和向量（vector在C++中也叫容器）<br>举个例子，a&#x3D;[1,2,3],是一个向量，这个向量有3个元素，也可以用a&#x3D;[1 2 3]<br>eg:<br><img src="https://img-blog.csdn.net/20161020153726395" alt="这里写图片描述"><br>对于a&#x3D;[1 2 3;2 3 4 ;3 4 5],就是一个3*3矩阵<br><img src="https://img-blog.csdn.net/20161020153856902" alt="这里写图片描述"></p>
<ul>
<li>{ }</li>
</ul>
<p>大括号，用于cell型的<a href="https://so.csdn.net/so/search?q=%E6%95%B0%E7%BB%84&spm=1001.2101.3001.7020">数组</a>（就是前面讲的单元数组）的分配或引用。<br>比如 a{3,3}&#x3D;‘china’就是建立了一个3<em>3的单元数组，a(3,3)就是‘china’<br>比如c&#x3D;{‘china’,’中国’，[1 2 3 4]}运行结果如下<br><img src="https://img-blog.csdn.net/20161020154818297" alt="这里写图片描述"><br>比如：A(2,1) &#x3D; {[1 2 3; 4 5 6]}，就是一个2行一列的单元数组，第二行第一列的元素就是[1 2 3;4 5 6]的2</em>1矩阵</p>
<ul>
<li>( )</li>
</ul>
<p>小括号，用于引用数组的元素。<br>如 X(3)就是X的第三个元素。 X([1 2 3])就是X的头三个元素。<br>这里用[]建立一个非cell数组。a&#x3D;[1 2 2],则a(1,2)就是访问的a数组的第一行第2列元素，为2.</p>
<p>最后看一下单元数组和普通数组的关系。<br>比如我建立了一个单元数组:<br>a&#x3D;cell(2,3)<br>a(1,2)&#x3D;’china’;%这种写法是错的<br>a{1,2}&#x3D;’china’%这种写法才对<br>因为大括号才代表单元数组赋值，小括号只能是普通数组中的元素<br>如下<br>a{1,3}&#x3D;[1 2 3;2 3 4];<br>b&#x3D;a{1,3}(1,3)%这样才能取出上面2*3矩阵中的元素<br>运行如下<br><img src="https://img-blog.csdn.net/20161020160725402" alt="这里写图片描述"><br><img src="https://img-blog.csdn.net/20161020160756688" alt="这里写图片描述"><br>大家多尝试一下，就会明白这些括号的意思。</p>
]]></content>
      <categories>
        <category>00_MATLAB补充文件</category>
      </categories>
      <tags>
        <tag>MATLAB学习</tag>
      </tags>
  </entry>
  <entry>
    <title>矩阵新解</title>
    <url>/2022/04/08/MATLAB%E5%AD%A6%E4%B9%A0/%E8%A1%A5%E5%85%85%E6%96%87%E4%BB%B6/12_%E7%9F%A9%E9%98%B5%E6%96%B0%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h1><h2 id="1-一个普通的矩阵："><a href="#1-一个普通的矩阵：" class="headerlink" title="1.一个普通的矩阵："></a>1.一个普通的矩阵：</h2><p><img src="https://img-blog.csdnimg.cn/20191217155155790.png" alt="在这里插入图片描述"></p>
<h2 id="2-单位矩阵"><a href="#2-单位矩阵" class="headerlink" title="2.单位矩阵"></a>2.单位矩阵</h2><p>单位矩阵就是右斜角全是1，其他位置是0的矩阵。一个3×3的单位矩阵：</p>
<p><img src="https://img-blog.csdnimg.cn/20191217155218113.png" alt="在这里插入图片描述"></p>
<h2 id="3-Transposition-转换"><a href="#3-Transposition-转换" class="headerlink" title="3.Transposition(转换)"></a>3.Transposition(转换)</h2><p>经常看到一个矩阵的右上角有个T的符号，就是Transposition的首字母。<img src="https://img-blog.csdnimg.cn/20191217155255855.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2E5NDMzNjgwOTM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="4-矩阵与数相乘"><a href="#4-矩阵与数相乘" class="headerlink" title="4.矩阵与数相乘"></a>4.矩阵与数相乘</h2><p>就是把这个数跟矩阵中的每个数都相乘。<img src="https://img-blog.csdnimg.cn/20191217155320501.png" alt="在这里插入图片描述"></p>
<h2 id="5-两个矩阵相乘"><a href="#5-两个矩阵相乘" class="headerlink" title="5.两个矩阵相乘"></a>5.两个矩阵相乘</h2><p>1.首先对于两个矩阵是否可以相乘是有要求的，假设要计算A矩阵乘以B矩阵，那么A矩阵的行数要等于B矩阵的列数才行。</p>
<p><img src="https://img-blog.csdnimg.cn/20191217155357714.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2E5NDMzNjgwOTM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20191217155415472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2E5NDMzNjgwOTM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>​			<img src="https://img-blog.csdnimg.cn/20191217155424697.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2E5NDMzNjgwOTM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h1 id="图形化矩阵，矩阵到底长什么样"><a href="#图形化矩阵，矩阵到底长什么样" class="headerlink" title="图形化矩阵，矩阵到底长什么样"></a>图形化矩阵，矩阵到底长什么样</h1><h2 id="1-向量的样子"><a href="#1-向量的样子" class="headerlink" title="1.向量的样子"></a>1.向量的样子</h2><p>我们知道一个向量很容易用图形的方式来表示，无论是2D向量还是3D向量，下面就是一些已经介绍过的向量。<img src="https://img-blog.csdnimg.cn/20191217155542442.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2E5NDMzNjgwOTM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="2-矩阵到底长什么样？"><a href="#2-矩阵到底长什么样？" class="headerlink" title="2.矩阵到底长什么样？"></a>2.矩阵到底长什么样？</h2><p>矩阵长什么样？其实这个问题一直也有过，只是书上都没介绍，就觉得矩阵可能是无法用图像来形容的。也没去深究。但是看了《游戏和图形学的3D数学入门教程》这书后，才豁然开朗。<br>矩阵在我看来主要用于相乘。一个物体乘以一个矩阵，可能会有这个几个变化：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.在2D或3D中的位置发生变化。</span><br><span class="line">2.在2D或3D中旋转了</span><br><span class="line">3.在3D或3D中大小拉伸了。</span><br></pre></td></tr></table></figure>

<p>也就是说，矩阵其实表示的是一个转换(Transformation)效果。怎样才可以看到这个转换(Transformation)的效果，跟它相乘。The terms transformation and multiplication will be largely synonymous(矩阵中，转换和相乘差不多是一个同义词).<br>再来看一张实物图：<img src="https://img-blog.csdnimg.cn/20191217155709985.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2E5NDMzNjgwOTM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>再来看一张3D中的一个水壶与矩阵相乘的变化图。<img src="https://img-blog.csdnimg.cn/20191217155726618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2E5NDMzNjgwOTM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="3-矩阵到底长什么样？"><a href="#3-矩阵到底长什么样？" class="headerlink" title="3.矩阵到底长什么样？"></a>3.矩阵到底长什么样？</h2><p>矩阵是无法直接用图形来描述的，它表示是一个转换的度量，只有跟它相乘才可以看的出样子来。</p>
<h1 id="矩阵的旋转"><a href="#矩阵的旋转" class="headerlink" title="矩阵的旋转"></a>矩阵的旋转</h1><h2 id="1-2D中的旋转"><a href="#1-2D中的旋转" class="headerlink" title="1.2D中的旋转"></a>1.<code>2D中的旋转</code></h2><p>如果你要计算一个向量逆时针旋转一定的度数后得到的向量，很多书都只会给一个公式。类似下面的包含sin，cos的矩阵。跟这个相乘就行了。其实看下面这张图就会很清晰。<img src="https://img-blog.csdnimg.cn/20191217155938494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2E5NDMzNjgwOTM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="2-3D中的旋转"><a href="#2-3D中的旋转" class="headerlink" title="2.3D中的旋转"></a>2.<code>3D中的旋转</code></h2><p>首先要说明的是我们这里用的是左手坐标，Z轴是朝里的。DirectX中也是左手坐标。左右手坐标旋转的相乘矩阵是不一样的！有上面的2D旋转得到的规律，我们用于3D旋转中。</p>
<h4 id="2-1绕x轴旋转"><a href="#2-1绕x轴旋转" class="headerlink" title="2.1绕x轴旋转"></a>2.1绕x轴旋转</h4><p><img src="https://img-blog.csdnimg.cn/20191217160202384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2E5NDMzNjgwOTM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>上面这个矩阵的作用就是，如果你要让一个东西在3D中绕x轴旋转一定度数，那么跟上面这个矩阵相乘就行了。就是还要懂矩阵相乘</p>
<h4 id="2-2绕Y轴旋转"><a href="#2-2绕Y轴旋转" class="headerlink" title="2.2绕Y轴旋转"></a>2.2绕Y轴旋转</h4><p><img src="https://img-blog.csdnimg.cn/20191217160311193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2E5NDMzNjgwOTM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>上面这个矩阵的作用就是，如果你要让一个东西在3D中绕y轴旋转一定度数，那么跟上面这个矩阵相乘就行了。就是还要懂矩阵相乘</p>
<h4 id="2-3绕Z轴旋转"><a href="#2-3绕Z轴旋转" class="headerlink" title="2.3绕Z轴旋转"></a>2.3绕Z轴旋转</h4><p><img src="https://img-blog.csdnimg.cn/20191217160336543.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2E5NDMzNjgwOTM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="上面这个矩阵的作用就是，如果你要让一个东西在3D中绕z轴旋转一定度数，那么跟上面这个矩阵相乘就行了。就是还要懂矩阵相乘"><a href="#上面这个矩阵的作用就是，如果你要让一个东西在3D中绕z轴旋转一定度数，那么跟上面这个矩阵相乘就行了。就是还要懂矩阵相乘" class="headerlink" title="上面这个矩阵的作用就是，如果你要让一个东西在3D中绕z轴旋转一定度数，那么跟上面这个矩阵相乘就行了。就是还要懂矩阵相乘"></a>上面这个矩阵的作用就是，如果你要让一个东西在3D中绕z轴旋转一定度数，那么跟上面这个矩阵相乘就行了。就是还要懂矩阵相乘</h2><p>版权声明：本文为CSDN博主「Brock-123」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/a943368093/article/details/103581932">https://blog.csdn.net/a943368093/article/details/103581932</a></p>
]]></content>
      <categories>
        <category>00_MATLAB补充文件</category>
      </categories>
      <tags>
        <tag>MATLAB学习</tag>
      </tags>
  </entry>
  <entry>
    <title>linspace用法</title>
    <url>/2022/03/31/MATLAB%E5%AD%A6%E4%B9%A0/%E8%A1%A5%E5%85%85%E6%96%87%E4%BB%B6/15_linspace%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h1 id="linspace-x1-x2-N-用法"><a href="#linspace-x1-x2-N-用法" class="headerlink" title="linspace(x1,x2,N)用法"></a>linspace(x1,x2,N)用法</h1><p>功能：linspace是<a href="https://so.csdn.net/so/search?q=Matlab&spm=1001.2101.3001.7020">Matlab</a>中的一个指令，用于产生x1,x2之间的N点行矢量。其中x1、x2、N分别为起始值、中止值、元素个数。若缺省N，默认点数为100。在matlab的命令窗口下输入help linspace或者doc linspace可以获得该函数的帮助信息。</p>
<h4 id="例一："><a href="#例一：" class="headerlink" title="例一："></a>例一：</h4><p>　　在matlab的命令窗口输入：</p>
<p>​    <code>X=linspace(1,100)</code></p>
<p>　　将产生从1到100步长为1的数组。类似于在命令窗口中输入：</p>
<p>　　<code>X=[1:1:100]</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;  X=linspace(1,100)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">X =</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> Columns 1 through 21</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> Columns 22 through 42</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> Columns 43 through 63</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> Columns 64 through 84</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  64   65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80   81   82   83   84</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> Columns 85 through 100</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  85   86   87   88   89   90   91   92   93   94   95   96   97   98   99  100</span><br></pre></td></tr></table></figure>





<p>在命令窗口中输入：</p>
<p>　　<code>X=linspace(5,100,20)</code></p>
<p>　　将输出：</p>
<p>　　</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X =</span><br><span class="line"></span><br><span class="line">　　5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100</span><br><span class="line"></span><br><span class="line">　　这和X=[5:5:100]的效果是一样的。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>00_MATLAB补充文件</category>
      </categories>
      <tags>
        <tag>MATLAB学习</tag>
      </tags>
  </entry>
  <entry>
    <title>矩阵运算</title>
    <url>/2022/04/08/MATLAB%E5%AD%A6%E4%B9%A0/%E8%A1%A5%E5%85%85%E6%96%87%E4%BB%B6/13_%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<p><strong>矩阵是数的排列：</strong></p>
<p> **<img src="https://img-blog.csdnimg.cn/201905231550528.png" alt="img">**矩阵（这矩阵有2行和3列)</p>
<h1 id="下面说些矩阵的基本运算"><a href="#下面说些矩阵的基本运算" class="headerlink" title="下面说些矩阵的基本运算"></a>下面说些矩阵的基本运算</h1><h2 id="加"><a href="#加" class="headerlink" title="****加******"></a><strong><em>*</em>***加*****</strong>*</h2><p>把两个矩阵相加：把对称位置的数相加：</p>
<p><img src="https://img-blog.csdnimg.cn/20190523155058278.png" alt="img"></p>
<p>两个矩阵一定要大小相同，就是说，行要一样大小，列也要一样大小。比如具有3 行 和 5 列 的矩阵可以和另一个有 3 行 和 5 列的矩阵相加。</p>
<p>但它不能和有 3 行 和 4 列 的矩阵相加（列的大小不同）</p>
<h2 id="减"><a href="#减" class="headerlink" title="****减******"></a><strong><em>*</em>***减*****</strong>*</h2><p>把两个矩阵相减：把对称位置的数相减（图里加号写错了应该是减号）：</p>
<p><img src="https://img-blog.csdnimg.cn/20190523155103393.png" alt="img"></p>
<p><strong>注意：矩阵减法的定义实际是与负矩阵</strong>**<em>*</em>***相加********<strong>： A + (-B)</strong></p>
<h2 id="乘以常数"><a href="#乘以常数" class="headerlink" title="****乘以常数******"></a><strong><em>*</em>***乘以常数*****</strong>*</h2><p>我们可以把矩阵乘以常数：</p>
<p><img src="https://img-blog.csdnimg.cn/2019052315514432.png" alt="img"></p>
<p>我们称这常数为 **<em>*</em>*标量******，故此这乘法的正式名字是 “标量乘法”.</p>
<h2 id="与另一个矩阵相乘"><a href="#与另一个矩阵相乘" class="headerlink" title="****与另一个矩阵相乘******"></a><strong><em>*</em>***与另一个矩阵相乘*****</strong>*</h2><p>把<em>*<em>*</em>*两个矩阵相乘****</em>* 有点复杂若，要把矩阵与**<em>*</em>*矩阵******相乘，我们要计算行与列的”<a href="https://www.shuxuele.com/algebra/vectors-dot-product.html">点积</a>“。</p>
<p><img src="https://img-blog.csdnimg.cn/20190523155148241.png" alt="img"></p>
<p>为什么要这么做呢？</p>
<p>比如鸡蛋一个1块钱，鸭蛋一个两块钱，求3个鸡蛋和4个鸭蛋一共多少钱？</p>
<p><img src="https://img-blog.csdnimg.cn/20190523155154787.png" alt="img"></p>
<p>这样表达很简洁，这其实就是一个1<em>2矩阵点成2</em>1矩阵。</p>
<h2 id="除法"><a href="#除法" class="headerlink" title="****除法******"></a><strong><em>*</em>***除法*****</strong>*</h2><p>那除法呢？实际上，矩阵中的除法使用逆矩阵来表示，我们这样做：</p>
<p>A&#x2F;B &#x3D; A × (1&#x2F;B) &#x3D; A × B-1</p>
<p>其中 <em>*<em>*</em>*B****</em><strong>*<em>*</em>*-1****</strong> 是 B 的 “逆矩阵”。</p>
<p>所以我们不做除法，我们**<em>*</em>*乘以逆矩阵******。</p>
<p>这是逆矩阵的定义：</p>
<p>A的 逆（矩阵）是 A-1，仅当：</p>
<p><img src="https://img-blog.csdnimg.cn/20190523155516397.png" alt="img"></p>
<p>但有些矩阵是没有逆矩阵的。</p>
<h2 id="矩阵转置"><a href="#矩阵转置" class="headerlink" title="****矩阵转置******"></a><strong><em>*</em>***矩阵转置*****</strong>*</h2><p>去”转置” 一个转置，把行和列对换。 我们在右上角放一个 “T” 来代表转置：</p>
<p><img src="https://img-blog.csdnimg.cn/20190523155159980.png" alt="img"></p>
<p>矩阵的表示方法</p>
<p>我们通常用英语**<em>*</em>*大写字母******（例如 A 或 B）来代表矩阵</p>
<p>矩阵里的每个数（”元素”）以<em>*<em>*</em>*小写字母****<strong>来代表，并带上表示 “</strong></em>*<em>*行，列**</em>***” 的 “下标数”：</p>
<p><img src="https://img-blog.csdnimg.cn/20190523155206143.png" alt="img"></p>
]]></content>
      <categories>
        <category>00_MATLAB补充文件</category>
      </categories>
      <tags>
        <tag>MATLAB学习</tag>
      </tags>
  </entry>
  <entry>
    <title>matlab视频分辨率更改</title>
    <url>/2022/04/11/MATLAB%E5%AD%A6%E4%B9%A0/%E8%A1%A5%E5%85%85%E6%96%87%E4%BB%B6/14_matlab%E8%A7%86%E9%A2%91%E5%88%86%E8%BE%A8%E7%8E%87%E6%9B%B4%E6%94%B9/</url>
    <content><![CDATA[<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">obj = VideoReader(<span class="string">&#x27;vvvv.avi&#x27;</span>);<span class="comment">%原始视频</span></span><br><span class="line">numFrames = obj.NumberOfFrames;<span class="comment">% 帧的总数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%视频压缩</span></span><br><span class="line">newPath = obj.Path;</span><br><span class="line">newName = [<span class="string">&#x27;Newsize&#x27;</span>,obj.Name];</span><br><span class="line">newfps = obj.FrameRate;</span><br><span class="line">newObj=VideoWriter([newPath,<span class="string">&#x27;\&#x27;</span>,newName]);  <span class="comment">%创建一个avi视频文件对象，开始时其为空</span></span><br><span class="line">newObj.FrameRate=newfps;</span><br><span class="line">open(newObj);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hwait=waitbar(<span class="number">0</span>,<span class="string">&#x27;正在转换视频分辨率...&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:numFrames</span><br><span class="line">    frame = read(obj,<span class="built_in">i</span>);</span><br><span class="line">    <span class="comment">% 请在这个地方修改分辨率</span></span><br><span class="line">    newFrame = imresize(frame,[<span class="number">240</span> <span class="number">320</span>]); </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">mod</span>(<span class="built_in">i</span>,numFrames/<span class="number">100</span>) == <span class="number">0</span></span><br><span class="line">        waitbar(<span class="built_in">i</span>/numFrames,hwait);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="comment">%写视频</span></span><br><span class="line">    writeVideo(newObj,newFrame);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">close(newObj);</span><br><span class="line">close(hwait);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>00_MATLAB补充文件</category>
      </categories>
      <tags>
        <tag>MATLAB学习</tag>
      </tags>
  </entry>
  <entry>
    <title>EraseMode代替方法</title>
    <url>/2022/03/31/MATLAB%E5%AD%A6%E4%B9%A0/%E8%A1%A5%E5%85%85%E6%96%87%E4%BB%B6/16_EraseMode%E4%BB%A3%E6%9B%BF%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><h4 id="程序动画"><a href="#程序动画" class="headerlink" title="程序动画"></a>程序动画</h4><p>在MATLAB中，可以采用重绘图形对象的方法来创建程序动画。改变对象的方法可以触发MATLAB对该对象进行重绘。</p>
<pre><code>    创建程序动画的典型步骤是：

    1、绘制一个图形对象；

    2、通过在一个程序循环中改变该对象的x，y和z坐标值来实现该对象的移动，从而形成动画。

    在创建MATLAB的程序动画时，图形擦除也是非常重要的。

    图形动态绘画中三种重要的擦除模式：（通过没置“EraseMode”属性来完成）

    1、None：在移动图形对象时，MATLAB不进行擦除；

    2、Background：在图形对象移走以后，MATLAB在原来的位置用背景色进行重绘。在这种模式下，MATLAB将原来的对象完全擦除，包括该对象下面的所有图形，如栅格线等；

    3、Xor：与Background模式相比，这种模式只擦除对象本身。大多数的MATLAB程序动画都采用这种擦除模式。
</code></pre>
<h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><h6 id="使用EraseMode来向figure中不断添加图像内容（incremental-drawing）已经是过时的方法了。具体到你这个例子，你有三个替代方案："><a href="#使用EraseMode来向figure中不断添加图像内容（incremental-drawing）已经是过时的方法了。具体到你这个例子，你有三个替代方案：" class="headerlink" title="使用EraseMode来向figure中不断添加图像内容（incremental drawing）已经是过时的方法了。具体到你这个例子，你有三个替代方案："></a>使用EraseMode来向figure中不断添加图像内容（incremental drawing）已经是过时的方法了。具体到你这个例子，你有三个替代方案：</h6><ul>
<li>1.在循环中用set不是仅改变 h 中的那一个点的位置，而是每次都向 h 中多添加一个点。</li>
<li>2.在axes上画一个image对象，每次循环设置image中某一点像素的值</li>
<li>3.如提示，使用r2014b中新加的animatedline。原理基本同方法1.</li>
</ul>
<p>方法1的缺点是在h中点数很多的情况下，越到后面绘制速度会越慢。如果你只是希望得到一个动画过程，那么我推荐使用方法2.</p>
<h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><h6 id="目前新版本的Matlab已经不支持EraseMode属性了，坐标图的动画显示实现要依赖animatedline对象，配合drawnow函数使用。"><a href="#目前新版本的Matlab已经不支持EraseMode属性了，坐标图的动画显示实现要依赖animatedline对象，配合drawnow函数使用。" class="headerlink" title="目前新版本的Matlab已经不支持EraseMode属性了，坐标图的动画显示实现要依赖animatedline对象，配合drawnow函数使用。"></a>目前新版本的Matlab已经不支持EraseMode属性了，坐标图的动画显示实现要依赖animatedline对象，配合drawnow函数使用。</h6><p> animatedline：创建动画行，使用的语法格式及说明如下：</p>
<pre><code>    h = animatedline：创建一个没有数据的动画行，并将其添加到当前轴。在循环中添加点以创建线条动画。

    h = animatedline(x, y)：创建由初始数据点x和y定义的动画线。

    h = animatedline(x, y, z)：创建由初始数据点x、y和z定义的动画线。

    h = animatedline(___, Name, Value)：使用一个或多个Name, Value对参数指定动画行属性。例如，&#39;Color&#39;, &#39;r&#39;将线条颜色设置为红色。需要在输入成对的参数组合之后使用此选项。

    h = animatedline(ax, ___)：在轴指定的轴ax上创建动画线，而不是在当前轴gca中。如果不指定轴对象，则animatedline使用当前轴。

    如果有另一个函数想从当前图形中获得数据，用animateline的getpoints方法：[xdata, ydata] = getpoints(h);
</code></pre>
<p>animatedline动画线属性<br>        animatedline动画可以指定可选的逗号分隔的Name,Value参数对。 Name是参数名称，Value是相应的值。Name必须出现在单引号（’ ‘）中。你可以按照任何顺序指定多个名称和值对参数Name1,Value1, …, NameN, ValueN。</p>
<p><img src="C:\Users\lichaikui\AppData\Roaming\Typora\typora-user-images\image-20220412124856423.png" alt="image-20220412124856423"></p>
<p><img src="C:\Users\lichaikui\AppData\Roaming\Typora\typora-user-images\image-20220412124916611.png" alt="image-20220412124916611"></p>
<p>颜色属性常用取值</p>
<p><img src="C:\Users\lichaikui\AppData\Roaming\Typora\typora-user-images\image-20220412124933156.png" alt="image-20220412124933156"></p>
<p>标记符号取值</p>
<p><img src="C:\Users\lichaikui\AppData\Roaming\Typora\typora-user-images\image-20220412124952564.png" alt="image-20220412124952564"></p>
]]></content>
      <categories>
        <category>00_MATLAB补充文件</category>
      </categories>
      <tags>
        <tag>MATLAB学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Simulink快捷键</title>
    <url>/2022/04/25/MATLAB%E5%AD%A6%E4%B9%A0/%E8%A1%A5%E5%85%85%E6%96%87%E4%BB%B6/17_Simulink%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<h1 id="Simulink快捷键"><a href="#Simulink快捷键" class="headerlink" title="Simulink快捷键"></a>Simulink快捷键</h1><h3 id="连接模块：按住Ctrl点击目标模块"><a href="#连接模块：按住Ctrl点击目标模块" class="headerlink" title="连接模块：按住Ctrl点击目标模块"></a>连接模块：按住Ctrl点击目标模块</h3><p>先选择源模块，再按住Ctrl时点击目标模块。特别是有多个模块连接到同一个模块时很有用。</p>
<p>比如，要把3个正弦信号连接到mux：</p>
<p><img src="https://s2.loli.net/2022/04/26/YclrNy6CbmUGdpK.png" alt="img"></p>
<p>先选中3个源模块：</p>
<p><img src="https://s2.loli.net/2022/04/26/IXcxGbk1zlB9Y6U.png" alt="img"></p>
<p>按住ctrl，点击目标模块mux，则一下子把3个模块都连上了：</p>
<p><img src="https://s2.loli.net/2022/04/26/kQdvgbLHGhtrX8f.png" alt="img"></p>
<h2 id="查找并添加模块：直接输入"><a href="#查找并添加模块：直接输入" class="headerlink" title="查找并添加模块：直接输入"></a>查找并添加模块：直接输入</h2><p>熟练之后，直接输入模块名称即可快速查找。比如，想要添加一个Gain增益模块，直接在画布的空白处输入gain：</p>
<p><img src="https://s2.loli.net/2022/04/26/f94O2rXnjLhoqbQ.png" alt="img"></p>
<p>按Table或者Enter键后，即可添加一个Gain模块：</p>
<p><img src="https://s2.loli.net/2022/04/26/YXIiOSMceWj5R6s.png" alt="img"></p>
<h2 id="重新打开模块主要参数设置对话框：Alt-Enter"><a href="#重新打开模块主要参数设置对话框：Alt-Enter" class="headerlink" title="重新打开模块主要参数设置对话框：Alt + Enter"></a>重新打开模块主要参数设置对话框：Alt + Enter</h2><p>添加模块后，会直接弹出该模块的主要参数设置的对话框，比如上图中的Gain参数。</p>
<p>模块添加完成后，如果想更改该参数，需要双击Gain模块，打开参数对话框。</p>
<p><img src="https://s2.loli.net/2022/04/26/96o2DN7kfLmxBjg.png" alt="img"></p>
<p>能不能重新打开刚添加模块时的那个对话框呢？可以！选中模块后，按Alt + Enter，那个输入Gain参数的对话框又出现了：</p>
<p><img src="https://s2.loli.net/2022/04/26/h6mGg7KBr9FWIMw.png" alt="img"></p>
<h2 id="复制模块：在模块上右键拖动"><a href="#复制模块：在模块上右键拖动" class="headerlink" title="复制模块：在模块上右键拖动"></a>复制模块：在模块上右键拖动</h2><p>想要再复制一个Gain模块，可以先Ctrl + C，再Ctrl + V。</p>
<p>还可以直接使用鼠标右键在Gain模块上拖动：</p>
<p><img src="https://s2.loli.net/2022/04/26/OCEIVNTK9yb7cef.png" alt="img"></p>
<h2 id="在信号线上创建分支：右键拖动"><a href="#在信号线上创建分支：右键拖动" class="headerlink" title="在信号线上创建分支：右键拖动"></a>在信号线上创建分支：右键拖动</h2><p>比如，想要在信号线上创建分支，把Gain1模块也连上。</p>
<p><img src="https://s2.loli.net/2022/04/26/oEMCunN75d9qkU6.png" alt="img">       <img src="https://s2.loli.net/2022/04/26/y9MVtxbfmDnOaJY.png" alt="img"></p>
<p>方法有三：</p>
<p>1，按住Ctrl键，在上面的信号线上拖动；</p>
<p>2，从Gain1开始画到上面的信号线上（反向画线）；</p>
<p>3，直接使用鼠标右键，从上面的信号线上拖下来。</p>
<h2 id="调整模块大小，保持相同的高宽比：按住Shift拖"><a href="#调整模块大小，保持相同的高宽比：按住Shift拖" class="headerlink" title="调整模块大小，保持相同的高宽比：按住Shift拖"></a>调整模块大小，保持相同的高宽比：按住Shift拖</h2><p>普通模式下，拖动模块四周的方框，可以任意缩放模块的大小。</p>
<p><img src="https://s2.loli.net/2022/04/26/FYSZX3UtGOunNoa.png" alt="img"></p>
<p>如果想要保持高宽比不变，可以按住Shift键，再拖：</p>
<p><img src="https://s2.loli.net/2022/04/26/5sD4z8p39fbmrBU.png" alt="img"></p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="保持中心位置不变：按住Ctrl拖"><a href="#保持中心位置不变：按住Ctrl拖" class="headerlink" title="保持中心位置不变：按住Ctrl拖"></a>保持中心位置不变：按住Ctrl拖</h2><p>如果直接拖放中间的Sine信号，会导致中心位置偏移，水平信号不能对齐。</p>
<p><img src="https://s2.loli.net/2022/04/26/d3ypnmXhWRv1rs6.png" alt="img"></p>
<p>此时，可以按住Ctrl键再拖，可以保持中心位置不变：</p>
<p><img src="https://s2.loli.net/2022/04/26/LUzNFqTahxO2BWu.png" alt="img"></p>
<h2 id="快速显示全部模块：空格键"><a href="#快速显示全部模块：空格键" class="headerlink" title="快速显示全部模块：空格键"></a>快速显示全部模块：空格键</h2><p>就是使用快捷键，实现：Zoom -&gt; Fit to View</p>
<p><img src="https://s2.loli.net/2022/04/26/eSuIhTF68aq9JwR.png" alt="img"></p>
<h2 id="其他常用快捷键"><a href="#其他常用快捷键" class="headerlink" title="其他常用快捷键"></a>其他常用快捷键</h2><p>正常大小显示（100%的显示比例）：Ctrl + 0 或者 Alt + 1 【View -&gt; Zoom -&gt; Normal View(100%)】</p>
<p>返回上一级（子系统的上一级）：Esc 【View -&gt; Nevigate -&gt; Up to Parent】</p>
<p>更新模型：Ctrl + D 【Simulation -&gt; Update Diagram】</p>
<p>配置参数：Ctrl + E 【Simulation -&gt; Model Configuration Parameters】</p>
<p>开始仿真：Ctrl + T 【Simulation -&gt; Run】</p>
<p>打开模型浏览器(Model Explorer)：Ctrl + H 【View -&gt; Model Explorer -&gt; Model Explorer &#x2F; Tools -&gt; Model Explorer】</p>
<p>打开库浏览器(Library Browser)：Ctrl + Shift + L 【View -&gt; Library Browser &#x2F; Tools -&gt; Library Browser】</p>
<p>顺时针旋转模块：Ctrl + R 【Diagram -&gt; Rotate &amp; Flip -&gt; Clockwise】</p>
<p>翻转模块：Ctrl + I 【Diagram -&gt; Rotate &amp; Flip -&gt; Flip Block】</p>
<p>创建模块封装：Ctrl + M  【Diagram -&gt; Mask -&gt; Create Mask】</p>
<p>查看封装模块内部：Ctrl + U 【Diagram -&gt; Mask -&gt; Look Under Mask】</p>
<h1 id="SLXC文件、SLPRJ文件"><a href="#SLXC文件、SLPRJ文件" class="headerlink" title="SLXC文件、SLPRJ文件"></a>SLXC文件、SLPRJ文件</h1><ul>
<li>SLXC文件是一个Simulink模型缓存数据</li>
<li>slprj 最开始叫做 sfprj，因为最初是为 stateflow 生成的，但随着更多的 simulink 功能需要该文件夹，就被命名成了 slprj。<br>作用：仿真时模块被自动转换为 C 代码并被编译成 S 函数，仿真时运行的是 S 函数，这些转换对用户都是隐藏的。而 slprj 文件夹就包含了这些转换过程的残余部分（笔者翻译的，不好理解），以及仿真时模块正确运行所需的 &#x2F;data&#x2F;etc 文件。其实，代码生成相关的临时文件也会存放在这里。</li>
</ul>
]]></content>
      <categories>
        <category>00_MATLAB补充文件</category>
      </categories>
      <tags>
        <tag>MATLAB学习</tag>
      </tags>
  </entry>
  <entry>
    <title>PID矫正环节详解.md</title>
    <url>/2022/05/02/MATLAB%E5%AD%A6%E4%B9%A0/%E8%A1%A5%E5%85%85%E6%96%87%E4%BB%B6/18_PID%E7%9F%AB%E6%AD%A3%E7%8E%AF%E8%8A%82%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2022/05/02/4c6xsVgrqwpYPXv.png" alt="img"></p>
<ul>
<li><p>比例环节：即时成比例地反应控制系统的偏差信号e(t)，偏差一旦产生，控制器立即产生控制作用以减小误差。当偏差e&#x3D;0时，控制作用也为0。因此，比例控制是基于偏差进行调节的，即有差调节。</p>
</li>
<li><p>积分环节：能对误差进行记忆，主要用于消除静差，提高系统的无差度，积分作用的强弱取决于积分时间常数Ti，Ti越大，积分作用越弱，反之则越强。</p>
</li>
<li><p>微分环节：能反映偏差信号的变化趋势(变化速率)，并能在偏差信号值变得太大之前，在系统中引入一个有效的早期修正信号，从而加快系统的动作速度，减小调节时间。</p>
</li>
</ul>
<p><strong>从时间的角度讲，比例作用是针对系统当前误差进行控制，积分作用则针对系统误差的历史，而微分作用则反映了系统误差的变化趋势，这三者的组合是“过去、现在、未来”的完美结合  。</strong></p>
<p>当被放入较重的物体时，PID控制器可以消除未来的误差，会立刻顶回去，而PI控制器必定会有被压下去的过程，慢慢回去。</p>
<ul>
<li><p>加大kp可以产生更刚性和更快的响应</p>
</li>
<li><p>加大ki可以减少震荡 </p>
</li>
<li><p>加大kd可以</p>
</li>
</ul>
<blockquote>
<p>例如自动控制汽车加速到指定速度，要是一加速，踩100%油门，很容易就超了，超速了立即踩100%刹车。。。自然是不行的，最好就是让它缓慢加速，这就是比例控制器参数的意义。</p>
<p>kp一般小于1，这样不会剧烈震荡了。但是仍然还会抖动，狂抖。</p>
</blockquote>
<blockquote>
<p>整个系统不是特别稳定，总是在“抖动”。</p>
<p>你心里设想一个弹簧：现在在平衡位置上。拉它一下，然后松手。这时它会震荡起来。因为阻力很小，它可能会震荡很长时间，才会重新停在平衡位置。</p>
<p>请想象一下：要是把上图所示的系统浸没在水里，同样拉它一下 ：这种情况下，重新停在平衡位置的时间就短得多。</p>
<p>我们需要一个控制作用，让被控制的物理量的“变化速度”趋于0，即类似于“阻尼”的作用。越接近目标，P的作用越温柔。有很多内在的或者外部的因素，使控制量发生小范围的摆动。D的作用就是让物理量的速度趋于0，只要什么时候，这个量具有了速度，D就向相反的方向用力，尽力刹住这个变化。kD参数越大，向速度相反方向刹车的力道就越强。究竟怎么刹的细节，不是很清楚。</p>
</blockquote>
<blockquote>
<p>还有静误差，例如电机的静摩檫力大于动摩擦力，调微的功率不够怎么办？(只要有误差，就能检测的到)。</p>
<p>在P的作用下，水温慢慢升高。直到升高到45℃时，他发现了一个不好的事情：天气太冷，水散热的速度，和P控制的加热的速度相等了。</p>
<p>这可怎么办？</p>
<p>P兄这样想：我和目标已经很近了，只需要轻轻加热就可以了。但是轻轻加热完全不起作用。<br>D兄这样想：加热和散热相等，温度没有波动，我好像不用调整什么。<br>于是，水温永远地停留在45℃，永远到不了50℃。</p>
<p>作为一个人，根据常识，我们知道，应该进一步增加加热的功率。可是增加多少该如何计算呢？</p>
<p>设置一个积分量。只要偏差存在，就不断地对偏差进行积分（累加），并反应在调节力度上。</p>
<p>什么意思呢？这样一来，即使45℃和50℃相差不太大，但是随着时间的推移，只要没达到目标温度，这个积分量就不断增加。系统就会慢慢意识到：还没有到达目标温度，该增加功率啦！在微分完全不起作用的情况下，功率就会越来越大。</p>
<p>到了目标温度后，假设温度没有波动，积分值就不会再变动。这时，加热功率仍然等于散热功率。但是，温度是稳稳的50℃。</p>
</blockquote>
<p>kI的值越大，积分时乘的系数就越大，积分效果越明显。</p>
<p>所以，I的作用就是，减小静态情况下的误差，让受控物理量尽可能接近目标值。</p>
<p>I在使用时还有个问题：需要设定积分限制。防止在刚开始加热时，就把积分量积得太大，难以控制。</p>
<p>三者并不是依次关系，谁先开始都没有问题。(当然kp最先。)</p>
<p><img src="https://s2.loli.net/2022/05/02/Xua7d2e4onJlLbN.gif" alt="img"></p>
<hr>
<p>版权声明：本文为CSDN博主「才大难为用」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/HeroIsUseless/article/details/108634876">https://blog.csdn.net/HeroIsUseless/article/details/108634876</a></p>
]]></content>
      <categories>
        <category>00_MATLAB补充文件</category>
      </categories>
      <tags>
        <tag>MATLAB学习</tag>
      </tags>
  </entry>
  <entry>
    <title>PID几个相关问题</title>
    <url>/2022/05/02/MATLAB%E5%AD%A6%E4%B9%A0/%E8%A1%A5%E5%85%85%E6%96%87%E4%BB%B6/19_PID%E5%87%A0%E4%B8%AA%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2022/05/02/MOY7GV9Lrj5D6K3.png" alt="img"></p>
<h2 id="如何理解PID控制中的容量滞后和纯滞后？两者有什么区别？"><a href="#如何理解PID控制中的容量滞后和纯滞后？两者有什么区别？" class="headerlink" title="如何理解PID控制中的容量滞后和纯滞后？两者有什么区别？"></a>如何理解PID控制中的容量滞后和纯滞后？两者有什么区别？</h2><ol>
<li>前者表达的是一定的能量或者是阻力 后者表达的是时间概念， zhi从定义上说： 容量滞后一段是由于物料或能量的传递需要通过一定阻力而引起的，通俗的说，就是对象受到一定的作用后，能量从不稳定到再次稳定的过程； 传递滞后又叫纯滞后，它的产生一般是由于介质的输送需要一段时间而引起的。</li>
<li>输出变量的变化落后于输入变量变化的时间称为纯滞后时间，纯滞后的产生一般是由于介质的输送或热的传递需要一段时间引起的。容量滞后通常又包括，测量滞后和传送滞后。测量滞后是检测元件在检测时需要建立一种平衡，如热电偶、热电阻、压力等响应较慢产生的一种滞后。而传送滞后则是在传感器、变送器、执行机构等设备产生的一种控制滞后，纯滞后是相对与测量滞后的。</li>
</ol>
<h2 id="显示器的坐标是什么？为什么发生器的信号不动呢？"><a href="#显示器的坐标是什么？为什么发生器的信号不动呢？" class="headerlink" title="显示器的坐标是什么？为什么发生器的信号不动呢？"></a>显示器的坐标是什么？为什么发生器的信号不动呢？</h2><h2 id="模糊控制规则"><a href="#模糊控制规则" class="headerlink" title="模糊控制规则"></a>模糊控制规则</h2><p>模糊控制规则是模糊控制器的核心，它的正确与否直接影响到控制器的性能，其数目的多寡也是衡量控制器性能的一个重要因素。</p>
<p>模糊控制规则是模糊控制器中知识库的一部分，模糊控制规则建立在语言变量的基础上。语言变量取值为“大”、“中”、“小”等这样的模糊子集，各模糊子集以隶属函数表明基本论域上的精确值属于该模糊子集的程度。因此，为建立模糊控制规则，需要将基本论域上的精确值依据隶属函数归并到各模糊子集中，从而用语言变量值（大、中、小等）代替精确值。这个过程代表了人在控制过程中对观察到的变量和控制量的模糊划分。由于各变量取值范围各异，故首先将各基本论域分别以不同的对应关系，映射到一个标准化论域上。通常，对应关系取为量化因子。为便于处理，将标准论域等分离散化，然后对论域进行模糊划分，定义模糊子集，如NB、PZ、PS等。同一个模糊控制规则库，对基本论域的模糊划分不同，控制效果也不同</p>
<p>其实if-then还是挺好想的</p>
<p>模糊PID控制，即利用模糊逻辑并根据一定的模糊规则对PID的参数进行实时的优化，以克服传统PID参数无法实时调整PID参数的缺点。模糊PID控制包括模糊化，确定模糊规则，解模糊等组成部分。小车通过传感器采集赛道信息，确定当前距赛道中线的偏差E并根据当前偏差和上次偏差的变化ec，根据给定的模糊规则进行模糊推理，最后对模糊参数进行解模糊，输出PID控制参数。</p>
<p><img src="https://s2.loli.net/2022/05/02/unL13chaoIlRK45.png" alt="img"></p>
<hr>
<p>版权声明：本文为CSDN博主「才大难为用」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/HeroIsUseless/article/details/108634876">https://blog.csdn.net/HeroIsUseless/article/details/108634876</a></p>
]]></content>
      <categories>
        <category>00_MATLAB补充文件</category>
      </categories>
      <tags>
        <tag>MATLAB学习</tag>
      </tags>
  </entry>
</search>
